
FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b6c  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009e18  08009e18  00019e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ec8  08009ec8  00019ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ed0  08009ed0  00019ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009ed4  08009ed4  00019ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000114  24000000  08009ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000144  24000114  08009fec  00020114  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000258  08009fec  00020258  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001642c  00000000  00000000  00020142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002bf3  00000000  00000000  0003656e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000eb8  00000000  00000000  00039168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d80  00000000  00000000  0003a020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000332d3  00000000  00000000  0003ada0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015624  00000000  00000000  0006e073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014ac46  00000000  00000000  00083697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ce2dd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000424c  00000000  00000000  001ce330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000114 	.word	0x24000114
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08009e00 	.word	0x08009e00

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000118 	.word	0x24000118
 80002e8:	08009e00 	.word	0x08009e00

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_ADC2_Init+0x74>)
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <MX_ADC2_Init+0x78>)
 80005f8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_ADC2_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_ADC2_Init+0x74>)
 8000602:	220c      	movs	r2, #12
 8000604:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_ADC2_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_ADC2_Init+0x74>)
 800060e:	2204      	movs	r2, #4
 8000610:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_ADC2_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_ADC2_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_ADC2_Init+0x74>)
 8000620:	2201      	movs	r2, #1
 8000622:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_ADC2_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_ADC2_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_ADC2_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_ADC2_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_ADC2_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_ADC2_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_ADC2_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_ADC2_Init+0x74>)
 8000652:	f002 fe5f 	bl	8003314 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800065c:	f000 fba2 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	24000130 	.word	0x24000130
 8000668:	40022100 	.word	0x40022100

0800066c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b0b4      	sub	sp, #208	; 0xd0
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	22c0      	movs	r2, #192	; 0xc0
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f008 feb9 	bl	80093f4 <memset>
  if(adcHandle->Instance==ADC2)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a27      	ldr	r2, [pc, #156]	; (8000724 <HAL_ADC_MspInit+0xb8>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d146      	bne.n	800071a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800068c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000690:	f04f 0300 	mov.w	r3, #0
 8000694:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80006ac:	23c0      	movs	r3, #192	; 0xc0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 fffa 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80006ce:	f000 fb69 	bl	8000da4 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006d4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80006d8:	4a13      	ldr	r2, [pc, #76]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80006e8:	f003 0320 	and.w	r3, r3, #32
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006f6:	4a0c      	ldr	r2, [pc, #48]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 8000702:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC2_C     ------> ADC2_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800070e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000712:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000716:	f002 fca5 	bl	8003064 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800071a:	bf00      	nop
 800071c:	37d0      	adds	r7, #208	; 0xd0
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40022100 	.word	0x40022100
 8000728:	58024400 	.word	0x58024400

0800072c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2224      	movs	r2, #36	; 0x24
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f008 fe5b 	bl	80093f4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_DAC1_Init+0x5c>)
 8000740:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_DAC1_Init+0x60>)
 8000742:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000744:	4810      	ldr	r0, [pc, #64]	; (8000788 <MX_DAC1_Init+0x5c>)
 8000746:	f003 fc5c 	bl	8004002 <HAL_DAC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000750:	f000 fb28 	bl	8000da4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <MX_DAC1_Init+0x5c>)
 8000770:	f003 fc6a 	bl	8004048 <HAL_DAC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 fb13 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	24000194 	.word	0x24000194
 800078c:	40007400 	.word	0x40007400

08000790 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a18      	ldr	r2, [pc, #96]	; (8000810 <HAL_DAC_MspInit+0x80>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d129      	bne.n	8000806 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80007b8:	4a16      	ldr	r2, [pc, #88]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007be:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80007c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 80007ee:	2310      	movs	r3, #16
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f2:	2303      	movs	r3, #3
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <HAL_DAC_MspInit+0x88>)
 8000802:	f003 fd5f 	bl	80042c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40007400 	.word	0x40007400
 8000814:	58024400 	.word	0x58024400
 8000818:	58020000 	.word	0x58020000

0800081c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b80      	ldr	r3, [pc, #512]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000834:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000838:	4a7e      	ldr	r2, [pc, #504]	; (8000a34 <MX_GPIO_Init+0x218>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000842:	4b7c      	ldr	r3, [pc, #496]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000844:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	623b      	str	r3, [r7, #32]
 800084e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000850:	4b78      	ldr	r3, [pc, #480]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000852:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000856:	4a77      	ldr	r2, [pc, #476]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000858:	f043 0320 	orr.w	r3, r3, #32
 800085c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000860:	4b74      	ldr	r3, [pc, #464]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000862:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	4b71      	ldr	r3, [pc, #452]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000870:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000874:	4a6f      	ldr	r2, [pc, #444]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800087e:	4b6d      	ldr	r3, [pc, #436]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000880:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b69      	ldr	r3, [pc, #420]	; (8000a34 <MX_GPIO_Init+0x218>)
 800088e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000892:	4a68      	ldr	r2, [pc, #416]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800089c:	4b65      	ldr	r3, [pc, #404]	; (8000a34 <MX_GPIO_Init+0x218>)
 800089e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b62      	ldr	r3, [pc, #392]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b0:	4a60      	ldr	r2, [pc, #384]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008b2:	f043 0302 	orr.w	r3, r3, #2
 80008b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ba:	4b5e      	ldr	r3, [pc, #376]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c8:	4b5a      	ldr	r3, [pc, #360]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ce:	4a59      	ldr	r2, [pc, #356]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008d8:	4b56      	ldr	r3, [pc, #344]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e6:	4b53      	ldr	r3, [pc, #332]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ec:	4a51      	ldr	r2, [pc, #324]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008f6:	4b4f      	ldr	r3, [pc, #316]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000904:	4b4b      	ldr	r3, [pc, #300]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000906:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090a:	4a4a      	ldr	r2, [pc, #296]	; (8000a34 <MX_GPIO_Init+0x218>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000914:	4b47      	ldr	r3, [pc, #284]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000916:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	4843      	ldr	r0, [pc, #268]	; (8000a38 <MX_GPIO_Init+0x21c>)
 800092a:	f003 fe7b 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f244 0101 	movw	r1, #16385	; 0x4001
 8000934:	4841      	ldr	r0, [pc, #260]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000936:	f003 fe75 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2102      	movs	r1, #2
 800093e:	4840      	ldr	r0, [pc, #256]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000940:	f003 fe70 	bl	8004624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	483a      	ldr	r0, [pc, #232]	; (8000a44 <MX_GPIO_Init+0x228>)
 800095a:	f003 fcb3 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4830      	ldr	r0, [pc, #192]	; (8000a38 <MX_GPIO_Init+0x21c>)
 8000978:	f003 fca4 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800097c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	4829      	ldr	r0, [pc, #164]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000996:	f003 fc95 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ac:	4619      	mov	r1, r3
 80009ae:	4826      	ldr	r0, [pc, #152]	; (8000a48 <MX_GPIO_Init+0x22c>)
 80009b0:	f003 fc88 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	4619      	mov	r1, r3
 80009c8:	4820      	ldr	r0, [pc, #128]	; (8000a4c <MX_GPIO_Init+0x230>)
 80009ca:	f003 fc7b 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009e0:	230a      	movs	r3, #10
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	4818      	ldr	r0, [pc, #96]	; (8000a4c <MX_GPIO_Init+0x230>)
 80009ec:	f003 fc6a 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	4810      	ldr	r0, [pc, #64]	; (8000a4c <MX_GPIO_Init+0x230>)
 8000a0a:	f003 fc5b 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000a26:	f003 fc4d 	bl	80042c4 <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3738      	adds	r7, #56	; 0x38
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	58024400 	.word	0x58024400
 8000a38:	58021400 	.word	0x58021400
 8000a3c:	58020400 	.word	0x58020400
 8000a40:	58021000 	.word	0x58021000
 8000a44:	58020800 	.word	0x58020800
 8000a48:	58021800 	.word	0x58021800
 8000a4c:	58020000 	.word	0x58020000

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a54:	b089      	sub	sp, #36	; 0x24
 8000a56:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  uint16_t 	adc_value = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	823b      	strh	r3, [r7, #16]

  uint16_t 	sample = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	827b      	strh	r3, [r7, #18]
  int16_t 	adc[header.N];
 8000a60:	4b77      	ldr	r3, [pc, #476]	; (8000c40 <main+0x1f0>)
 8000a62:	899e      	ldrh	r6, [r3, #12]
 8000a64:	4633      	mov	r3, r6
 8000a66:	3b01      	subs	r3, #1
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	b2b3      	uxth	r3, r6
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	469a      	mov	sl, r3
 8000a70:	4693      	mov	fp, r2
 8000a72:	f04f 0200 	mov.w	r2, #0
 8000a76:	f04f 0300 	mov.w	r3, #0
 8000a7a:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000a7e:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000a82:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000a86:	b2b3      	uxth	r3, r6
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4698      	mov	r8, r3
 8000a8c:	4691      	mov	r9, r2
 8000a8e:	f04f 0200 	mov.w	r2, #0
 8000a92:	f04f 0300 	mov.w	r3, #0
 8000a96:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000a9a:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000a9e:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000aa2:	4633      	mov	r3, r6
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	3307      	adds	r3, #7
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	ebad 0d03 	sub.w	sp, sp, r3
 8000ab0:	ab02      	add	r3, sp, #8
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	085b      	lsrs	r3, r3, #1
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
  int16_t 	y[h_LENGTH+header.N-1 ];
 8000aba:	4b61      	ldr	r3, [pc, #388]	; (8000c40 <main+0x1f0>)
 8000abc:	899b      	ldrh	r3, [r3, #12]
 8000abe:	f103 0621 	add.w	r6, r3, #33	; 0x21
 8000ac2:	1e73      	subs	r3, r6, #1
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4632      	mov	r2, r6
 8000ac8:	2300      	movs	r3, #0
 8000aca:	4614      	mov	r4, r2
 8000acc:	461d      	mov	r5, r3
 8000ace:	f04f 0200 	mov.w	r2, #0
 8000ad2:	f04f 0300 	mov.w	r3, #0
 8000ad6:	012b      	lsls	r3, r5, #4
 8000ad8:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000adc:	0122      	lsls	r2, r4, #4
 8000ade:	4632      	mov	r2, r6
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	f04f 0300 	mov.w	r3, #0
 8000aee:	010b      	lsls	r3, r1, #4
 8000af0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000af4:	0102      	lsls	r2, r0, #4
 8000af6:	4633      	mov	r3, r6
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	3307      	adds	r3, #7
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	ebad 0d03 	sub.w	sp, sp, r3
 8000b04:	ab02      	add	r3, sp, #8
 8000b06:	3301      	adds	r3, #1
 8000b08:	085b      	lsrs	r3, r3, #1
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0e:	f002 f9f3 	bl	8002ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b12:	f000 f8a9 	bl	8000c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b16:	f7ff fe81 	bl	800081c <MX_GPIO_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b1a:	f000 fb5f 	bl	80011dc <MX_USB_OTG_HS_USB_Init>
  MX_ADC2_Init();
 8000b1e:	f7ff fd67 	bl	80005f0 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000b22:	f000 faa5 	bl	8001070 <MX_USART3_UART_Init>
  MX_DAC1_Init();
 8000b26:	f7ff fe01 	bl	800072c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  CyclesCounterInit(CLOCK); // Enable the cycle counter
 8000b2a:	4846      	ldr	r0, [pc, #280]	; (8000c44 <main+0x1f4>)
 8000b2c:	f000 f926 	bl	8000d7c <CyclesCounterInit>

  printf("Inicio ADC DAC \r\n");
 8000b30:	4845      	ldr	r0, [pc, #276]	; (8000c48 <main+0x1f8>)
 8000b32:	f008 fcd5 	bl	80094e0 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	CyclesCounterReset();
 8000b36:	4b45      	ldr	r3, [pc, #276]	; (8000c4c <main+0x1fc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	605a      	str	r2, [r3, #4]

	HAL_ADC_Start(&hadc2);
 8000b3c:	4844      	ldr	r0, [pc, #272]	; (8000c50 <main+0x200>)
 8000b3e:	f002 fd43 	bl	80035c8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 8000b42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b46:	4842      	ldr	r0, [pc, #264]	; (8000c50 <main+0x200>)
 8000b48:	f002 fe2c 	bl	80037a4 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc2);
 8000b4c:	4840      	ldr	r0, [pc, #256]	; (8000c50 <main+0x200>)
 8000b4e:	f002 ff01 	bl	8003954 <HAL_ADC_GetValue>
 8000b52:	4603      	mov	r3, r0
 8000b54:	823b      	strh	r3, [r7, #16]
	HAL_ADC_Stop(&hadc2);
 8000b56:	483e      	ldr	r0, [pc, #248]	; (8000c50 <main+0x200>)
 8000b58:	f002 fdf0 	bl	800373c <HAL_ADC_Stop>

	adc[sample] = (((int16_t )adc_value - 512 )>>(10 - BITS))<<(6 + 10 - BITS);
 8000b5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b60:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000b64:	019b      	lsls	r3, r3, #6
 8000b66:	8a7a      	ldrh	r2, [r7, #18]
 8000b68:	b219      	sxth	r1, r3
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	// dacWrite(DAC, y[sample]); // will be 128 samples delayed from input.

	if (++sample==header.N )
 8000b70:	8a7b      	ldrh	r3, [r7, #18]
 8000b72:	3301      	adds	r3, #1
 8000b74:	827b      	strh	r3, [r7, #18]
 8000b76:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <main+0x1f0>)
 8000b78:	899b      	ldrh	r3, [r3, #12]
 8000b7a:	8a7a      	ldrh	r2, [r7, #18]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d152      	bne.n	8000c26 <main+0x1d6>
	{
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000b80:	2101      	movs	r1, #1
 8000b82:	4834      	ldr	r0, [pc, #208]	; (8000c54 <main+0x204>)
 8000b84:	f003 fd67 	bl	8004656 <HAL_GPIO_TogglePin>
		sample = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	827b      	strh	r3, [r7, #18]
		arm_conv_q15(adc, header.N, h, h_LENGTH, y);
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <main+0x1f0>)
 8000b8e:	899b      	ldrh	r3, [r3, #12]
 8000b90:	4619      	mov	r1, r3
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2322      	movs	r3, #34	; 0x22
 8000b98:	4a2f      	ldr	r2, [pc, #188]	; (8000c58 <main+0x208>)
 8000b9a:	68b8      	ldr	r0, [r7, #8]
 8000b9c:	f000 fb4f 	bl	800123e <arm_conv_q15>
		header.id++;
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <main+0x1f0>)
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a26      	ldr	r2, [pc, #152]	; (8000c40 <main+0x1f0>)
 8000ba8:	6093      	str	r3, [r2, #8]
		HAL_UART_Transmit(&huart3,(uint8_t*)&header, sizeof(struct header_struct), 0xFFFF);
 8000baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bae:	2216      	movs	r2, #22
 8000bb0:	4923      	ldr	r1, [pc, #140]	; (8000c40 <main+0x1f0>)
 8000bb2:	482a      	ldr	r0, [pc, #168]	; (8000c5c <main+0x20c>)
 8000bb4:	f007 f9dc 	bl	8007f70 <HAL_UART_Transmit>

	 for (int i=0;i<(header.N+h_LENGTH-1); i++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	e02d      	b.n	8000c1a <main+0x1ca>
	 {
		 HAL_UART_Transmit(&huart3,(uint8_t*)(i<header.N ? &adc[i] : &offset), sizeof(adc[0]), 0xFFFF);
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <main+0x1f0>)
 8000bc0:	899b      	ldrh	r3, [r3, #12]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	da04      	bge.n	8000bd4 <main+0x184>
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	18d1      	adds	r1, r2, r3
 8000bd2:	e000      	b.n	8000bd6 <main+0x186>
 8000bd4:	4922      	ldr	r1, [pc, #136]	; (8000c60 <main+0x210>)
 8000bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bda:	2202      	movs	r2, #2
 8000bdc:	481f      	ldr	r0, [pc, #124]	; (8000c5c <main+0x20c>)
 8000bde:	f007 f9c7 	bl	8007f70 <HAL_UART_Transmit>
		 HAL_UART_Transmit(&huart3,(uint8_t* )(i<h_LENGTH ? &h[i] : &zero), sizeof(h[0]), 0xFFFF);
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	2b21      	cmp	r3, #33	; 0x21
 8000be6:	dc04      	bgt.n	8000bf2 <main+0x1a2>
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4a1a      	ldr	r2, [pc, #104]	; (8000c58 <main+0x208>)
 8000bee:	1899      	adds	r1, r3, r2
 8000bf0:	e000      	b.n	8000bf4 <main+0x1a4>
 8000bf2:	491c      	ldr	r1, [pc, #112]	; (8000c64 <main+0x214>)
 8000bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	4818      	ldr	r0, [pc, #96]	; (8000c5c <main+0x20c>)
 8000bfc:	f007 f9b8 	bl	8007f70 <HAL_UART_Transmit>
		 HAL_UART_Transmit(&huart3,(uint8_t*)(&y[i]), sizeof(y[0]), 0xFFFF);
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	18d1      	adds	r1, r2, r3
 8000c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	4813      	ldr	r0, [pc, #76]	; (8000c5c <main+0x20c>)
 8000c10:	f007 f9ae 	bl	8007f70 <HAL_UART_Transmit>
	 for (int i=0;i<(header.N+h_LENGTH-1); i++)
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3301      	adds	r3, #1
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <main+0x1f0>)
 8000c1c:	899b      	ldrh	r3, [r3, #12]
 8000c1e:	3320      	adds	r3, #32
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	ddcb      	ble.n	8000bbe <main+0x16e>
	 }
	 //adcRead(CH1);
	}

    while(CyclesCounterRead() < (CLOCK / header.fs))
 8000c26:	bf00      	nop
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <main+0x1fc>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <main+0x1f0>)
 8000c2e:	89d2      	ldrh	r2, [r2, #14]
 8000c30:	4611      	mov	r1, r2
 8000c32:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <main+0x1f4>)
 8000c34:	fb92 f2f1 	sdiv	r2, r2, r1
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d3f5      	bcc.n	8000c28 <main+0x1d8>
	CyclesCounterReset();
 8000c3c:	e77b      	b.n	8000b36 <main+0xe6>
 8000c3e:	bf00      	nop
 8000c40:	24000088 	.word	0x24000088
 8000c44:	10b07600 	.word	0x10b07600
 8000c48:	08009e18 	.word	0x08009e18
 8000c4c:	e0001000 	.word	0xe0001000
 8000c50:	24000130 	.word	0x24000130
 8000c54:	58020400 	.word	0x58020400
 8000c58:	24000000 	.word	0x24000000
 8000c5c:	240001b0 	.word	0x240001b0
 8000c60:	2400009e 	.word	0x2400009e
 8000c64:	240001a8 	.word	0x240001a8

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b09c      	sub	sp, #112	; 0x70
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	224c      	movs	r2, #76	; 0x4c
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f008 fbbc 	bl	80093f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2220      	movs	r2, #32
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f008 fbb6 	bl	80093f4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000c88:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <SystemClock_Config+0xe8>)
 8000c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c92:	2004      	movs	r0, #4
 8000c94:	f003 fcfa 	bl	800468c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c98:	2300      	movs	r3, #0
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <SystemClock_Config+0xec>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a2c      	ldr	r2, [pc, #176]	; (8000d54 <SystemClock_Config+0xec>)
 8000ca2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <SystemClock_Config+0xec>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cb4:	bf00      	nop
 8000cb6:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <SystemClock_Config+0xec>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cc2:	d1f8      	bne.n	8000cb6 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000cc4:	2329      	movs	r3, #41	; 0x29
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cc8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000ce2:	2346      	movs	r3, #70	; 0x46
 8000ce4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000cea:	2314      	movs	r3, #20
 8000cec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d02:	4618      	mov	r0, r3
 8000d04:	f003 fd1c 	bl	8004740 <HAL_RCC_OscConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d0e:	f000 f849 	bl	8000da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d12:	233f      	movs	r3, #63	; 0x3f
 8000d14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d16:	2303      	movs	r3, #3
 8000d18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d22:	2340      	movs	r3, #64	; 0x40
 8000d24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d26:	2340      	movs	r3, #64	; 0x40
 8000d28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d30:	2340      	movs	r3, #64	; 0x40
 8000d32:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2107      	movs	r1, #7
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f004 f933 	bl	8004fa4 <HAL_RCC_ClockConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000d44:	f000 f82e 	bl	8000da4 <Error_Handler>
  }
}
 8000d48:	bf00      	nop
 8000d4a:	3770      	adds	r7, #112	; 0x70
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	58024400 	.word	0x58024400
 8000d54:	58024800 	.word	0x58024800

08000d58 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000d60:	1d39      	adds	r1, r7, #4
 8000d62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d66:	2201      	movs	r2, #1
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <__io_putchar+0x20>)
 8000d6a:	f007 f901 	bl	8007f70 <HAL_UART_Transmit>

  return ch;
 8000d6e:	687b      	ldr	r3, [r7, #4]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	240001b0 	.word	0x240001b0

08000d7c <CyclesCounterInit>:

int CyclesCounterInit( uint32_t clockSpeed )
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
   DWT->CTRL  |= 1; // *DWT_CTRL  |= 1;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <CyclesCounterInit+0x24>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <CyclesCounterInit+0x24>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6013      	str	r3, [r2, #0]
   return 1;
 8000d90:	2301      	movs	r3, #1
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e0001000 	.word	0xe0001000

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	e7fe      	b.n	8000dac <Error_Handler+0x8>
	...

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_MspInit+0x30>)
 8000db8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000dbc:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x30>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x30>)
 8000dc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	58024400 	.word	0x58024400

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e30:	f002 f8d4 	bl	8002fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	e00a      	b.n	8000e60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e4a:	f3af 8000 	nop.w
 8000e4e:	4601      	mov	r1, r0
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1c5a      	adds	r2, r3, #1
 8000e54:	60ba      	str	r2, [r7, #8]
 8000e56:	b2ca      	uxtb	r2, r1
 8000e58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	dbf0      	blt.n	8000e4a <_read+0x12>
  }

  return len;
 8000e68:	687b      	ldr	r3, [r7, #4]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	e009      	b.n	8000e98 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	60ba      	str	r2, [r7, #8]
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff63 	bl	8000d58 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3301      	adds	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	dbf1      	blt.n	8000e84 <_write+0x12>
  }
  return len;
 8000ea0:	687b      	ldr	r3, [r7, #4]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <_close>:

int _close(int file)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ed2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <_isatty>:

int _isatty(int file)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <_sbrk+0x5c>)
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <_sbrk+0x60>)
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <_sbrk+0x64>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <_sbrk+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d207      	bcs.n	8000f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f44:	f008 fa2c 	bl	80093a0 <__errno>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	e009      	b.n	8000f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <_sbrk+0x64>)
 8000f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	24100000 	.word	0x24100000
 8000f74:	00000400 	.word	0x00000400
 8000f78:	240001ac 	.word	0x240001ac
 8000f7c:	24000258 	.word	0x24000258

08000f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f84:	4b32      	ldr	r3, [pc, #200]	; (8001050 <SystemInit+0xd0>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8a:	4a31      	ldr	r2, [pc, #196]	; (8001050 <SystemInit+0xd0>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f94:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <SystemInit+0xd4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 030f 	and.w	r3, r3, #15
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d807      	bhi.n	8000fb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <SystemInit+0xd4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f023 030f 	bic.w	r3, r3, #15
 8000fa8:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <SystemInit+0xd4>)
 8000faa:	f043 0303 	orr.w	r3, r3, #3
 8000fae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <SystemInit+0xd8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a28      	ldr	r2, [pc, #160]	; (8001058 <SystemInit+0xd8>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fbc:	4b26      	ldr	r3, [pc, #152]	; (8001058 <SystemInit+0xd8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <SystemInit+0xd8>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4924      	ldr	r1, [pc, #144]	; (8001058 <SystemInit+0xd8>)
 8000fc8:	4b24      	ldr	r3, [pc, #144]	; (800105c <SystemInit+0xdc>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <SystemInit+0xd4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d007      	beq.n	8000fea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <SystemInit+0xd4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f023 030f 	bic.w	r3, r3, #15
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <SystemInit+0xd4>)
 8000fe4:	f043 0303 	orr.w	r3, r3, #3
 8000fe8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <SystemInit+0xd8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <SystemInit+0xd8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <SystemInit+0xd8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <SystemInit+0xd8>)
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <SystemInit+0xe0>)
 8001000:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <SystemInit+0xd8>)
 8001004:	4a17      	ldr	r2, [pc, #92]	; (8001064 <SystemInit+0xe4>)
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <SystemInit+0xd8>)
 800100a:	4a17      	ldr	r2, [pc, #92]	; (8001068 <SystemInit+0xe8>)
 800100c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <SystemInit+0xd8>)
 8001010:	2200      	movs	r2, #0
 8001012:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <SystemInit+0xd8>)
 8001016:	4a14      	ldr	r2, [pc, #80]	; (8001068 <SystemInit+0xe8>)
 8001018:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <SystemInit+0xd8>)
 800101c:	2200      	movs	r2, #0
 800101e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <SystemInit+0xd8>)
 8001022:	4a11      	ldr	r2, [pc, #68]	; (8001068 <SystemInit+0xe8>)
 8001024:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <SystemInit+0xd8>)
 8001028:	2200      	movs	r2, #0
 800102a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <SystemInit+0xd8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a09      	ldr	r2, [pc, #36]	; (8001058 <SystemInit+0xd8>)
 8001032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001036:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <SystemInit+0xd8>)
 800103a:	2200      	movs	r2, #0
 800103c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <SystemInit+0xec>)
 8001040:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001044:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	52002000 	.word	0x52002000
 8001058:	58024400 	.word	0x58024400
 800105c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001060:	02020200 	.word	0x02020200
 8001064:	01ff0000 	.word	0x01ff0000
 8001068:	01010280 	.word	0x01010280
 800106c:	52004000 	.word	0x52004000

08001070 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <MX_USART3_UART_Init+0x90>)
 8001076:	4a23      	ldr	r2, [pc, #140]	; (8001104 <MX_USART3_UART_Init+0x94>)
 8001078:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <MX_USART3_UART_Init+0x90>)
 800107c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001080:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <MX_USART3_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_USART3_UART_Init+0x90>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <MX_USART3_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_USART3_UART_Init+0x90>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <MX_USART3_UART_Init+0x90>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <MX_USART3_UART_Init+0x90>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <MX_USART3_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_USART3_UART_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <MX_USART3_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010b8:	4811      	ldr	r0, [pc, #68]	; (8001100 <MX_USART3_UART_Init+0x90>)
 80010ba:	f006 ff09 	bl	8007ed0 <HAL_UART_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010c4:	f7ff fe6e 	bl	8000da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c8:	2100      	movs	r1, #0
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <MX_USART3_UART_Init+0x90>)
 80010cc:	f008 f89d 	bl	800920a <HAL_UARTEx_SetTxFifoThreshold>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010d6:	f7ff fe65 	bl	8000da4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010da:	2100      	movs	r1, #0
 80010dc:	4808      	ldr	r0, [pc, #32]	; (8001100 <MX_USART3_UART_Init+0x90>)
 80010de:	f008 f8d2 	bl	8009286 <HAL_UARTEx_SetRxFifoThreshold>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010e8:	f7ff fe5c 	bl	8000da4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <MX_USART3_UART_Init+0x90>)
 80010ee:	f008 f853 	bl	8009198 <HAL_UARTEx_DisableFifoMode>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010f8:	f7ff fe54 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	240001b0 	.word	0x240001b0
 8001104:	40004800 	.word	0x40004800

08001108 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b0ba      	sub	sp, #232	; 0xe8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	22c0      	movs	r2, #192	; 0xc0
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f008 f963 	bl	80093f4 <memset>
  if(uartHandle->Instance==USART3)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <HAL_UART_MspInit+0xc8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d146      	bne.n	80011c6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001138:	f04f 0202 	mov.w	r2, #2
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	4618      	mov	r0, r3
 8001150:	f004 fab4 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800115a:	f7ff fe23 	bl	8000da4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_UART_MspInit+0xcc>)
 8001160:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <HAL_UART_MspInit+0xcc>)
 8001166:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_UART_MspInit+0xcc>)
 8001170:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_UART_MspInit+0xcc>)
 800117e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <HAL_UART_MspInit+0xcc>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_UART_MspInit+0xcc>)
 800118e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800119a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800119e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011b4:	2307      	movs	r3, #7
 80011b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_UART_MspInit+0xd0>)
 80011c2:	f003 f87f 	bl	80042c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011c6:	bf00      	nop
 80011c8:	37e8      	adds	r7, #232	; 0xe8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40004800 	.word	0x40004800
 80011d4:	58024400 	.word	0x58024400
 80011d8:	58020c00 	.word	0x58020c00

080011dc <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001224 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011f0:	f7ff fec6 	bl	8000f80 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	; (800122c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	; (8001238 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800121a:	f008 f8c7 	bl	80093ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff fc17 	bl	8000a50 <main>
  bx  lr
 8001222:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001224:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001228:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800122c:	24000114 	.word	0x24000114
  ldr r2, =_sidata
 8001230:	08009ed8 	.word	0x08009ed8
  ldr r2, =_sbss
 8001234:	24000114 	.word	0x24000114
  ldr r4, =_ebss
 8001238:	24000258 	.word	0x24000258

0800123c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC_IRQHandler>

0800123e <arm_conv_q15>:
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst)
{
 800123e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001242:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8001246:	af00      	add	r7, sp, #0
 8001248:	f507 6484 	add.w	r4, r7, #1056	; 0x420
 800124c:	f5a4 7473 	sub.w	r4, r4, #972	; 0x3cc
 8001250:	6020      	str	r0, [r4, #0]
 8001252:	f507 6084 	add.w	r0, r7, #1056	; 0x420
 8001256:	f5a0 7074 	sub.w	r0, r0, #976	; 0x3d0
 800125a:	6001      	str	r1, [r0, #0]
 800125c:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8001260:	f5a1 7175 	sub.w	r1, r1, #980	; 0x3d4
 8001264:	600a      	str	r2, [r1, #0]
 8001266:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800126a:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 800126e:	6013      	str	r3, [r2, #0]

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  q15_t *pIn1;                                   /* inputA pointer */
  q15_t *pIn2;                                   /* inputB pointer */
  q15_t *pOut = pDst;                            /* output pointer */
 8001270:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001274:	f5a3 722f 	sub.w	r2, r3, #700	; 0x2bc
 8001278:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800127c:	6013      	str	r3, [r2, #0]
  uint32_t blockSize1, blockSize2, blockSize3, j, k, count, blkCnt;     /* loop counter */

  /* The algorithm implementation is based on the lengths of the inputs. */
  /* srcB is always made to slide across srcA. */
  /* So srcBLen is always considered as shorter or equal to srcALen */
  if (srcALen >= srcBLen)
 800127e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001282:	f5a3 7274 	sub.w	r2, r3, #976	; 0x3d0
 8001286:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800128a:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800128e:	6812      	ldr	r2, [r2, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	429a      	cmp	r2, r3
 8001294:	d30e      	bcc.n	80012b4 <arm_conv_q15+0x76>
  {
    /* Initialization of inputA pointer */
    pIn1 = pSrcA;
 8001296:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800129a:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c

    /* Initialization of inputB pointer */
    pIn2 = pSrcB;
 80012a4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80012a8:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 80012b2:	e025      	b.n	8001300 <arm_conv_q15+0xc2>
  }
  else
  {
    /* Initialization of inputA pointer */
    pIn1 = pSrcB;
 80012b4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80012b8:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c

    /* Initialization of inputB pointer */
    pIn2 = pSrcA;
 80012c2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80012c6:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

    /* srcBLen is always considered as shorter or equal to srcALen */
    j = srcBLen;
 80012d0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80012d4:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
    srcBLen = srcALen;
 80012de:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80012e2:	f5a3 7276 	sub.w	r2, r3, #984	; 0x3d8
 80012e6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80012ea:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6013      	str	r3, [r2, #0]
    srcALen = j;
 80012f2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80012f6:	f5a3 7274 	sub.w	r2, r3, #976	; 0x3d0
 80012fa:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80012fe:	6013      	str	r3, [r2, #0]
   * In the third stage of the algorithm, the multiplications decrease by one
   * for every iteration. */

  /* The algorithm is implemented in three stages.
     The loop counters of each stage is initiated here. */
  blockSize1 = srcBLen - 1U;
 8001300:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001304:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3b01      	subs	r3, #1
 800130c:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  blockSize2 = srcALen - (srcBLen - 1U);
 8001310:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001314:	f5a3 7274 	sub.w	r2, r3, #976	; 0x3d0
 8001318:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800131c:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	3301      	adds	r3, #1
 8001328:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
   * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]
   */

  /* In this stage the MAC operations are increased by 1 for every iteration.
     The count variable holds the number of MAC operations performed */
  count = 1U;
 800132c:	2301      	movs	r3, #1
 800132e:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0

  /* Working pointer of inputA */
  px = pIn1;
 8001332:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001336:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 800133a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800133e:	6013      	str	r3, [r2, #0]

  /* Working pointer of inputB */
  py = pIn2;
 8001340:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001344:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8001348:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800134c:	6013      	str	r3, [r2, #0]
  /* For loop unrolling by 4, this stage is divided into two. */
  /* First part of this stage computes the MAC operations less than 4 */
  /* Second part of this stage computes the MAC operations greater than or equal to 4 */

  /* The first part of the stage starts here */
  while ((count < 4U) && (blockSize1 > 0U))
 800134e:	e09f      	b.n	8001490 <arm_conv_q15+0x252>
  {
    /* Accumulator is made zero for every iteration */
    sum = 0;
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800135c:	e9c1 2300 	strd	r2, r3, [r1]

    /* Loop over number of MAC operations between
     * inputA samples and inputB samples */
    k = count;
 8001360:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001364:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

    while (k > 0U)
 8001368:	e04e      	b.n	8001408 <arm_conv_q15+0x1ca>
    {
      /* Perform the multiply-accumulates */
      sum = __SMLALD(*px++, *py--, sum);
 800136a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800136e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001372:	6819      	ldr	r1, [r3, #0]
 8001374:	1c8a      	adds	r2, r1, #2
 8001376:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800137a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	f9b1 3000 	ldrsh.w	r3, [r1]
 8001384:	4618      	mov	r0, r3
 8001386:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800138a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800138e:	6819      	ldr	r1, [r3, #0]
 8001390:	1e8a      	subs	r2, r1, #2
 8001392:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001396:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	f9b1 3000 	ldrsh.w	r3, [r1]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f8c7 0364 	str.w	r0, [r7, #868]	; 0x364
 80013ae:	f8c7 1360 	str.w	r1, [r7, #864]	; 0x360
 80013b2:	e9c7 23d6 	strd	r2, r3, [r7, #856]	; 0x358
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;
 80013b6:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 80013ba:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

#ifndef __ARMEB__   /* Little endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80013be:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80013c2:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80013c6:	6819      	ldr	r1, [r3, #0]
 80013c8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80013cc:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	f8d7 0364 	ldr.w	r0, [r7, #868]	; 0x364
 80013d6:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80013da:	fbc0 12c3 	smlald	r1, r2, r0, r3
 80013de:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80013e2:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80013e6:	6019      	str	r1, [r3, #0]
 80013e8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80013ec:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80013f0:	605a      	str	r2, [r3, #4]
#else               /* Big endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[1]), "=r" (llr.w32[0]): "r" (op1), "r" (op2) , "0" (llr.w32[1]), "1" (llr.w32[0]) );
#endif

  return(llr.w64);
 80013f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80013f6:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80013fa:	e9c1 2300 	strd	r2, r3, [r1]

      /* Decrement the loop counter */
      k--;
 80013fe:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8001402:	3b01      	subs	r3, #1
 8001404:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    while (k > 0U)
 8001408:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1ac      	bne.n	800136a <arm_conv_q15+0x12c>
    }

    /* Store the result in the accumulator in the destination buffer. */
    *pOut++ = (q15_t) (__SSAT((sum >> 15), 16));
 8001410:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f04f 0000 	mov.w	r0, #0
 800141c:	f04f 0100 	mov.w	r1, #0
 8001420:	0bd0      	lsrs	r0, r2, #15
 8001422:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8001426:	13d9      	asrs	r1, r3, #15
 8001428:	4603      	mov	r3, r0
 800142a:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 800142e:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8001432:	f303 030f 	ssat	r3, #16, r3
 8001436:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 800143a:	f8d7 03c0 	ldr.w	r0, [r7, #960]	; 0x3c0
 800143e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001442:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8001446:	6819      	ldr	r1, [r3, #0]
 8001448:	1c8a      	adds	r2, r1, #2
 800144a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800144e:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	b203      	sxth	r3, r0
 8001456:	800b      	strh	r3, [r1, #0]

    /* Update the inputA and inputB pointers for next MAC calculation */
    py = pIn2 + count;
 8001458:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800145c:	005a      	lsls	r2, r3, #1
 800145e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001462:	441a      	add	r2, r3
 8001464:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001468:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800146c:	601a      	str	r2, [r3, #0]
    px = pIn1;
 800146e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001472:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8001476:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800147a:	6013      	str	r3, [r2, #0]

    /* Increment the MAC count */
    count++;
 800147c:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001480:	3301      	adds	r3, #1
 8001482:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0

    /* Decrement the loop counter */
    blockSize1--;
 8001486:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 800148a:	3b01      	subs	r3, #1
 800148c:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  while ((count < 4U) && (blockSize1 > 0U))
 8001490:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001494:	2b03      	cmp	r3, #3
 8001496:	d804      	bhi.n	80014a2 <arm_conv_q15+0x264>
 8001498:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 800149c:	2b00      	cmp	r3, #0
 800149e:	f47f af57 	bne.w	8001350 <arm_conv_q15+0x112>

  /* The second part of the stage starts here */
  /* The internal loop, over count, is unrolled by 4 */
  /* To, read the last two inputB samples using SIMD:
   * y[srcBLen] and y[srcBLen-1] coefficients, py is decremented by 1 */
  py = py - 1;
 80014a2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80014a6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	1e9a      	subs	r2, r3, #2
 80014ae:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80014b2:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80014b6:	601a      	str	r2, [r3, #0]

  while (blockSize1 > 0U)
 80014b8:	e137      	b.n	800172a <arm_conv_q15+0x4ec>
  {
    /* Accumulator is made zero for every iteration */
    sum = 0;
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80014c6:	e9c1 2300 	strd	r2, r3, [r1]

    /* Apply loop unrolling and compute 4 MACs simultaneously. */
    k = count >> 2U;
 80014ca:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

    /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
     ** a second loop below computes MACs for the remaining 1 to 3 samples. */
    while (k > 0U)
 80014d4:	e07c      	b.n	80015d0 <arm_conv_q15+0x392>
    {
      /* Perform the multiply-accumulates */
      /* x[0], x[1] are multiplied with y[srcBLen - 1], y[srcBLen - 2] respectively */
      sum = __SMLALDX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 80014d6:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80014da:	680a      	ldr	r2, [r1, #0]
 80014dc:	1d13      	adds	r3, r2, #4
 80014de:	600b      	str	r3, [r1, #0]
 80014e0:	6813      	ldr	r3, [r2, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 80014e8:	680a      	ldr	r2, [r1, #0]
 80014ea:	1f13      	subs	r3, r2, #4
 80014ec:	600b      	str	r3, [r1, #0]
 80014ee:	6813      	ldr	r3, [r2, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f8c7 0344 	str.w	r0, [r7, #836]	; 0x344
 80014fe:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 8001502:	e9c7 23ce 	strd	r2, r3, [r7, #824]	; 0x338
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;
 8001506:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 800150a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

#ifndef __ARMEB__   /* Little endian */
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800150e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001512:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8001516:	6819      	ldr	r1, [r3, #0]
 8001518:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800151c:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	f8d7 0344 	ldr.w	r0, [r7, #836]	; 0x344
 8001526:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800152a:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 800152e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001532:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8001536:	6019      	str	r1, [r3, #0]
 8001538:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800153c:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8001540:	605a      	str	r2, [r3, #4]
#else               /* Big endian */
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[1]), "=r" (llr.w32[0]): "r" (op1), "r" (op2) , "0" (llr.w32[1]), "1" (llr.w32[0]) );
#endif

  return(llr.w64);
 8001542:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001546:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800154a:	e9c1 2300 	strd	r2, r3, [r1]
      /* x[2], x[3] are multiplied with y[srcBLen - 3], y[srcBLen - 4] respectively */
      sum = __SMLALDX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 800154e:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8001552:	680a      	ldr	r2, [r1, #0]
 8001554:	1d13      	adds	r3, r2, #4
 8001556:	600b      	str	r3, [r1, #0]
 8001558:	6813      	ldr	r3, [r2, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8001560:	680a      	ldr	r2, [r1, #0]
 8001562:	1f13      	subs	r3, r2, #4
 8001564:	600b      	str	r3, [r1, #0]
 8001566:	6813      	ldr	r3, [r2, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f8c7 0354 	str.w	r0, [r7, #852]	; 0x354
 8001576:	f8c7 1350 	str.w	r1, [r7, #848]	; 0x350
 800157a:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
  llr.w64 = acc;
 800157e:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8001582:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001586:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800158a:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800158e:	6819      	ldr	r1, [r3, #0]
 8001590:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001594:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	f8d7 0354 	ldr.w	r0, [r7, #852]	; 0x354
 800159e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80015a2:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 80015a6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80015aa:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80015ae:	6019      	str	r1, [r3, #0]
 80015b0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80015b4:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 80015b8:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 80015ba:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80015be:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80015c2:	e9c1 2300 	strd	r2, r3, [r1]

      /* Decrement the loop counter */
      k--;
 80015c6:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    while (k > 0U)
 80015d0:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f47f af7e 	bne.w	80014d6 <arm_conv_q15+0x298>
    }

    /* For the next MAC operations, the pointer py is used without SIMD
     * So, py is incremented by 1 */
    py = py + 1U;
 80015da:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80015de:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	1c9a      	adds	r2, r3, #2
 80015e6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80015ea:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80015ee:	601a      	str	r2, [r3, #0]

    /* If the count is not a multiple of 4, compute any remaining MACs here.
     ** No loop unrolling is used. */
    k = count % 0x4U;
 80015f0:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

    while (k > 0U)
 80015fc:	e04e      	b.n	800169c <arm_conv_q15+0x45e>
    {
      /* Perform the multiply-accumulates */
      sum = __SMLALD(*px++, *py--, sum);
 80015fe:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001602:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001606:	6819      	ldr	r1, [r3, #0]
 8001608:	1c8a      	adds	r2, r1, #2
 800160a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800160e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	f9b1 3000 	ldrsh.w	r3, [r1]
 8001618:	4618      	mov	r0, r3
 800161a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800161e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001622:	6819      	ldr	r1, [r3, #0]
 8001624:	1e8a      	subs	r2, r1, #2
 8001626:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800162a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	f9b1 3000 	ldrsh.w	r3, [r1]
 8001634:	4619      	mov	r1, r3
 8001636:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
 8001642:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 8001646:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
  llr.w64 = acc;
 800164a:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 800164e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001652:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001656:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001660:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	f8d7 0334 	ldr.w	r0, [r7, #820]	; 0x334
 800166a:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800166e:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8001672:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001676:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800167a:	6019      	str	r1, [r3, #0]
 800167c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001680:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8001684:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001686:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800168a:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800168e:	e9c1 2300 	strd	r2, r3, [r1]

      /* Decrement the loop counter */
      k--;
 8001692:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8001696:	3b01      	subs	r3, #1
 8001698:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    while (k > 0U)
 800169c:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1ac      	bne.n	80015fe <arm_conv_q15+0x3c0>
    }

    /* Store the result in the accumulator in the destination buffer. */
    *pOut++ = (q15_t) (__SSAT((sum >> 15), 16));
 80016a4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	0bd0      	lsrs	r0, r2, #15
 80016b6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80016ba:	13d9      	asrs	r1, r3, #15
 80016bc:	4603      	mov	r3, r0
 80016be:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80016c2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80016c6:	f303 030f 	ssat	r3, #16, r3
 80016ca:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80016ce:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 80016d2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80016d6:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	1c8a      	adds	r2, r1, #2
 80016de:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80016e2:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	b203      	sxth	r3, r0
 80016ea:	800b      	strh	r3, [r1, #0]

    /* Update the inputA and inputB pointers for next MAC calculation */
    py = pIn2 + (count - 1U);
 80016ec:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 80016f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80016f4:	4413      	add	r3, r2
 80016f6:	005a      	lsls	r2, r3, #1
 80016f8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80016fc:	441a      	add	r2, r3
 80016fe:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001702:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001706:	601a      	str	r2, [r3, #0]
    px = pIn1;
 8001708:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800170c:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 8001710:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001714:	6013      	str	r3, [r2, #0]

    /* Increment the MAC count */
    count++;
 8001716:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800171a:	3301      	adds	r3, #1
 800171c:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0

    /* Decrement the loop counter */
    blockSize1--;
 8001720:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8001724:	3b01      	subs	r3, #1
 8001726:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  while (blockSize1 > 0U)
 800172a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 800172e:	2b00      	cmp	r3, #0
 8001730:	f47f aec3 	bne.w	80014ba <arm_conv_q15+0x27c>
   * ....
   * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y[0]
   */

  /* Working pointer of inputA */
  px = pIn1;
 8001734:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001738:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 800173c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001740:	6013      	str	r3, [r2, #0]

  /* Working pointer of inputB */
  pSrc2 = pIn2 + (srcBLen - 1U);
 8001742:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001746:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001750:	4413      	add	r3, r2
 8001752:	005a      	lsls	r2, r3, #1
 8001754:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001758:	4413      	add	r3, r2
 800175a:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
  py = pSrc2;
 800175e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001762:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8001766:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 800176a:	6013      	str	r3, [r2, #0]

  /* count is the index by which the pointer pIn1 to be incremented */
  count = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
   * -------------------*/

  /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
   * So, to loop unroll over blockSize2,
   * srcBLen should be greater than or equal to 4 */
  if (srcBLen >= 4U)
 8001772:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001776:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b03      	cmp	r3, #3
 800177e:	f241 80c3 	bls.w	8002908 <arm_conv_q15+0x16ca>
  {
    /* Loop unroll over blockSize2, by 4 */
    blkCnt = blockSize2 >> 2U;
 8001782:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

    while (blkCnt > 0U)
 800178c:	f000 bf46 	b.w	800261c <arm_conv_q15+0x13de>
    {
      py = py - 1U;
 8001790:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001794:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	1e9a      	subs	r2, r3, #2
 800179c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80017a0:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80017a4:	601a      	str	r2, [r3, #0]

      /* Set all accumulators to zero */
      acc0 = 0;
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80017b2:	e9c1 2300 	strd	r2, r3, [r1]
      acc1 = 0;
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80017c2:	e9c1 2300 	strd	r2, r3, [r1]
      acc2 = 0;
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
      acc3 = 0;
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0


      /* read x[0], x[1] samples */
      x0 = *__SIMD32(px);
 80017de:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
      /* read x[1], x[2] samples */
      x1 = _SIMD32_OFFSET(px+1);
 80017ea:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80017ee:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80017f8:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
      px+= 2U;
 80017fc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001800:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	1d1a      	adds	r2, r3, #4
 8001808:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800180c:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001810:	601a      	str	r2, [r3, #0]


      /* Apply loop unrolling and compute 4 MACs simultaneously. */
      k = srcBLen >> 2U;
 8001812:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001816:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
       ** a second loop below computes MACs for the remaining 1 to 3 samples. */
      do
      {
        /* Read the last two inputB samples using SIMD:
         * y[srcBLen - 1] and y[srcBLen - 2] */
        c0 = *__SIMD32(py)--;
 8001822:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8001826:	680a      	ldr	r2, [r1, #0]
 8001828:	1f13      	subs	r3, r2, #4
 800182a:	600b      	str	r3, [r1, #0]
 800182c:	6813      	ldr	r3, [r2, #0]
 800182e:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8

        /* acc0 +=  x[0] * y[srcBLen - 1] + x[1] * y[srcBLen - 2] */
        acc0 = __SMLALDX(x0, c0, acc0);
 8001832:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8001836:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 800183a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800183e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001842:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001846:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001850:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001854:	601c      	str	r4, [r3, #0]
 8001856:	e9c7 01aa 	strd	r0, r1, [r7, #680]	; 0x2a8
  llr.w64 = acc;
 800185a:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800185e:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001862:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001866:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 800186a:	6819      	ldr	r1, [r3, #0]
 800186c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001870:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800187a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001884:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 800188e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001892:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8001896:	6019      	str	r1, [r3, #0]
 8001898:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800189c:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 80018a0:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 80018a2:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80018a6:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80018aa:	e9c1 2300 	strd	r2, r3, [r1]

        /* acc1 +=  x[1] * y[srcBLen - 1] + x[2] * y[srcBLen - 2] */
        acc1 = __SMLALDX(x1, c0, acc1);
 80018ae:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 80018b2:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 80018b6:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80018ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018be:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018c2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018cc:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80018d0:	601c      	str	r4, [r3, #0]
 80018d2:	e9c7 01ae 	strd	r0, r1, [r7, #696]	; 0x2b8
  llr.w64 = acc;
 80018d6:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80018da:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80018de:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018e2:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80018e6:	6819      	ldr	r1, [r3, #0]
 80018e8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018ec:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018f6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001900:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 800190a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800190e:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8001912:	6019      	str	r1, [r3, #0]
 8001914:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001918:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 800191c:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 800191e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001922:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8001926:	e9c1 2300 	strd	r2, r3, [r1]

        /* Read x[2], x[3] */
        x2 = *__SIMD32(px);
 800192a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4

        /* Read x[3], x[4] */
        x3 = _SIMD32_OFFSET(px+1);
 8001936:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800193a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001944:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

        /* acc2 +=  x[2] * y[srcBLen - 1] + x[3] * y[srcBLen - 2] */
        acc2 = __SMLALDX(x2, c0, acc2);
 8001948:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 800194c:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001950:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8001954:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001958:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001962:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001966:	601c      	str	r4, [r3, #0]
 8001968:	e9c7 01b2 	strd	r0, r1, [r7, #712]	; 0x2c8
  llr.w64 = acc;
 800196c:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8001970:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001974:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001978:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001982:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800198c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001996:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 80019a0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80019a4:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80019a8:	6019      	str	r1, [r3, #0]
 80019aa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80019ae:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80019b2:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 80019b4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80019b8:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8

        /* acc3 +=  x[3] * y[srcBLen - 1] + x[4] * y[srcBLen - 2] */
        acc3 = __SMLALDX(x3, c0, acc3);
 80019bc:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 80019c0:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 80019c4:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 80019c8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80019cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80019d6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80019da:	601c      	str	r4, [r3, #0]
 80019dc:	e9c7 01b6 	strd	r0, r1, [r7, #728]	; 0x2d8
  llr.w64 = acc;
 80019e0:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 80019e4:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80019e8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80019ec:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80019f0:	6819      	ldr	r1, [r3, #0]
 80019f2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80019f6:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a00:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a0a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001a14:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a18:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8001a1c:	6019      	str	r1, [r3, #0]
 8001a1e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a22:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8001a26:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001a28:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001a2c:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0

        /* Read y[srcBLen - 3] and y[srcBLen - 4] */
        c0 = *__SIMD32(py)--;
 8001a30:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8001a34:	680a      	ldr	r2, [r1, #0]
 8001a36:	1f13      	subs	r3, r2, #4
 8001a38:	600b      	str	r3, [r1, #0]
 8001a3a:	6813      	ldr	r3, [r2, #0]
 8001a3c:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8

        /* acc0 +=  x[2] * y[srcBLen - 3] + x[3] * y[srcBLen - 4] */
        acc0 = __SMLALDX(x2, c0, acc0);
 8001a40:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8001a44:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001a48:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001a4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a50:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a62:	601c      	str	r4, [r3, #0]
 8001a64:	e9c7 01ba 	strd	r0, r1, [r7, #744]	; 0x2e8
  llr.w64 = acc;
 8001a68:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8001a6c:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001a70:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a74:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001a78:	6819      	ldr	r1, [r3, #0]
 8001a7a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a7e:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001a9c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001aa0:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001aa4:	6019      	str	r1, [r3, #0]
 8001aa6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001aaa:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001aae:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001ab0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001ab4:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8001ab8:	e9c1 2300 	strd	r2, r3, [r1]

        /* acc1 +=  x[3] * y[srcBLen - 3] + x[4] * y[srcBLen - 4] */
        acc1 = __SMLALDX(x3, c0, acc1);
 8001abc:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001ac0:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001ac4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001ac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001acc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ad0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ada:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ade:	601c      	str	r4, [r3, #0]
 8001ae0:	e9c7 01be 	strd	r0, r1, [r7, #760]	; 0x2f8
  llr.w64 = acc;
 8001ae4:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8001ae8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001aec:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001af0:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001afa:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b04:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001b18:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b1c:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8001b20:	6019      	str	r1, [r3, #0]
 8001b22:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b26:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8001b2a:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001b2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001b30:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8001b34:	e9c1 2300 	strd	r2, r3, [r1]

        /* Read x[4], x[5] */
        x0 = _SIMD32_OFFSET(px+2);
 8001b38:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b3c:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

        /* Read x[5], x[6] */
        x1 = _SIMD32_OFFSET(px+3);
 8001b48:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b4c:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8001b56:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
        px += 4U;
 8001b5a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b5e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f103 0208 	add.w	r2, r3, #8
 8001b68:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b6c:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001b70:	601a      	str	r2, [r3, #0]

        /* acc2 +=  x[4] * y[srcBLen - 3] + x[5] * y[srcBLen - 4] */
        acc2 = __SMLALDX(x0, c0, acc2);
 8001b72:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8001b76:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001b7a:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8001b7e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b90:	601c      	str	r4, [r3, #0]
 8001b92:	e9c7 01c2 	strd	r0, r1, [r7, #776]	; 0x308
  llr.w64 = acc;
 8001b96:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8001b9a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001b9e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ba2:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001bac:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001bb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001bc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001bca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001bce:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001bd2:	6019      	str	r1, [r3, #0]
 8001bd4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001bd8:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001bdc:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001bde:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001be2:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8

        /* acc3 +=  x[5] * y[srcBLen - 3] + x[6] * y[srcBLen - 4] */
        acc3 = __SMLALDX(x1, c0, acc3);
 8001be6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001bea:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 8001bee:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 8001bf2:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8001bf6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001bfa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e9c7 01c6 	strd	r0, r1, [r7, #792]	; 0x318
  llr.w64 = acc;
 8001c04:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8001c08:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001c0c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c10:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c1a:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	f8d7 0324 	ldr.w	r0, [r7, #804]	; 0x324
 8001c24:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001c32:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c36:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001c3a:	6019      	str	r1, [r3, #0]
 8001c3c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c40:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001c44:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001c46:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001c4a:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0

      } while (--k);
 8001c4e:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8001c58:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f47f ade0 	bne.w	8001822 <arm_conv_q15+0x5e4>
      /* For the next MAC operations, SIMD is not used
       * So, the 16 bit pointer if inputB, py is updated */

      /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
       ** No loop unrolling is used. */
      k = srcBLen % 0x4U;
 8001c62:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c66:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

      if (k == 1U)
 8001c74:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	f040 8110 	bne.w	8001e9e <arm_conv_q15+0xc60>
      {
        /* Read y[srcBLen - 5] */
        c0 = *(py+1);
 8001c7e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c82:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3302      	adds	r3, #2
 8001c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8e:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8

        c0 = c0 << 16U;

#else

        c0 = c0 & 0x0000FFFF;
 8001c92:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8

#endif /*      #ifdef  ARM_MATH_BIG_ENDIAN     */
        /* Read x[7] */
        x3 = *__SIMD32(px);
 8001c9c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
        px++;
 8001ca8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001cac:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	1c9a      	adds	r2, r3, #2
 8001cb4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001cb8:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Perform the multiply-accumulates */
        acc0 = __SMLALD(x0, c0, acc0);
 8001cbe:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8001cc2:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001cc6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cce:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001cd2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001cdc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ce0:	601c      	str	r4, [r3, #0]
 8001ce2:	e9c7 019a 	strd	r0, r1, [r7, #616]	; 0x268
  llr.w64 = acc;
 8001ce6:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8001cea:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001cee:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001cf2:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001cf6:	6819      	ldr	r1, [r3, #0]
 8001cf8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001cfc:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d06:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001d0a:	6818      	ldr	r0, [r3, #0]
 8001d0c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d10:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8001d1a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d1e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001d22:	6019      	str	r1, [r3, #0]
 8001d24:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d28:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001d2c:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001d2e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001d32:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8001d36:	e9c1 2300 	strd	r2, r3, [r1]
        acc1 = __SMLALD(x1, c0, acc1);
 8001d3a:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8001d3e:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001d42:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001d46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d4a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d4e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d58:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001d5c:	601c      	str	r4, [r3, #0]
 8001d5e:	e9c7 019e 	strd	r0, r1, [r7, #632]	; 0x278
  llr.w64 = acc;
 8001d62:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8001d66:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001d6a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d6e:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8001d72:	6819      	ldr	r1, [r3, #0]
 8001d74:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d78:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d82:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d8c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8001d96:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d9a:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8001d9e:	6019      	str	r1, [r3, #0]
 8001da0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001da4:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8001da8:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001daa:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001dae:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8001db2:	e9c1 2300 	strd	r2, r3, [r1]
        acc2 = __SMLALDX(x1, c0, acc2);
 8001db6:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8001dba:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001dbe:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8001dc2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001dc6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001dd0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001dd4:	601c      	str	r4, [r3, #0]
 8001dd6:	e9c7 01a2 	strd	r0, r1, [r7, #648]	; 0x288
  llr.w64 = acc;
 8001dda:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8001dde:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001de2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001de6:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001df0:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001dfa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e04:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001e0e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e12:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001e16:	6019      	str	r1, [r3, #0]
 8001e18:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e1c:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001e20:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001e22:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001e26:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
        acc3 = __SMLALDX(x3, c0, acc3);
 8001e2a:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001e2e:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001e32:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 8001e36:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e3a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e44:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001e48:	601c      	str	r4, [r3, #0]
 8001e4a:	e9c7 01a6 	strd	r0, r1, [r7, #664]	; 0x298
  llr.w64 = acc;
 8001e4e:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8001e52:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001e56:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e5a:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8001e5e:	6819      	ldr	r1, [r3, #0]
 8001e60:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e64:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e6e:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e78:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001e82:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e86:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8001e8a:	6019      	str	r1, [r3, #0]
 8001e8c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e90:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8001e94:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001e96:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001e9a:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
      }

      if (k == 2U)
 8001e9e:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	f040 8112 	bne.w	80020cc <arm_conv_q15+0xe8e>
      {
        /* Read y[srcBLen - 5], y[srcBLen - 6] */
        c0 = _SIMD32_OFFSET(py);
 8001ea8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001eac:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8

        /* Read x[7], x[8] */
        x3 = *__SIMD32(px);
 8001eb8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

        /* Read x[9] */
        x2 = _SIMD32_OFFSET(px+1);
 8001ec4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ec8:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001ed2:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
        px += 2U;
 8001ed6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001eda:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	1d1a      	adds	r2, r3, #4
 8001ee2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ee6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001eea:	601a      	str	r2, [r3, #0]

        /* Perform the multiply-accumulates */
        acc0 = __SMLALDX(x0, c0, acc0);
 8001eec:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8001ef0:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001ef4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001efc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f00:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f0a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001f0e:	601c      	str	r4, [r3, #0]
 8001f10:	e9c7 018a 	strd	r0, r1, [r7, #552]	; 0x228
  llr.w64 = acc;
 8001f14:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8001f18:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001f1c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f20:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001f24:	6819      	ldr	r1, [r3, #0]
 8001f26:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f2a:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f34:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f3e:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001f48:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f4c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001f50:	6019      	str	r1, [r3, #0]
 8001f52:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f56:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001f5a:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001f5c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8001f60:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8001f64:	e9c1 2300 	strd	r2, r3, [r1]
        acc1 = __SMLALDX(x1, c0, acc1);
 8001f68:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8001f6c:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001f70:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f78:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f7c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f86:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001f8a:	601c      	str	r4, [r3, #0]
 8001f8c:	e9c7 018e 	strd	r0, r1, [r7, #568]	; 0x238
  llr.w64 = acc;
 8001f90:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8001f94:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001f98:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f9c:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8001fa0:	6819      	ldr	r1, [r3, #0]
 8001fa2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001fa6:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001fb0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001fba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001fc4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001fc8:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8001fcc:	6019      	str	r1, [r3, #0]
 8001fce:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001fd2:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8001fd6:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001fd8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001fdc:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8001fe0:	e9c1 2300 	strd	r2, r3, [r1]
        acc2 = __SMLALDX(x3, c0, acc2);
 8001fe4:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001fe8:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001fec:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8001ff0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ff4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ffe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002002:	601c      	str	r4, [r3, #0]
 8002004:	e9c7 0192 	strd	r0, r1, [r7, #584]	; 0x248
  llr.w64 = acc;
 8002008:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 800200c:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002010:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002014:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8002018:	6819      	ldr	r1, [r3, #0]
 800201a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800201e:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002028:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002032:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 800203c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002040:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 8002044:	6019      	str	r1, [r3, #0]
 8002046:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800204a:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 800204e:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8002050:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8002054:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
        acc3 = __SMLALDX(x2, c0, acc3);
 8002058:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 800205c:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8002060:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 8002064:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002068:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002072:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002076:	601c      	str	r4, [r3, #0]
 8002078:	e9c7 0196 	strd	r0, r1, [r7, #600]	; 0x258
  llr.w64 = acc;
 800207c:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8002080:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002084:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002088:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002092:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800209c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80020a6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 80020b0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80020b4:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80020b8:	6019      	str	r1, [r3, #0]
 80020ba:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80020be:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80020c2:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 80020c4:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80020c8:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
      }

      if (k == 3U)
 80020cc:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	f040 8219 	bne.w	8002508 <arm_conv_q15+0x12ca>
      {
        /* Read y[srcBLen - 5], y[srcBLen - 6] */
        c0 = _SIMD32_OFFSET(py);
 80020d6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80020da:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8

        /* Read x[7], x[8] */
        x3 = *__SIMD32(px);
 80020e6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

        /* Read x[9] */
        x2 = _SIMD32_OFFSET(px+1);
 80020f2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80020f6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002100:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4

        /* Perform the multiply-accumulates */
        acc0 = __SMLALDX(x0, c0, acc0);
 8002104:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8002108:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 800210c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002114:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002118:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002122:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8002126:	601c      	str	r4, [r3, #0]
 8002128:	e9c7 016a 	strd	r0, r1, [r7, #424]	; 0x1a8
  llr.w64 = acc;
 800212c:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8002130:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002134:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002138:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800213c:	6819      	ldr	r1, [r3, #0]
 800213e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002142:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800214c:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002156:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8002160:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002164:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8002168:	6019      	str	r1, [r3, #0]
 800216a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800216e:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8002172:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8002174:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002178:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800217c:	e9c1 2300 	strd	r2, r3, [r1]
        acc1 = __SMLALDX(x1, c0, acc1);
 8002180:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8002184:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8002188:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800218c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002190:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002194:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800219e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80021a2:	601c      	str	r4, [r3, #0]
 80021a4:	e9c7 016e 	strd	r0, r1, [r7, #440]	; 0x1b8
  llr.w64 = acc;
 80021a8:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 80021ac:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80021b0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021b4:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80021b8:	6819      	ldr	r1, [r3, #0]
 80021ba:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021be:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021c8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021d2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 80021dc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021e0:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80021e4:	6019      	str	r1, [r3, #0]
 80021e6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021ea:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 80021ee:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 80021f0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80021f4:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80021f8:	e9c1 2300 	strd	r2, r3, [r1]
        acc2 = __SMLALDX(x3, c0, acc2);
 80021fc:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8002200:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8002204:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8002208:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800220c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002216:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800221a:	601c      	str	r4, [r3, #0]
 800221c:	e9c7 0172 	strd	r0, r1, [r7, #456]	; 0x1c8
  llr.w64 = acc;
 8002220:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8002224:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002228:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800222c:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8002230:	6819      	ldr	r1, [r3, #0]
 8002232:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002236:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002240:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800224a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8002254:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002258:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800225c:	6019      	str	r1, [r3, #0]
 800225e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002262:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8002266:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8002268:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800226c:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
        acc3 = __SMLALDX(x2, c0, acc3);
 8002270:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8002274:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8002278:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 800227c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002280:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800228a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800228e:	601c      	str	r4, [r3, #0]
 8002290:	e9c7 0176 	strd	r0, r1, [r7, #472]	; 0x1d8
  llr.w64 = acc;
 8002294:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8002298:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800229c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022a0:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80022a4:	6819      	ldr	r1, [r3, #0]
 80022a6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022aa:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022b4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022be:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 80022c8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022cc:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80022d0:	6019      	str	r1, [r3, #0]
 80022d2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022d6:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 80022da:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 80022dc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80022e0:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0

        c0 = *(py-1);
 80022e4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022e8:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3b02      	subs	r3, #2
 80022f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f4:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
#ifdef  ARM_MATH_BIG_ENDIAN

        c0 = c0 << 16U;
#else

        c0 = c0 & 0x0000FFFF;
 80022f8:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
#endif /*      #ifdef  ARM_MATH_BIG_ENDIAN     */
        /* Read x[10] */
        x3 =  _SIMD32_OFFSET(px+2);
 8002302:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002306:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
        px += 3U;
 8002312:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002316:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	1d9a      	adds	r2, r3, #6
 800231e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002322:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002326:	601a      	str	r2, [r3, #0]

        /* Perform the multiply-accumulates */
        acc0 = __SMLALDX(x1, c0, acc0);
 8002328:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 800232c:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8002330:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002338:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800233c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002346:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800234a:	601c      	str	r4, [r3, #0]
 800234c:	e9c7 017a 	strd	r0, r1, [r7, #488]	; 0x1e8
  llr.w64 = acc;
 8002350:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8002354:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002358:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800235c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002360:	6819      	ldr	r1, [r3, #0]
 8002362:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002366:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002370:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800237a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8002384:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002388:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800238c:	6019      	str	r1, [r3, #0]
 800238e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002392:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002396:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8002398:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800239c:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80023a0:	e9c1 2300 	strd	r2, r3, [r1]
        acc1 = __SMLALD(x2, c0, acc1);
 80023a4:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 80023a8:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 80023ac:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80023b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80023b8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80023c2:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80023c6:	601c      	str	r4, [r3, #0]
 80023c8:	e9c7 017e 	strd	r0, r1, [r7, #504]	; 0x1f8
  llr.w64 = acc;
 80023cc:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 80023d0:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80023d4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80023d8:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80023dc:	6819      	ldr	r1, [r3, #0]
 80023de:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80023e2:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80023ec:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80023f6:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8002400:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002404:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8002408:	6019      	str	r1, [r3, #0]
 800240a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800240e:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8002412:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8002414:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8002418:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800241c:	e9c1 2300 	strd	r2, r3, [r1]
        acc2 = __SMLALDX(x2, c0, acc2);
 8002420:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8002424:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8002428:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 800242c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002430:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800243a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800243e:	601c      	str	r4, [r3, #0]
 8002440:	e9c7 0182 	strd	r0, r1, [r7, #520]	; 0x208
  llr.w64 = acc;
 8002444:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 8002448:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800244c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002450:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8002454:	6819      	ldr	r1, [r3, #0]
 8002456:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800245a:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002464:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800246e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8002478:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800247c:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8002480:	6019      	str	r1, [r3, #0]
 8002482:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002486:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800248a:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 800248c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8002490:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
        acc3 = __SMLALDX(x3, c0, acc3);
 8002494:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8002498:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 800249c:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 80024a0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024ae:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80024b2:	601c      	str	r4, [r3, #0]
 80024b4:	e9c7 0186 	strd	r0, r1, [r7, #536]	; 0x218
  llr.w64 = acc;
 80024b8:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 80024bc:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80024c0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024c4:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024ce:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024e2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 80024ec:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024f0:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80024f4:	6019      	str	r1, [r3, #0]
 80024f6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024fa:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80024fe:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8002500:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8002504:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
      /* Store the results in the accumulators in the destination buffer. */

#ifndef  ARM_MATH_BIG_ENDIAN

      *__SIMD32(pOut)++ =
        __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 8002508:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f04f 0000 	mov.w	r0, #0
 8002514:	f04f 0100 	mov.w	r1, #0
 8002518:	0bd0      	lsrs	r0, r2, #15
 800251a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 800251e:	13d9      	asrs	r1, r3, #15
 8002520:	4603      	mov	r3, r0
 8002522:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8002526:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 800252a:	f303 030f 	ssat	r3, #16, r3
 800252e:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 8002532:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 8002536:	b29c      	uxth	r4, r3
 8002538:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f04f 0000 	mov.w	r0, #0
 8002544:	f04f 0100 	mov.w	r1, #0
 8002548:	0bd0      	lsrs	r0, r2, #15
 800254a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 800254e:	13d9      	asrs	r1, r3, #15
 8002550:	4603      	mov	r3, r0
 8002552:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8002556:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 800255a:	f303 030f 	ssat	r3, #16, r3
 800255e:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8002562:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	ea44 0003 	orr.w	r0, r4, r3
      *__SIMD32(pOut)++ =
 800256c:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002570:	6811      	ldr	r1, [r2, #0]
 8002572:	1d0b      	adds	r3, r1, #4
 8002574:	6013      	str	r3, [r2, #0]
        __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 8002576:	4603      	mov	r3, r0
      *__SIMD32(pOut)++ =
 8002578:	600b      	str	r3, [r1, #0]
      *__SIMD32(pOut)++ =
        __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 800257a:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800257e:	f04f 0000 	mov.w	r0, #0
 8002582:	f04f 0100 	mov.w	r1, #0
 8002586:	0bd0      	lsrs	r0, r2, #15
 8002588:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 800258c:	13d9      	asrs	r1, r3, #15
 800258e:	4603      	mov	r3, r0
 8002590:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8002594:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8002598:	f303 030f 	ssat	r3, #16, r3
 800259c:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 80025a0:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 80025a4:	b29c      	uxth	r4, r3
 80025a6:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 80025aa:	f04f 0000 	mov.w	r0, #0
 80025ae:	f04f 0100 	mov.w	r1, #0
 80025b2:	0bd0      	lsrs	r0, r2, #15
 80025b4:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80025b8:	13d9      	asrs	r1, r3, #15
 80025ba:	4603      	mov	r3, r0
 80025bc:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 80025c0:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 80025c4:	f303 030f 	ssat	r3, #16, r3
 80025c8:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 80025cc:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	ea44 0003 	orr.w	r0, r4, r3
      *__SIMD32(pOut)++ =
 80025d6:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80025da:	6811      	ldr	r1, [r2, #0]
 80025dc:	1d0b      	adds	r3, r1, #4
 80025de:	6013      	str	r3, [r2, #0]
        __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 80025e0:	4603      	mov	r3, r0
      *__SIMD32(pOut)++ =
 80025e2:	600b      	str	r3, [r1, #0]
        __PKHBT(__SSAT((acc3 >> 15), 16), __SSAT((acc2 >> 15), 16), 16);

#endif /*      #ifndef  ARM_MATH_BIG_ENDIAN    */

      /* Increment the pointer pIn1 index, count by 4 */
      count += 4U;
 80025e4:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80025e8:	3304      	adds	r3, #4
 80025ea:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0

      /* Update the inputA and inputB pointers for next MAC calculation */
      px = pIn1 + count;
 80025ee:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80025f2:	005a      	lsls	r2, r3, #1
 80025f4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80025f8:	441a      	add	r2, r3
 80025fa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80025fe:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002602:	601a      	str	r2, [r3, #0]
      py = pSrc2;
 8002604:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002608:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 800260c:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8002610:	6013      	str	r3, [r2, #0]

       /* Decrement the loop counter */
      blkCnt--;
 8002612:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002616:	3b01      	subs	r3, #1
 8002618:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
    while (blkCnt > 0U)
 800261c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002620:	2b00      	cmp	r3, #0
 8002622:	f47f a8b5 	bne.w	8001790 <arm_conv_q15+0x552>
    }

    /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = blockSize2 % 0x4U;
 8002626:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

    while (blkCnt > 0U)
 8002632:	e163      	b.n	80028fc <arm_conv_q15+0x16be>
    {
      /* Accumulator is made zero for every iteration */
      sum = 0;
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002640:	e9c1 2300 	strd	r2, r3, [r1]

      /* Apply loop unrolling and compute 4 MACs simultaneously. */
      k = srcBLen >> 2U;
 8002644:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002648:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

      /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
       ** a second loop below computes MACs for the remaining 1 to 3 samples. */
      while (k > 0U)
 8002654:	e0cc      	b.n	80027f0 <arm_conv_q15+0x15b2>
      {
        /* Perform the multiply-accumulates */
        sum += (q63_t) ((q31_t) * px++ * *py--);
 8002656:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800265a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800265e:	6819      	ldr	r1, [r3, #0]
 8002660:	1c8a      	adds	r2, r1, #2
 8002662:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002666:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002670:	4618      	mov	r0, r3
 8002672:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002676:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800267a:	6819      	ldr	r1, [r3, #0]
 800267c:	1e8a      	subs	r2, r1, #2
 800267e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002682:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f9b1 3000 	ldrsh.w	r3, [r1]
 800268c:	fb00 f303 	mul.w	r3, r0, r3
 8002690:	17da      	asrs	r2, r3, #31
 8002692:	643b      	str	r3, [r7, #64]	; 0x40
 8002694:	647a      	str	r2, [r7, #68]	; 0x44
 8002696:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80026a2:	4641      	mov	r1, r8
 80026a4:	1851      	adds	r1, r2, r1
 80026a6:	6239      	str	r1, [r7, #32]
 80026a8:	4649      	mov	r1, r9
 80026aa:	414b      	adcs	r3, r1
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
 80026ae:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80026b2:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80026b6:	e9c2 3400 	strd	r3, r4, [r2]
        sum += (q63_t) ((q31_t) * px++ * *py--);
 80026ba:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80026be:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	1c8a      	adds	r2, r1, #2
 80026c6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80026ca:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80026da:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80026de:	6819      	ldr	r1, [r3, #0]
 80026e0:	1e8a      	subs	r2, r1, #2
 80026e2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80026e6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	f9b1 3000 	ldrsh.w	r3, [r1]
 80026f0:	fb00 f303 	mul.w	r3, r0, r3
 80026f4:	17da      	asrs	r2, r3, #31
 80026f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026fa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002706:	4641      	mov	r1, r8
 8002708:	1851      	adds	r1, r2, r1
 800270a:	61b9      	str	r1, [r7, #24]
 800270c:	4649      	mov	r1, r9
 800270e:	414b      	adcs	r3, r1
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002716:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800271a:	e9c2 3400 	strd	r3, r4, [r2]
        sum += (q63_t) ((q31_t) * px++ * *py--);
 800271e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002722:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	1c8a      	adds	r2, r1, #2
 800272a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800272e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002738:	4618      	mov	r0, r3
 800273a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800273e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002742:	6819      	ldr	r1, [r3, #0]
 8002744:	1e8a      	subs	r2, r1, #2
 8002746:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800274a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002754:	fb00 f303 	mul.w	r3, r0, r3
 8002758:	17da      	asrs	r2, r3, #31
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
 800275c:	637a      	str	r2, [r7, #52]	; 0x34
 800275e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002766:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800276a:	4641      	mov	r1, r8
 800276c:	1851      	adds	r1, r2, r1
 800276e:	6139      	str	r1, [r7, #16]
 8002770:	4649      	mov	r1, r9
 8002772:	414b      	adcs	r3, r1
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800277a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800277e:	e9c2 3400 	strd	r3, r4, [r2]
        sum += (q63_t) ((q31_t) * px++ * *py--);
 8002782:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002786:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800278a:	6819      	ldr	r1, [r3, #0]
 800278c:	1c8a      	adds	r2, r1, #2
 800278e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002792:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f9b1 3000 	ldrsh.w	r3, [r1]
 800279c:	4618      	mov	r0, r3
 800279e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80027a2:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	1e8a      	subs	r2, r1, #2
 80027aa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80027ae:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80027b8:	fb00 f303 	mul.w	r3, r0, r3
 80027bc:	17da      	asrs	r2, r3, #31
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027c2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80027ce:	4641      	mov	r1, r8
 80027d0:	1851      	adds	r1, r2, r1
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	4649      	mov	r1, r9
 80027d6:	414b      	adcs	r3, r1
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80027de:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80027e2:	e9c2 3400 	strd	r3, r4, [r2]

        /* Decrement the loop counter */
        k--;
 80027e6:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80027ea:	3b01      	subs	r3, #1
 80027ec:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
      while (k > 0U)
 80027f0:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f af2e 	bne.w	8002656 <arm_conv_q15+0x1418>
      }

      /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
       ** No loop unrolling is used. */
      k = srcBLen % 0x4U;
 80027fa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80027fe:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

      while (k > 0U)
 800280c:	e032      	b.n	8002874 <arm_conv_q15+0x1636>
      {
        /* Perform the multiply-accumulates */
        sum += (q63_t) ((q31_t) * px++ * *py--);
 800280e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002812:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002816:	6819      	ldr	r1, [r3, #0]
 8002818:	1c8a      	adds	r2, r1, #2
 800281a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800281e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002828:	4618      	mov	r0, r3
 800282a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800282e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002832:	6819      	ldr	r1, [r3, #0]
 8002834:	1e8a      	subs	r2, r1, #2
 8002836:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800283a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002844:	fb00 f303 	mul.w	r3, r0, r3
 8002848:	17da      	asrs	r2, r3, #31
 800284a:	461d      	mov	r5, r3
 800284c:	4616      	mov	r6, r2
 800284e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	1951      	adds	r1, r2, r5
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	4173      	adcs	r3, r6
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002862:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002866:	e9c2 3400 	strd	r3, r4, [r2]

        /* Decrement the loop counter */
        k--;
 800286a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800286e:	3b01      	subs	r3, #1
 8002870:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
      while (k > 0U)
 8002874:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1c8      	bne.n	800280e <arm_conv_q15+0x15d0>
      }

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = (q15_t) (__SSAT(sum >> 15, 16));
 800287c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002884:	f04f 0000 	mov.w	r0, #0
 8002888:	f04f 0100 	mov.w	r1, #0
 800288c:	0bd0      	lsrs	r0, r2, #15
 800288e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8002892:	13d9      	asrs	r1, r3, #15
 8002894:	4603      	mov	r3, r0
 8002896:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 800289a:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 800289e:	f303 030f 	ssat	r3, #16, r3
 80028a2:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 80028a6:	f8d7 03ac 	ldr.w	r0, [r7, #940]	; 0x3ac
 80028aa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80028ae:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80028b2:	6819      	ldr	r1, [r3, #0]
 80028b4:	1c8a      	adds	r2, r1, #2
 80028b6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80028ba:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	b203      	sxth	r3, r0
 80028c2:	800b      	strh	r3, [r1, #0]

      /* Increment the pointer pIn1 index, count by 1 */
      count++;
 80028c4:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80028c8:	3301      	adds	r3, #1
 80028ca:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0

      /* Update the inputA and inputB pointers for next MAC calculation */
      px = pIn1 + count;
 80028ce:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80028d2:	005a      	lsls	r2, r3, #1
 80028d4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80028d8:	441a      	add	r2, r3
 80028da:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80028de:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80028e2:	601a      	str	r2, [r3, #0]
      py = pSrc2;
 80028e4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80028e8:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 80028ec:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 80028f0:	6013      	str	r3, [r2, #0]

      /* Decrement the loop counter */
      blkCnt--;
 80028f2:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
    while (blkCnt > 0U)
 80028fc:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002900:	2b00      	cmp	r3, #0
 8002902:	f47f ae97 	bne.w	8002634 <arm_conv_q15+0x13f6>
 8002906:	e08e      	b.n	8002a26 <arm_conv_q15+0x17e8>
  }
  else
  {
    /* If the srcBLen is not a multiple of 4,
     * the blockSize2 loop cannot be unrolled by 4 */
    blkCnt = blockSize2;
 8002908:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800290c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

    while (blkCnt > 0U)
 8002910:	e084      	b.n	8002a1c <arm_conv_q15+0x17de>
    {
      /* Accumulator is made zero for every iteration */
      sum = 0;
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800291e:	e9c1 2300 	strd	r2, r3, [r1]

      /* srcBLen number of MACS should be performed */
      k = srcBLen;
 8002922:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002926:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

      while (k > 0U)
 8002930:	e030      	b.n	8002994 <arm_conv_q15+0x1756>
      {
        /* Perform the multiply-accumulate */
        sum += (q63_t) ((q31_t) * px++ * *py--);
 8002932:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002936:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	1c99      	adds	r1, r3, #2
 800293e:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002942:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8002946:	6011      	str	r1, [r2, #0]
 8002948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800294c:	4618      	mov	r0, r3
 800294e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002952:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	1e99      	subs	r1, r3, #2
 800295a:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800295e:	f5a2 7231 	sub.w	r2, r2, #708	; 0x2c4
 8002962:	6011      	str	r1, [r2, #0]
 8002964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002968:	fb00 f303 	mul.w	r3, r0, r3
 800296c:	17da      	asrs	r2, r3, #31
 800296e:	4698      	mov	r8, r3
 8002970:	4691      	mov	r9, r2
 8002972:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	eb12 0a08 	adds.w	sl, r2, r8
 800297e:	eb43 0b09 	adc.w	fp, r3, r9
 8002982:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002986:	e9c3 ab00 	strd	sl, fp, [r3]

        /* Decrement the loop counter */
        k--;
 800298a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800298e:	3b01      	subs	r3, #1
 8002990:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
      while (k > 0U)
 8002994:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ca      	bne.n	8002932 <arm_conv_q15+0x16f4>
      }

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = (q15_t) (__SSAT(sum >> 15, 16));
 800299c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80029a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	0bc2      	lsrs	r2, r0, #15
 80029ae:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80029b2:	13cb      	asrs	r3, r1, #15
 80029b4:	4613      	mov	r3, r2
 80029b6:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 80029ba:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 80029be:	f303 030f 	ssat	r3, #16, r3
 80029c2:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80029c6:	f8d7 03b4 	ldr.w	r0, [r7, #948]	; 0x3b4
 80029ca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80029ce:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	1c99      	adds	r1, r3, #2
 80029d6:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 80029da:	f5a2 722f 	sub.w	r2, r2, #700	; 0x2bc
 80029de:	6011      	str	r1, [r2, #0]
 80029e0:	b202      	sxth	r2, r0
 80029e2:	801a      	strh	r2, [r3, #0]

      /* Increment the MAC count */
      count++;
 80029e4:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80029e8:	3301      	adds	r3, #1
 80029ea:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0

      /* Update the inputA and inputB pointers for next MAC calculation */
      px = pIn1 + count;
 80029ee:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 80029f8:	441a      	add	r2, r3
 80029fa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80029fe:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002a02:	601a      	str	r2, [r3, #0]
      py = pSrc2;
 8002a04:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002a08:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002a0c:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 8002a10:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      blkCnt--;
 8002a12:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002a16:	3b01      	subs	r3, #1
 8002a18:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
    while (blkCnt > 0U)
 8002a1c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f47f af76 	bne.w	8002912 <arm_conv_q15+0x16d4>
   */

  /* In this stage the MAC operations are decreased by 1 for every iteration.
     The blockSize3 variable holds the number of MAC operations performed */

  blockSize3 = srcBLen - 1U;
 8002a26:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002a2a:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

  /* Working pointer of inputA */
  pSrc1 = (pIn1 + srcALen) - (srcBLen - 1U);
 8002a36:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002a3a:	f5a3 7274 	sub.w	r2, r3, #976	; 0x3d0
 8002a3e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002a42:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8002a54:	4413      	add	r3, r2
 8002a56:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
  px = pSrc1;
 8002a5a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002a5e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002a62:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002a66:	601a      	str	r2, [r3, #0]

  /* Working pointer of inputB */
  pSrc2 = pIn2 + (srcBLen - 1U);
 8002a68:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002a6c:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002a76:	4413      	add	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8002a7e:	4413      	add	r3, r2
 8002a80:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
  pIn2 = pSrc2 - 1U;
 8002a84:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8002a88:	3b02      	subs	r3, #2
 8002a8a:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
  py = pIn2;
 8002a8e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002a92:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002a96:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8002a9a:	601a      	str	r2, [r3, #0]
  /* For loop unrolling by 4, this stage is divided into two. */
  /* First part of this stage computes the MAC operations greater than 4 */
  /* Second part of this stage computes the MAC operations less than or equal to 4 */

  /* The first part of the stage starts here */
  j = blockSize3 >> 2U;
 8002a9c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002aa0:	089b      	lsrs	r3, r3, #2
 8002aa2:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8

  while ((j > 0U) && (blockSize3 > 0U))
 8002aa6:	e15c      	b.n	8002d62 <arm_conv_q15+0x1b24>
  {
    /* Accumulator is made zero for every iteration */
    sum = 0;
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002ab4:	e9c1 2300 	strd	r2, r3, [r1]

    /* Apply loop unrolling and compute 4 MACs simultaneously. */
    k = blockSize3 >> 2U;
 8002ab8:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

    /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
     ** a second loop below computes MACs for the remaining 1 to 3 samples. */
    while (k > 0U)
 8002ac2:	e096      	b.n	8002bf2 <arm_conv_q15+0x19b4>
    {
      /* x[srcALen - srcBLen + 1], x[srcALen - srcBLen + 2] are multiplied
       * with y[srcBLen - 1], y[srcBLen - 2] respectively */
      sum = __SMLALDX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 8002ac4:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002ac8:	6813      	ldr	r3, [r2, #0]
 8002aca:	1d19      	adds	r1, r3, #4
 8002acc:	6011      	str	r1, [r2, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	461c      	mov	r4, r3
 8002ad2:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8002ad6:	6813      	ldr	r3, [r2, #0]
 8002ad8:	1f19      	subs	r1, r3, #4
 8002ada:	6011      	str	r1, [r2, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002aec:	f5a1 7123 	sub.w	r1, r1, #652	; 0x28c
 8002af0:	600c      	str	r4, [r1, #0]
 8002af2:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002af6:	f5a1 7124 	sub.w	r1, r1, #656	; 0x290
 8002afa:	6008      	str	r0, [r1, #0]
 8002afc:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
  llr.w64 = acc;
 8002b00:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002b04:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002b08:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002b0c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002b16:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8002b1a:	685c      	ldr	r4, [r3, #4]
 8002b1c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002b20:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002b2a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	4623      	mov	r3, r4
 8002b32:	fbc1 23d0 	smlaldx	r2, r3, r1, r0
 8002b36:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002b3a:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 8002b3e:	600a      	str	r2, [r1, #0]
 8002b40:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002b44:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8002b48:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8002b4a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002b4e:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002b52:	e9c1 2300 	strd	r2, r3, [r1]
      /* x[srcALen - srcBLen + 3], x[srcALen - srcBLen + 4] are multiplied
       * with y[srcBLen - 3], y[srcBLen - 4] respectively */
      sum = __SMLALDX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 8002b56:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002b5a:	6813      	ldr	r3, [r2, #0]
 8002b5c:	1d19      	adds	r1, r3, #4
 8002b5e:	6011      	str	r1, [r2, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461c      	mov	r4, r3
 8002b64:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8002b68:	6813      	ldr	r3, [r2, #0]
 8002b6a:	1f19      	subs	r1, r3, #4
 8002b6c:	6011      	str	r1, [r2, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7a:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002b7e:	f5a1 711f 	sub.w	r1, r1, #636	; 0x27c
 8002b82:	600c      	str	r4, [r1, #0]
 8002b84:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002b88:	f5a1 7120 	sub.w	r1, r1, #640	; 0x280
 8002b8c:	6008      	str	r0, [r1, #0]
 8002b8e:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
  llr.w64 = acc;
 8002b92:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8002b96:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002b9a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002b9e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002ba8:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002bac:	685c      	ldr	r4, [r3, #4]
 8002bae:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002bb2:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002bb6:	6819      	ldr	r1, [r3, #0]
 8002bb8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002bbc:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	4623      	mov	r3, r4
 8002bc4:	fbc1 23d0 	smlaldx	r2, r3, r1, r0
 8002bc8:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002bcc:	f5a1 713a 	sub.w	r1, r1, #744	; 0x2e8
 8002bd0:	600a      	str	r2, [r1, #0]
 8002bd2:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002bd6:	f5a2 723a 	sub.w	r2, r2, #744	; 0x2e8
 8002bda:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8002bdc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002be0:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002be4:	e9c1 2300 	strd	r2, r3, [r1]

      /* Decrement the loop counter */
      k--;
 8002be8:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002bec:	3b01      	subs	r3, #1
 8002bee:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    while (k > 0U)
 8002bf2:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f47f af64 	bne.w	8002ac4 <arm_conv_q15+0x1886>
    }

    /* For the next MAC operations, the pointer py is used without SIMD
     * So, py is incremented by 1 */
    py = py + 1U;
 8002bfc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002c00:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	1c9a      	adds	r2, r3, #2
 8002c08:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002c0c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002c10:	601a      	str	r2, [r3, #0]

    /* If the blockSize3 is not a multiple of 4, compute any remaining MACs here.
     ** No loop unrolling is used. */
    k = blockSize3 % 0x4U;
 8002c12:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

    while (k > 0U)
 8002c1e:	e05b      	b.n	8002cd8 <arm_conv_q15+0x1a9a>
    {
      /* sum += x[srcALen - srcBLen + 5] * y[srcBLen - 5] */
      sum = __SMLALD(*px++, *py--, sum);
 8002c20:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002c24:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1c99      	adds	r1, r3, #2
 8002c2c:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002c30:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8002c34:	6011      	str	r1, [r2, #0]
 8002c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c3a:	461c      	mov	r4, r3
 8002c3c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002c40:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	1e99      	subs	r1, r3, #2
 8002c48:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002c4c:	f5a2 7231 	sub.w	r2, r2, #708	; 0x2c4
 8002c50:	6011      	str	r1, [r2, #0]
 8002c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c60:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002c64:	f5a1 7127 	sub.w	r1, r1, #668	; 0x29c
 8002c68:	600c      	str	r4, [r1, #0]
 8002c6a:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002c6e:	f5a1 7128 	sub.w	r1, r1, #672	; 0x2a0
 8002c72:	6008      	str	r0, [r1, #0]
 8002c74:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
  llr.w64 = acc;
 8002c78:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002c7c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002c80:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002c84:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002c8e:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8002c92:	685c      	ldr	r4, [r3, #4]
 8002c94:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002c98:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002ca2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	4623      	mov	r3, r4
 8002caa:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8002cae:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002cb2:	f5a1 7136 	sub.w	r1, r1, #728	; 0x2d8
 8002cb6:	600a      	str	r2, [r1, #0]
 8002cb8:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002cbc:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 8002cc0:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8002cc2:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8002cc6:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002cca:	e9c1 2300 	strd	r2, r3, [r1]

      /* Decrement the loop counter */
      k--;
 8002cce:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    while (k > 0U)
 8002cd8:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d19f      	bne.n	8002c20 <arm_conv_q15+0x19e2>
    }

    /* Store the result in the accumulator in the destination buffer. */
    *pOut++ = (q15_t) (__SSAT((sum >> 15), 16));
 8002ce0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	0bc2      	lsrs	r2, r0, #15
 8002cf2:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8002cf6:	13cb      	asrs	r3, r1, #15
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8002cfe:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8002d02:	f303 030f 	ssat	r3, #16, r3
 8002d06:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8002d0a:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 8002d0e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002d12:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	1c99      	adds	r1, r3, #2
 8002d1a:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002d1e:	f5a2 722f 	sub.w	r2, r2, #700	; 0x2bc
 8002d22:	6011      	str	r1, [r2, #0]
 8002d24:	b202      	sxth	r2, r0
 8002d26:	801a      	strh	r2, [r3, #0]

    /* Update the inputA and inputB pointers for next MAC calculation */
    px = ++pSrc1;
 8002d28:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8002d32:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002d36:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002d3a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002d3e:	601a      	str	r2, [r3, #0]
    py = pIn2;
 8002d40:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002d44:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002d48:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8002d4c:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blockSize3--;
 8002d4e:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002d52:	3b01      	subs	r3, #1
 8002d54:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

    j--;
 8002d58:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
  while ((j > 0U) && (blockSize3 > 0U))
 8002d62:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d004      	beq.n	8002d74 <arm_conv_q15+0x1b36>
 8002d6a:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f47f ae9a 	bne.w	8002aa8 <arm_conv_q15+0x186a>
  }

  /* The second part of the stage starts here */
  /* SIMD is not used for the next MAC operations,
   * so pointer py is updated to read only one sample at a time */
  py = py + 1U;
 8002d74:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002d78:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	1c9a      	adds	r2, r3, #2
 8002d80:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002d84:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002d88:	601a      	str	r2, [r3, #0]

  while (blockSize3 > 0U)
 8002d8a:	e0a8      	b.n	8002ede <arm_conv_q15+0x1ca0>
  {
    /* Accumulator is made zero for every iteration */
    sum = 0;
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002d98:	e9c1 2300 	strd	r2, r3, [r1]

    /* Apply loop unrolling and compute 4 MACs simultaneously. */
    k = blockSize3;
 8002d9c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002da0:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

    while (k > 0U)
 8002da4:	e05b      	b.n	8002e5e <arm_conv_q15+0x1c20>
    {
      /* Perform the multiply-accumulates */
      /* sum +=  x[srcALen-1] * y[srcBLen-1] */
      sum = __SMLALD(*px++, *py--, sum);
 8002da6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002daa:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	1c99      	adds	r1, r3, #2
 8002db2:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002db6:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8002dba:	6011      	str	r1, [r2, #0]
 8002dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc0:	461c      	mov	r4, r3
 8002dc2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002dc6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	1e99      	subs	r1, r3, #2
 8002dce:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002dd2:	f5a2 7231 	sub.w	r2, r2, #708	; 0x2c4
 8002dd6:	6011      	str	r1, [r2, #0]
 8002dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de6:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002dea:	f5a1 712b 	sub.w	r1, r1, #684	; 0x2ac
 8002dee:	600c      	str	r4, [r1, #0]
 8002df0:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002df4:	f5a1 712c 	sub.w	r1, r1, #688	; 0x2b0
 8002df8:	6008      	str	r0, [r1, #0]
 8002dfa:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  llr.w64 = acc;
 8002dfe:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8002e02:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002e06:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002e0a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002e14:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002e18:	685c      	ldr	r4, [r3, #4]
 8002e1a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002e1e:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8002e22:	6819      	ldr	r1, [r3, #0]
 8002e24:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002e28:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	4623      	mov	r3, r4
 8002e30:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8002e34:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002e38:	f5a1 7134 	sub.w	r1, r1, #720	; 0x2d0
 8002e3c:	600a      	str	r2, [r1, #0]
 8002e3e:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002e42:	f5a2 7234 	sub.w	r2, r2, #720	; 0x2d0
 8002e46:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8002e48:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8002e4c:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002e50:	e9c1 2300 	strd	r2, r3, [r1]

      /* Decrement the loop counter */
      k--;
 8002e54:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    while (k > 0U)
 8002e5e:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d19f      	bne.n	8002da6 <arm_conv_q15+0x1b68>
    }

    /* Store the result in the accumulator in the destination buffer. */
    *pOut++ = (q15_t) (__SSAT((sum >> 15), 16));
 8002e66:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002e6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	0bc2      	lsrs	r2, r0, #15
 8002e78:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8002e7c:	13cb      	asrs	r3, r1, #15
 8002e7e:	4613      	mov	r3, r2
 8002e80:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8002e84:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8002e88:	f303 030f 	ssat	r3, #16, r3
 8002e8c:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8002e90:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8002e94:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002e98:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	1c99      	adds	r1, r3, #2
 8002ea0:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002ea4:	f5a2 722f 	sub.w	r2, r2, #700	; 0x2bc
 8002ea8:	6011      	str	r1, [r2, #0]
 8002eaa:	b202      	sxth	r2, r0
 8002eac:	801a      	strh	r2, [r3, #0]

    /* Update the inputA and inputB pointers for next MAC calculation */
    px = ++pSrc1;
 8002eae:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8002eb8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002ebc:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002ec0:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002ec4:	601a      	str	r2, [r3, #0]
    py = pSrc2;
 8002ec6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002eca:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002ece:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 8002ed2:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blockSize3--;
 8002ed4:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
  while (blockSize3 > 0U)
 8002ede:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f47f af52 	bne.w	8002d8c <arm_conv_q15+0x1b4e>
    pDst[i] = (q15_t) __SSAT((sum >> 15U), 16U);
  }

#endif /* #if (defined(ARM_MATH_CM7) || defined(ARM_MATH_CM4) || defined(ARM_MATH_CM3)) && !defined(UNALIGNED_SUPPORT_DISABLE) */

}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002efe:	2003      	movs	r0, #3
 8002f00:	f001 f84e 	bl	8003fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002f04:	f002 fa04 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_Init+0x68>)
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	0a1b      	lsrs	r3, r3, #8
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	4913      	ldr	r1, [pc, #76]	; (8002f64 <HAL_Init+0x6c>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f20:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002f22:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <HAL_Init+0x68>)
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	4a0e      	ldr	r2, [pc, #56]	; (8002f64 <HAL_Init+0x6c>)
 8002f2c:	5cd3      	ldrb	r3, [r2, r3]
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
 8002f38:	4a0b      	ldr	r2, [pc, #44]	; (8002f68 <HAL_Init+0x70>)
 8002f3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f3c:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <HAL_Init+0x74>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f42:	2000      	movs	r0, #0
 8002f44:	f000 f814 	bl	8002f70 <HAL_InitTick>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e002      	b.n	8002f58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f52:	f7fd ff2d 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	58024400 	.word	0x58024400
 8002f64:	08009e2c 	.word	0x08009e2c
 8002f68:	240000a4 	.word	0x240000a4
 8002f6c:	240000a0 	.word	0x240000a0

08002f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f78:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <HAL_InitTick+0x60>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e021      	b.n	8002fc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <HAL_InitTick+0x64>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <HAL_InitTick+0x60>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f001 f825 	bl	8003fea <HAL_SYSTICK_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00e      	b.n	8002fc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b0f      	cmp	r3, #15
 8002fae:	d80a      	bhi.n	8002fc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	f000 fffd 	bl	8003fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fbc:	4a06      	ldr	r2, [pc, #24]	; (8002fd8 <HAL_InitTick+0x68>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	240000ac 	.word	0x240000ac
 8002fd4:	240000a0 	.word	0x240000a0
 8002fd8:	240000a8 	.word	0x240000a8

08002fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_IncTick+0x20>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_IncTick+0x24>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4413      	add	r3, r2
 8002fec:	4a04      	ldr	r2, [pc, #16]	; (8003000 <HAL_IncTick+0x24>)
 8002fee:	6013      	str	r3, [r2, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	240000ac 	.word	0x240000ac
 8003000:	24000244 	.word	0x24000244

08003004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return uwTick;
 8003008:	4b03      	ldr	r3, [pc, #12]	; (8003018 <HAL_GetTick+0x14>)
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	24000244 	.word	0x24000244

0800301c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003024:	f7ff ffee 	bl	8003004 <HAL_GetTick>
 8003028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d005      	beq.n	8003042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003036:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_Delay+0x44>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003042:	bf00      	nop
 8003044:	f7ff ffde 	bl	8003004 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	429a      	cmp	r2, r3
 8003052:	d8f7      	bhi.n	8003044 <HAL_Delay+0x28>
  {
  }
}
 8003054:	bf00      	nop
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	240000ac 	.word	0x240000ac

08003064 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	43db      	mvns	r3, r3
 8003076:	401a      	ands	r2, r3
 8003078:	4904      	ldr	r1, [pc, #16]	; (800308c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	58000400 	.word	0x58000400

08003090 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	609a      	str	r2, [r3, #8]
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 031f 	and.w	r3, r3, #31
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003122:	4013      	ands	r3, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6093      	str	r3, [r2, #8]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	5fffffc0 	.word	0x5fffffc0

08003138 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800314c:	d101      	bne.n	8003152 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <LL_ADC_EnableInternalRegulator+0x24>)
 800316e:	4013      	ands	r3, r2
 8003170:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	6fffffc0 	.word	0x6fffffc0

08003188 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800319c:	d101      	bne.n	80031a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <LL_ADC_Enable+0x24>)
 80031be:	4013      	ands	r3, r2
 80031c0:	f043 0201 	orr.w	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	7fffffc0 	.word	0x7fffffc0

080031d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <LL_ADC_Disable+0x24>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	f043 0202 	orr.w	r2, r3, #2
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	7fffffc0 	.word	0x7fffffc0

08003200 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <LL_ADC_IsEnabled+0x18>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <LL_ADC_IsEnabled+0x1a>
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b02      	cmp	r3, #2
 8003238:	d101      	bne.n	800323e <LL_ADC_IsDisableOngoing+0x18>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <LL_ADC_IsDisableOngoing+0x1a>
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <LL_ADC_REG_StartConversion+0x24>)
 800325a:	4013      	ands	r3, r2
 800325c:	f043 0204 	orr.w	r2, r3, #4
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	7fffffc0 	.word	0x7fffffc0

08003274 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <LL_ADC_REG_StopConversion+0x24>)
 8003282:	4013      	ands	r3, r2
 8003284:	f043 0210 	orr.w	r2, r3, #16
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	7fffffc0 	.word	0x7fffffc0

0800329c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d101      	bne.n	80032b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <LL_ADC_INJ_StopConversion+0x24>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	7fffffc0 	.word	0x7fffffc0

080032ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d101      	bne.n	8003304 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b089      	sub	sp, #36	; 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003320:	2300      	movs	r3, #0
 8003322:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e138      	b.n	80035a0 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	2b00      	cmp	r3, #0
 800333a:	d109      	bne.n	8003350 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7fd f995 	bl	800066c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff feef 	bl	8003138 <LL_ADC_IsDeepPowerDownEnabled>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff fed5 	bl	8003114 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff ff0a 	bl	8003188 <LL_ADC_IsInternalRegulatorEnabled>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d114      	bne.n	80033a4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff feee 	bl	8003160 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003384:	4b88      	ldr	r3, [pc, #544]	; (80035a8 <HAL_ADC_Init+0x294>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	099b      	lsrs	r3, r3, #6
 800338a:	4a88      	ldr	r2, [pc, #544]	; (80035ac <HAL_ADC_Init+0x298>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	099b      	lsrs	r3, r3, #6
 8003392:	3301      	adds	r3, #1
 8003394:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003396:	e002      	b.n	800339e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	3b01      	subs	r3, #1
 800339c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f9      	bne.n	8003398 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff feed 	bl	8003188 <LL_ADC_IsInternalRegulatorEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10d      	bne.n	80033d0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b8:	f043 0210 	orr.w	r2, r3, #16
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff61 	bl	800329c <LL_ADC_REG_IsConversionOngoing>
 80033da:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f040 80d2 	bne.w	800358e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f040 80ce 	bne.w	800358e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033fa:	f043 0202 	orr.w	r2, r3, #2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fefa 	bl	8003200 <LL_ADC_IsEnabled>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d110      	bne.n	8003434 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003412:	4867      	ldr	r0, [pc, #412]	; (80035b0 <HAL_ADC_Init+0x29c>)
 8003414:	f7ff fef4 	bl	8003200 <LL_ADC_IsEnabled>
 8003418:	4604      	mov	r4, r0
 800341a:	4866      	ldr	r0, [pc, #408]	; (80035b4 <HAL_ADC_Init+0x2a0>)
 800341c:	f7ff fef0 	bl	8003200 <LL_ADC_IsEnabled>
 8003420:	4603      	mov	r3, r0
 8003422:	4323      	orrs	r3, r4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4619      	mov	r1, r3
 800342e:	4862      	ldr	r0, [pc, #392]	; (80035b8 <HAL_ADC_Init+0x2a4>)
 8003430:	f7ff fe2e 	bl	8003090 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	7d5b      	ldrb	r3, [r3, #21]
 8003438:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800343e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8003444:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	7f1b      	ldrb	r3, [r3, #28]
 800344a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	7f1b      	ldrb	r3, [r3, #28]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d106      	bne.n	8003466 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	3b01      	subs	r3, #1
 800345e:	045b      	lsls	r3, r3, #17
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <HAL_ADC_Init+0x2a8>)
 800348a:	4013      	ands	r3, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	69b9      	ldr	r1, [r7, #24]
 8003492:	430b      	orrs	r3, r1
 8003494:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fefe 	bl	800329c <LL_ADC_REG_IsConversionOngoing>
 80034a0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ff20 	bl	80032ec <LL_ADC_INJ_IsConversionOngoing>
 80034ac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d14a      	bne.n	800354a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d147      	bne.n	800354a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	7d1b      	ldrb	r3, [r3, #20]
 80034be:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	4b3c      	ldr	r3, [pc, #240]	; (80035c0 <HAL_ADC_Init+0x2ac>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	69b9      	ldr	r1, [r7, #24]
 80034d8:	430b      	orrs	r3, r1
 80034da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d11b      	bne.n	800351e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691a      	ldr	r2, [r3, #16]
 80034f2:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <HAL_ADC_Init+0x2b0>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034fa:	3a01      	subs	r2, #1
 80034fc:	0411      	lsls	r1, r2, #16
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003502:	4311      	orrs	r1, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003508:	4311      	orrs	r1, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800350e:	430a      	orrs	r2, r1
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	611a      	str	r2, [r3, #16]
 800351c:	e007      	b.n	800352e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fbab 	bl	8003ca0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d10c      	bne.n	800356c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	f023 010f 	bic.w	r1, r3, #15
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	1e5a      	subs	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
 800356a:	e007      	b.n	800357c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 020f 	bic.w	r2, r2, #15
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	f023 0303 	bic.w	r3, r3, #3
 8003584:	f043 0201 	orr.w	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
 800358c:	e007      	b.n	800359e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003592:	f043 0210 	orr.w	r2, r3, #16
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800359e:	7ffb      	ldrb	r3, [r7, #31]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3724      	adds	r7, #36	; 0x24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd90      	pop	{r4, r7, pc}
 80035a8:	240000a0 	.word	0x240000a0
 80035ac:	053e2d63 	.word	0x053e2d63
 80035b0:	40022000 	.word	0x40022000
 80035b4:	40022100 	.word	0x40022100
 80035b8:	40022300 	.word	0x40022300
 80035bc:	fff0c003 	.word	0xfff0c003
 80035c0:	ffffbffc 	.word	0xffffbffc
 80035c4:	fc00f81e 	.word	0xfc00f81e

080035c8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035d0:	4856      	ldr	r0, [pc, #344]	; (800372c <HAL_ADC_Start+0x164>)
 80035d2:	f7ff fd83 	bl	80030dc <LL_ADC_GetMultimode>
 80035d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fe5d 	bl	800329c <LL_ADC_REG_IsConversionOngoing>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f040 809a 	bne.w	800371e <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_ADC_Start+0x30>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e095      	b.n	8003724 <HAL_ADC_Start+0x15c>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fa71 	bl	8003ae8 <ADC_Enable>
 8003606:	4603      	mov	r3, r0
 8003608:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800360a:	7dfb      	ldrb	r3, [r7, #23]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f040 8081 	bne.w	8003714 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003616:	4b46      	ldr	r3, [pc, #280]	; (8003730 <HAL_ADC_Start+0x168>)
 8003618:	4013      	ands	r3, r2
 800361a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a43      	ldr	r2, [pc, #268]	; (8003734 <HAL_ADC_Start+0x16c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d002      	beq.n	8003632 <HAL_ADC_Start+0x6a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	e000      	b.n	8003634 <HAL_ADC_Start+0x6c>
 8003632:	4b41      	ldr	r3, [pc, #260]	; (8003738 <HAL_ADC_Start+0x170>)
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	4293      	cmp	r3, r2
 800363a:	d002      	beq.n	8003642 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d105      	bne.n	800364e <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003646:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365a:	d106      	bne.n	800366a <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	f023 0206 	bic.w	r2, r3, #6
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	659a      	str	r2, [r3, #88]	; 0x58
 8003668:	e002      	b.n	8003670 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	221c      	movs	r2, #28
 8003676:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a2b      	ldr	r2, [pc, #172]	; (8003734 <HAL_ADC_Start+0x16c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d002      	beq.n	8003690 <HAL_ADC_Start+0xc8>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	e000      	b.n	8003692 <HAL_ADC_Start+0xca>
 8003690:	4b29      	ldr	r3, [pc, #164]	; (8003738 <HAL_ADC_Start+0x170>)
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	4293      	cmp	r3, r2
 8003698:	d008      	beq.n	80036ac <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b05      	cmp	r3, #5
 80036a4:	d002      	beq.n	80036ac <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	2b09      	cmp	r3, #9
 80036aa:	d114      	bne.n	80036d6 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff fdbc 	bl	800324c <LL_ADC_REG_StartConversion>
 80036d4:	e025      	b.n	8003722 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a13      	ldr	r2, [pc, #76]	; (8003734 <HAL_ADC_Start+0x16c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d002      	beq.n	80036f2 <HAL_ADC_Start+0x12a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	e000      	b.n	80036f4 <HAL_ADC_Start+0x12c>
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_ADC_Start+0x170>)
 80036f4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00f      	beq.n	8003722 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800370a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	655a      	str	r2, [r3, #84]	; 0x54
 8003712:	e006      	b.n	8003722 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800371c:	e001      	b.n	8003722 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800371e:	2302      	movs	r3, #2
 8003720:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003722:	7dfb      	ldrb	r3, [r7, #23]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40022300 	.word	0x40022300
 8003730:	fffff0fe 	.word	0xfffff0fe
 8003734:	40022100 	.word	0x40022100
 8003738:	40022000 	.word	0x40022000

0800373c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_ADC_Stop+0x16>
 800374e:	2302      	movs	r3, #2
 8003750:	e021      	b.n	8003796 <HAL_ADC_Stop+0x5a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800375a:	2103      	movs	r1, #3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f907 	bl	8003970 <ADC_ConversionStop>
 8003762:	4603      	mov	r3, r0
 8003764:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10f      	bne.n	800378c <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fa37 	bl	8003be0 <ADC_Disable>
 8003772:	4603      	mov	r3, r0
 8003774:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d107      	bne.n	800378c <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <HAL_ADC_Stop+0x64>)
 8003782:	4013      	ands	r3, r2
 8003784:	f043 0201 	orr.w	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	ffffeefe 	.word	0xffffeefe

080037a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037ae:	4866      	ldr	r0, [pc, #408]	; (8003948 <HAL_ADC_PollForConversion+0x1a4>)
 80037b0:	f7ff fc94 	bl	80030dc <LL_ADC_GetMultimode>
 80037b4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d102      	bne.n	80037c4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80037be:	2308      	movs	r3, #8
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	e02a      	b.n	800381a <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b05      	cmp	r3, #5
 80037ce:	d002      	beq.n	80037d6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2b09      	cmp	r3, #9
 80037d4:	d111      	bne.n	80037fa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	f043 0220 	orr.w	r2, r3, #32
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0a4      	b.n	800393e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80037f4:	2304      	movs	r3, #4
 80037f6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80037f8:	e00f      	b.n	800381a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80037fa:	4853      	ldr	r0, [pc, #332]	; (8003948 <HAL_ADC_PollForConversion+0x1a4>)
 80037fc:	f7ff fc7c 	bl	80030f8 <LL_ADC_GetMultiDMATransfer>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e093      	b.n	800393e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003816:	2304      	movs	r3, #4
 8003818:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800381a:	f7ff fbf3 	bl	8003004 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003820:	e021      	b.n	8003866 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d01d      	beq.n	8003866 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800382a:	f7ff fbeb 	bl	8003004 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d302      	bcc.n	8003840 <HAL_ADC_PollForConversion+0x9c>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d112      	bne.n	8003866 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10b      	bne.n	8003866 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	f043 0204 	orr.w	r2, r3, #4
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e06b      	b.n	800393e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0d6      	beq.n	8003822 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff fc16 	bl	80030b6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01c      	beq.n	80038ca <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	7d5b      	ldrb	r3, [r3, #21]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d118      	bne.n	80038ca <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d111      	bne.n	80038ca <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d105      	bne.n	80038ca <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1f      	ldr	r2, [pc, #124]	; (800394c <HAL_ADC_PollForConversion+0x1a8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d002      	beq.n	80038da <HAL_ADC_PollForConversion+0x136>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	e000      	b.n	80038dc <HAL_ADC_PollForConversion+0x138>
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <HAL_ADC_PollForConversion+0x1ac>)
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d008      	beq.n	80038f6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b05      	cmp	r3, #5
 80038ee:	d002      	beq.n	80038f6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2b09      	cmp	r3, #9
 80038f4:	d104      	bne.n	8003900 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	61bb      	str	r3, [r7, #24]
 80038fe:	e00c      	b.n	800391a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a11      	ldr	r2, [pc, #68]	; (800394c <HAL_ADC_PollForConversion+0x1a8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d002      	beq.n	8003910 <HAL_ADC_PollForConversion+0x16c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	e000      	b.n	8003912 <HAL_ADC_PollForConversion+0x16e>
 8003910:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <HAL_ADC_PollForConversion+0x1ac>)
 8003912:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	2b08      	cmp	r3, #8
 800391e:	d104      	bne.n	800392a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2208      	movs	r2, #8
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e008      	b.n	800393c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d103      	bne.n	800393c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	220c      	movs	r2, #12
 800393a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3720      	adds	r7, #32
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40022300 	.word	0x40022300
 800394c:	40022100 	.word	0x40022100
 8003950:	40022000 	.word	0x40022000

08003954 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fc88 	bl	800329c <LL_ADC_REG_IsConversionOngoing>
 800398c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fcaa 	bl	80032ec <LL_ADC_INJ_IsConversionOngoing>
 8003998:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d103      	bne.n	80039a8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8098 	beq.w	8003ad8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02a      	beq.n	8003a0c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	7d5b      	ldrb	r3, [r3, #21]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d126      	bne.n	8003a0c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	7d1b      	ldrb	r3, [r3, #20]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d122      	bne.n	8003a0c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80039c6:	2301      	movs	r3, #1
 80039c8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039ca:	e014      	b.n	80039f6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4a45      	ldr	r2, [pc, #276]	; (8003ae4 <ADC_ConversionStop+0x174>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d90d      	bls.n	80039f0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d8:	f043 0210 	orr.w	r2, r3, #16
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	f043 0201 	orr.w	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e074      	b.n	8003ada <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	3301      	adds	r3, #1
 80039f4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a00:	2b40      	cmp	r3, #64	; 0x40
 8003a02:	d1e3      	bne.n	80039cc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2240      	movs	r2, #64	; 0x40
 8003a0a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d014      	beq.n	8003a3c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fc40 	bl	800329c <LL_ADC_REG_IsConversionOngoing>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00c      	beq.n	8003a3c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff fbfd 	bl	8003226 <LL_ADC_IsDisableOngoing>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d104      	bne.n	8003a3c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fc1c 	bl	8003274 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d014      	beq.n	8003a6c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff fc50 	bl	80032ec <LL_ADC_INJ_IsConversionOngoing>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fbe5 	bl	8003226 <LL_ADC_IsDisableOngoing>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fc2c 	bl	80032c4 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d005      	beq.n	8003a7e <ADC_ConversionStop+0x10e>
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d105      	bne.n	8003a84 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003a78:	230c      	movs	r3, #12
 8003a7a:	617b      	str	r3, [r7, #20]
        break;
 8003a7c:	e005      	b.n	8003a8a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003a7e:	2308      	movs	r3, #8
 8003a80:	617b      	str	r3, [r7, #20]
        break;
 8003a82:	e002      	b.n	8003a8a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003a84:	2304      	movs	r3, #4
 8003a86:	617b      	str	r3, [r7, #20]
        break;
 8003a88:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003a8a:	f7ff fabb 	bl	8003004 <HAL_GetTick>
 8003a8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a90:	e01b      	b.n	8003aca <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003a92:	f7ff fab7 	bl	8003004 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d914      	bls.n	8003aca <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00d      	beq.n	8003aca <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab2:	f043 0210 	orr.w	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	f043 0201 	orr.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e007      	b.n	8003ada <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1dc      	bne.n	8003a92 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	000cdbff 	.word	0x000cdbff

08003ae8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fb83 	bl	8003200 <LL_ADC_IsEnabled>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d161      	bne.n	8003bc4 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	4b32      	ldr	r3, [pc, #200]	; (8003bd0 <ADC_Enable+0xe8>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	f043 0210 	orr.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	f043 0201 	orr.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e04d      	b.n	8003bc6 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fb3e 	bl	80031b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b34:	f7ff fa66 	bl	8003004 <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b3a:	4826      	ldr	r0, [pc, #152]	; (8003bd4 <ADC_Enable+0xec>)
 8003b3c:	f7ff face 	bl	80030dc <LL_ADC_GetMultimode>
 8003b40:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a24      	ldr	r2, [pc, #144]	; (8003bd8 <ADC_Enable+0xf0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d002      	beq.n	8003b52 <ADC_Enable+0x6a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	e000      	b.n	8003b54 <ADC_Enable+0x6c>
 8003b52:	4b22      	ldr	r3, [pc, #136]	; (8003bdc <ADC_Enable+0xf4>)
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d02c      	beq.n	8003bb6 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d130      	bne.n	8003bc4 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b62:	e028      	b.n	8003bb6 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fb49 	bl	8003200 <LL_ADC_IsEnabled>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fb19 	bl	80031b0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b7e:	f7ff fa41 	bl	8003004 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d914      	bls.n	8003bb6 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d00d      	beq.n	8003bb6 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9e:	f043 0210 	orr.w	r2, r3, #16
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003baa:	f043 0201 	orr.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e007      	b.n	8003bc6 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d1cf      	bne.n	8003b64 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	8000003f 	.word	0x8000003f
 8003bd4:	40022300 	.word	0x40022300
 8003bd8:	40022100 	.word	0x40022100
 8003bdc:	40022000 	.word	0x40022000

08003be0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fb1a 	bl	8003226 <LL_ADC_IsDisableOngoing>
 8003bf2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fb01 	bl	8003200 <LL_ADC_IsEnabled>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d047      	beq.n	8003c94 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d144      	bne.n	8003c94 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 030d 	and.w	r3, r3, #13
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d10c      	bne.n	8003c32 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fadb 	bl	80031d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2203      	movs	r2, #3
 8003c28:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c2a:	f7ff f9eb 	bl	8003004 <HAL_GetTick>
 8003c2e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c30:	e029      	b.n	8003c86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	f043 0210 	orr.w	r2, r3, #16
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	f043 0201 	orr.w	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e023      	b.n	8003c96 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c4e:	f7ff f9d9 	bl	8003004 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d914      	bls.n	8003c86 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00d      	beq.n	8003c86 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6e:	f043 0210 	orr.w	r2, r3, #16
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7a:	f043 0201 	orr.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e007      	b.n	8003c96 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1dc      	bne.n	8003c4e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ca8:	4b60      	ldr	r3, [pc, #384]	; (8003e2c <ADC_ConfigureBoostMode+0x18c>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01c      	beq.n	8003cee <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003cb4:	f001 fca6 	bl	8005604 <HAL_RCC_GetHCLKFreq>
 8003cb8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cc2:	d010      	beq.n	8003ce6 <ADC_ConfigureBoostMode+0x46>
 8003cc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cc8:	d873      	bhi.n	8003db2 <ADC_ConfigureBoostMode+0x112>
 8003cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cce:	d002      	beq.n	8003cd6 <ADC_ConfigureBoostMode+0x36>
 8003cd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cd4:	d16d      	bne.n	8003db2 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	0c1b      	lsrs	r3, r3, #16
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	60fb      	str	r3, [r7, #12]
        break;
 8003ce4:	e068      	b.n	8003db8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	60fb      	str	r3, [r7, #12]
        break;
 8003cec:	e064      	b.n	8003db8 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003cee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	f002 fe9f 	bl	8006a38 <HAL_RCCEx_GetPeriphCLKFreq>
 8003cfa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d04:	d051      	beq.n	8003daa <ADC_ConfigureBoostMode+0x10a>
 8003d06:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d0a:	d854      	bhi.n	8003db6 <ADC_ConfigureBoostMode+0x116>
 8003d0c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d10:	d047      	beq.n	8003da2 <ADC_ConfigureBoostMode+0x102>
 8003d12:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d16:	d84e      	bhi.n	8003db6 <ADC_ConfigureBoostMode+0x116>
 8003d18:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d1c:	d03d      	beq.n	8003d9a <ADC_ConfigureBoostMode+0xfa>
 8003d1e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d22:	d848      	bhi.n	8003db6 <ADC_ConfigureBoostMode+0x116>
 8003d24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d28:	d033      	beq.n	8003d92 <ADC_ConfigureBoostMode+0xf2>
 8003d2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d2e:	d842      	bhi.n	8003db6 <ADC_ConfigureBoostMode+0x116>
 8003d30:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d34:	d029      	beq.n	8003d8a <ADC_ConfigureBoostMode+0xea>
 8003d36:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d3a:	d83c      	bhi.n	8003db6 <ADC_ConfigureBoostMode+0x116>
 8003d3c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d40:	d01a      	beq.n	8003d78 <ADC_ConfigureBoostMode+0xd8>
 8003d42:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d46:	d836      	bhi.n	8003db6 <ADC_ConfigureBoostMode+0x116>
 8003d48:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d4c:	d014      	beq.n	8003d78 <ADC_ConfigureBoostMode+0xd8>
 8003d4e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d52:	d830      	bhi.n	8003db6 <ADC_ConfigureBoostMode+0x116>
 8003d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d58:	d00e      	beq.n	8003d78 <ADC_ConfigureBoostMode+0xd8>
 8003d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d5e:	d82a      	bhi.n	8003db6 <ADC_ConfigureBoostMode+0x116>
 8003d60:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d64:	d008      	beq.n	8003d78 <ADC_ConfigureBoostMode+0xd8>
 8003d66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d6a:	d824      	bhi.n	8003db6 <ADC_ConfigureBoostMode+0x116>
 8003d6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d70:	d002      	beq.n	8003d78 <ADC_ConfigureBoostMode+0xd8>
 8003d72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d76:	d11e      	bne.n	8003db6 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	0c9b      	lsrs	r3, r3, #18
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d86:	60fb      	str	r3, [r7, #12]
        break;
 8003d88:	e016      	b.n	8003db8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]
        break;
 8003d90:	e012      	b.n	8003db8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	60fb      	str	r3, [r7, #12]
        break;
 8003d98:	e00e      	b.n	8003db8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	099b      	lsrs	r3, r3, #6
 8003d9e:	60fb      	str	r3, [r7, #12]
        break;
 8003da0:	e00a      	b.n	8003db8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	09db      	lsrs	r3, r3, #7
 8003da6:	60fb      	str	r3, [r7, #12]
        break;
 8003da8:	e006      	b.n	8003db8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	60fb      	str	r3, [r7, #12]
        break;
 8003db0:	e002      	b.n	8003db8 <ADC_ConfigureBoostMode+0x118>
        break;
 8003db2:	bf00      	nop
 8003db4:	e000      	b.n	8003db8 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8003db6:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	; (8003e30 <ADC_ConfigureBoostMode+0x190>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d808      	bhi.n	8003dd8 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003dd4:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003dd6:	e025      	b.n	8003e24 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <ADC_ConfigureBoostMode+0x194>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d80a      	bhi.n	8003df6 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df2:	609a      	str	r2, [r3, #8]
}
 8003df4:	e016      	b.n	8003e24 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4a0f      	ldr	r2, [pc, #60]	; (8003e38 <ADC_ConfigureBoostMode+0x198>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d80a      	bhi.n	8003e14 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e10:	609a      	str	r2, [r3, #8]
}
 8003e12:	e007      	b.n	8003e24 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003e22:	609a      	str	r2, [r3, #8]
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40022300 	.word	0x40022300
 8003e30:	005f5e10 	.word	0x005f5e10
 8003e34:	00bebc20 	.word	0x00bebc20
 8003e38:	017d7840 	.word	0x017d7840

08003e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <__NVIC_SetPriorityGrouping+0x40>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <__NVIC_SetPriorityGrouping+0x44>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e6a:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <__NVIC_SetPriorityGrouping+0x40>)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	60d3      	str	r3, [r2, #12]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000ed00 	.word	0xe000ed00
 8003e80:	05fa0000 	.word	0x05fa0000

08003e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e88:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <__NVIC_GetPriorityGrouping+0x18>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	0a1b      	lsrs	r3, r3, #8
 8003e8e:	f003 0307 	and.w	r3, r3, #7
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	6039      	str	r1, [r7, #0]
 8003eaa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003eac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	db0a      	blt.n	8003eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	490c      	ldr	r1, [pc, #48]	; (8003eec <__NVIC_SetPriority+0x4c>)
 8003eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ebe:	0112      	lsls	r2, r2, #4
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ec8:	e00a      	b.n	8003ee0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	4908      	ldr	r1, [pc, #32]	; (8003ef0 <__NVIC_SetPriority+0x50>)
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	3b04      	subs	r3, #4
 8003ed8:	0112      	lsls	r2, r2, #4
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	440b      	add	r3, r1
 8003ede:	761a      	strb	r2, [r3, #24]
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	e000e100 	.word	0xe000e100
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b089      	sub	sp, #36	; 0x24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f1c3 0307 	rsb	r3, r3, #7
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	bf28      	it	cs
 8003f12:	2304      	movcs	r3, #4
 8003f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	2b06      	cmp	r3, #6
 8003f1c:	d902      	bls.n	8003f24 <NVIC_EncodePriority+0x30>
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	3b03      	subs	r3, #3
 8003f22:	e000      	b.n	8003f26 <NVIC_EncodePriority+0x32>
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f28:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43da      	mvns	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	401a      	ands	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	fa01 f303 	lsl.w	r3, r1, r3
 8003f46:	43d9      	mvns	r1, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f4c:	4313      	orrs	r3, r2
         );
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3724      	adds	r7, #36	; 0x24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f6c:	d301      	bcc.n	8003f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e00f      	b.n	8003f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f72:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <SysTick_Config+0x40>)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f7a:	210f      	movs	r1, #15
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f80:	f7ff ff8e 	bl	8003ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <SysTick_Config+0x40>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f8a:	4b04      	ldr	r3, [pc, #16]	; (8003f9c <SysTick_Config+0x40>)
 8003f8c:	2207      	movs	r2, #7
 8003f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	e000e010 	.word	0xe000e010

08003fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff ff47 	bl	8003e3c <__NVIC_SetPriorityGrouping>
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b086      	sub	sp, #24
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fc4:	f7ff ff5e 	bl	8003e84 <__NVIC_GetPriorityGrouping>
 8003fc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	6978      	ldr	r0, [r7, #20]
 8003fd0:	f7ff ff90 	bl	8003ef4 <NVIC_EncodePriority>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ff5f 	bl	8003ea0 <__NVIC_SetPriority>
}
 8003fe2:	bf00      	nop
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff ffb2 	bl	8003f5c <SysTick_Config>
 8003ff8:	4603      	mov	r3, r0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e014      	b.n	800403e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	791b      	ldrb	r3, [r3, #4]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d105      	bne.n	800402a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fc fbb3 	bl	8000790 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	795b      	ldrb	r3, [r3, #5]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_DAC_ConfigChannel+0x18>
 800405c:	2302      	movs	r3, #2
 800405e:	e12a      	b.n	80042b6 <HAL_DAC_ConfigChannel+0x26e>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2202      	movs	r2, #2
 800406a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b04      	cmp	r3, #4
 8004072:	f040 8081 	bne.w	8004178 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004076:	f7fe ffc5 	bl	8003004 <HAL_GetTick>
 800407a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d140      	bne.n	8004104 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004082:	e018      	b.n	80040b6 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004084:	f7fe ffbe 	bl	8003004 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d911      	bls.n	80040b6 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004098:	4b89      	ldr	r3, [pc, #548]	; (80042c0 <HAL_DAC_ConfigChannel+0x278>)
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f043 0208 	orr.w	r2, r3, #8
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2203      	movs	r2, #3
 80040b0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e0ff      	b.n	80042b6 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040bc:	4b80      	ldr	r3, [pc, #512]	; (80042c0 <HAL_DAC_ConfigChannel+0x278>)
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1df      	bne.n	8004084 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 80040c4:	2001      	movs	r0, #1
 80040c6:	f7fe ffa9 	bl	800301c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	6992      	ldr	r2, [r2, #24]
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40
 80040d4:	e023      	b.n	800411e <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80040d6:	f7fe ff95 	bl	8003004 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d90f      	bls.n	8004104 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	da0a      	bge.n	8004104 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f043 0208 	orr.w	r2, r3, #8
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2203      	movs	r2, #3
 80040fe:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e0d8      	b.n	80042b6 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	2b00      	cmp	r3, #0
 800410c:	dbe3      	blt.n	80040d6 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 800410e:	2001      	movs	r0, #1
 8004110:	f7fe ff84 	bl	800301c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	6992      	ldr	r2, [r2, #24]
 800411c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800412e:	fa01 f303 	lsl.w	r3, r1, r3
 8004132:	43db      	mvns	r3, r3
 8004134:	ea02 0103 	and.w	r1, r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	409a      	lsls	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	21ff      	movs	r1, #255	; 0xff
 800415a:	fa01 f303 	lsl.w	r3, r1, r3
 800415e:	43db      	mvns	r3, r3
 8004160:	ea02 0103 	and.w	r1, r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	6a1a      	ldr	r2, [r3, #32]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	409a      	lsls	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d11d      	bne.n	80041bc <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	221f      	movs	r2, #31
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4013      	ands	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2207      	movs	r2, #7
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	4013      	ands	r3, r2
 80041d6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d102      	bne.n	80041e6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	e00f      	b.n	8004206 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d102      	bne.n	80041f4 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80041ee:	2301      	movs	r3, #1
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e008      	b.n	8004206 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d102      	bne.n	8004202 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80041fc:	2301      	movs	r3, #1
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	e001      	b.n	8004206 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	4313      	orrs	r3, r2
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6819      	ldr	r1, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	43da      	mvns	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	400a      	ands	r2, r1
 800424c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4013      	ands	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6819      	ldr	r1, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	22c0      	movs	r2, #192	; 0xc0
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43da      	mvns	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	400a      	ands	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3720      	adds	r7, #32
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20008000 	.word	0x20008000

080042c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80042d2:	4b89      	ldr	r3, [pc, #548]	; (80044f8 <HAL_GPIO_Init+0x234>)
 80042d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042d6:	e194      	b.n	8004602 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	2101      	movs	r1, #1
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	fa01 f303 	lsl.w	r3, r1, r3
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8186 	beq.w	80045fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d005      	beq.n	8004308 <HAL_GPIO_Init+0x44>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d130      	bne.n	800436a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	2203      	movs	r2, #3
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800433e:	2201      	movs	r2, #1
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4013      	ands	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	f003 0201 	and.w	r2, r3, #1
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b03      	cmp	r3, #3
 8004374:	d017      	beq.n	80043a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	2203      	movs	r2, #3
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d123      	bne.n	80043fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	08da      	lsrs	r2, r3, #3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3208      	adds	r2, #8
 80043ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	220f      	movs	r2, #15
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	08da      	lsrs	r2, r3, #3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3208      	adds	r2, #8
 80043f4:	69b9      	ldr	r1, [r7, #24]
 80043f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	2203      	movs	r2, #3
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43db      	mvns	r3, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4013      	ands	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f003 0203 	and.w	r2, r3, #3
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80e0 	beq.w	80045fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800443c:	4b2f      	ldr	r3, [pc, #188]	; (80044fc <HAL_GPIO_Init+0x238>)
 800443e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004442:	4a2e      	ldr	r2, [pc, #184]	; (80044fc <HAL_GPIO_Init+0x238>)
 8004444:	f043 0302 	orr.w	r3, r3, #2
 8004448:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800444c:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <HAL_GPIO_Init+0x238>)
 800444e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800445a:	4a29      	ldr	r2, [pc, #164]	; (8004500 <HAL_GPIO_Init+0x23c>)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	089b      	lsrs	r3, r3, #2
 8004460:	3302      	adds	r3, #2
 8004462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	220f      	movs	r2, #15
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4013      	ands	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a20      	ldr	r2, [pc, #128]	; (8004504 <HAL_GPIO_Init+0x240>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d052      	beq.n	800452c <HAL_GPIO_Init+0x268>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a1f      	ldr	r2, [pc, #124]	; (8004508 <HAL_GPIO_Init+0x244>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d031      	beq.n	80044f2 <HAL_GPIO_Init+0x22e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a1e      	ldr	r2, [pc, #120]	; (800450c <HAL_GPIO_Init+0x248>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d02b      	beq.n	80044ee <HAL_GPIO_Init+0x22a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a1d      	ldr	r2, [pc, #116]	; (8004510 <HAL_GPIO_Init+0x24c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d025      	beq.n	80044ea <HAL_GPIO_Init+0x226>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <HAL_GPIO_Init+0x250>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01f      	beq.n	80044e6 <HAL_GPIO_Init+0x222>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <HAL_GPIO_Init+0x254>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d019      	beq.n	80044e2 <HAL_GPIO_Init+0x21e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1a      	ldr	r2, [pc, #104]	; (800451c <HAL_GPIO_Init+0x258>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_GPIO_Init+0x21a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a19      	ldr	r2, [pc, #100]	; (8004520 <HAL_GPIO_Init+0x25c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00d      	beq.n	80044da <HAL_GPIO_Init+0x216>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a18      	ldr	r2, [pc, #96]	; (8004524 <HAL_GPIO_Init+0x260>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <HAL_GPIO_Init+0x212>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a17      	ldr	r2, [pc, #92]	; (8004528 <HAL_GPIO_Init+0x264>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <HAL_GPIO_Init+0x20e>
 80044ce:	2309      	movs	r3, #9
 80044d0:	e02d      	b.n	800452e <HAL_GPIO_Init+0x26a>
 80044d2:	230a      	movs	r3, #10
 80044d4:	e02b      	b.n	800452e <HAL_GPIO_Init+0x26a>
 80044d6:	2308      	movs	r3, #8
 80044d8:	e029      	b.n	800452e <HAL_GPIO_Init+0x26a>
 80044da:	2307      	movs	r3, #7
 80044dc:	e027      	b.n	800452e <HAL_GPIO_Init+0x26a>
 80044de:	2306      	movs	r3, #6
 80044e0:	e025      	b.n	800452e <HAL_GPIO_Init+0x26a>
 80044e2:	2305      	movs	r3, #5
 80044e4:	e023      	b.n	800452e <HAL_GPIO_Init+0x26a>
 80044e6:	2304      	movs	r3, #4
 80044e8:	e021      	b.n	800452e <HAL_GPIO_Init+0x26a>
 80044ea:	2303      	movs	r3, #3
 80044ec:	e01f      	b.n	800452e <HAL_GPIO_Init+0x26a>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e01d      	b.n	800452e <HAL_GPIO_Init+0x26a>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e01b      	b.n	800452e <HAL_GPIO_Init+0x26a>
 80044f6:	bf00      	nop
 80044f8:	58000080 	.word	0x58000080
 80044fc:	58024400 	.word	0x58024400
 8004500:	58000400 	.word	0x58000400
 8004504:	58020000 	.word	0x58020000
 8004508:	58020400 	.word	0x58020400
 800450c:	58020800 	.word	0x58020800
 8004510:	58020c00 	.word	0x58020c00
 8004514:	58021000 	.word	0x58021000
 8004518:	58021400 	.word	0x58021400
 800451c:	58021800 	.word	0x58021800
 8004520:	58021c00 	.word	0x58021c00
 8004524:	58022000 	.word	0x58022000
 8004528:	58022400 	.word	0x58022400
 800452c:	2300      	movs	r3, #0
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	f002 0203 	and.w	r2, r2, #3
 8004534:	0092      	lsls	r2, r2, #2
 8004536:	4093      	lsls	r3, r2
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4313      	orrs	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800453e:	4938      	ldr	r1, [pc, #224]	; (8004620 <HAL_GPIO_Init+0x35c>)
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	089b      	lsrs	r3, r3, #2
 8004544:	3302      	adds	r3, #2
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800454c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	43db      	mvns	r3, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4013      	ands	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800457a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	43db      	mvns	r3, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4013      	ands	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80045a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	43db      	mvns	r3, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4013      	ands	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	3301      	adds	r3, #1
 8004600:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	fa22 f303 	lsr.w	r3, r2, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	f47f ae63 	bne.w	80042d8 <HAL_GPIO_Init+0x14>
  }
}
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	3724      	adds	r7, #36	; 0x24
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	58000400 	.word	0x58000400

08004624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	807b      	strh	r3, [r7, #2]
 8004630:	4613      	mov	r3, r2
 8004632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004634:	787b      	ldrb	r3, [r7, #1]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800463a:	887a      	ldrh	r2, [r7, #2]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004640:	e003      	b.n	800464a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004642:	887b      	ldrh	r3, [r7, #2]
 8004644:	041a      	lsls	r2, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	619a      	str	r2, [r3, #24]
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	460b      	mov	r3, r1
 8004660:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004668:	887a      	ldrh	r2, [r7, #2]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4013      	ands	r3, r2
 800466e:	041a      	lsls	r2, r3, #16
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	43d9      	mvns	r1, r3
 8004674:	887b      	ldrh	r3, [r7, #2]
 8004676:	400b      	ands	r3, r1
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	619a      	str	r2, [r3, #24]
}
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004694:	4b29      	ldr	r3, [pc, #164]	; (800473c <HAL_PWREx_ConfigSupply+0xb0>)
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	2b06      	cmp	r3, #6
 800469e:	d00a      	beq.n	80046b6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80046a0:	4b26      	ldr	r3, [pc, #152]	; (800473c <HAL_PWREx_ConfigSupply+0xb0>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d001      	beq.n	80046b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e040      	b.n	8004734 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e03e      	b.n	8004734 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046b6:	4b21      	ldr	r3, [pc, #132]	; (800473c <HAL_PWREx_ConfigSupply+0xb0>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80046be:	491f      	ldr	r1, [pc, #124]	; (800473c <HAL_PWREx_ConfigSupply+0xb0>)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046c6:	f7fe fc9d 	bl	8003004 <HAL_GetTick>
 80046ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046cc:	e009      	b.n	80046e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046ce:	f7fe fc99 	bl	8003004 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046dc:	d901      	bls.n	80046e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e028      	b.n	8004734 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046e2:	4b16      	ldr	r3, [pc, #88]	; (800473c <HAL_PWREx_ConfigSupply+0xb0>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ee:	d1ee      	bne.n	80046ce <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b1e      	cmp	r3, #30
 80046f4:	d008      	beq.n	8004708 <HAL_PWREx_ConfigSupply+0x7c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b2e      	cmp	r3, #46	; 0x2e
 80046fa:	d005      	beq.n	8004708 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b1d      	cmp	r3, #29
 8004700:	d002      	beq.n	8004708 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b2d      	cmp	r3, #45	; 0x2d
 8004706:	d114      	bne.n	8004732 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004708:	f7fe fc7c 	bl	8003004 <HAL_GetTick>
 800470c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800470e:	e009      	b.n	8004724 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004710:	f7fe fc78 	bl	8003004 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800471e:	d901      	bls.n	8004724 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e007      	b.n	8004734 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_PWREx_ConfigSupply+0xb0>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004730:	d1ee      	bne.n	8004710 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	58024800 	.word	0x58024800

08004740 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08c      	sub	sp, #48	; 0x30
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f000 bc1f 	b.w	8004f92 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80b3 	beq.w	80048c8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004762:	4b95      	ldr	r3, [pc, #596]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800476a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800476c:	4b92      	ldr	r3, [pc, #584]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004774:	2b10      	cmp	r3, #16
 8004776:	d007      	beq.n	8004788 <HAL_RCC_OscConfig+0x48>
 8004778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477a:	2b18      	cmp	r3, #24
 800477c:	d112      	bne.n	80047a4 <HAL_RCC_OscConfig+0x64>
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d10d      	bne.n	80047a4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004788:	4b8b      	ldr	r3, [pc, #556]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8098 	beq.w	80048c6 <HAL_RCC_OscConfig+0x186>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f040 8093 	bne.w	80048c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e3f6      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ac:	d106      	bne.n	80047bc <HAL_RCC_OscConfig+0x7c>
 80047ae:	4b82      	ldr	r3, [pc, #520]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a81      	ldr	r2, [pc, #516]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80047b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e058      	b.n	800486e <HAL_RCC_OscConfig+0x12e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d112      	bne.n	80047ea <HAL_RCC_OscConfig+0xaa>
 80047c4:	4b7c      	ldr	r3, [pc, #496]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a7b      	ldr	r2, [pc, #492]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80047ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	4b79      	ldr	r3, [pc, #484]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a78      	ldr	r2, [pc, #480]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80047d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	4b76      	ldr	r3, [pc, #472]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a75      	ldr	r2, [pc, #468]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80047e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	e041      	b.n	800486e <HAL_RCC_OscConfig+0x12e>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f2:	d112      	bne.n	800481a <HAL_RCC_OscConfig+0xda>
 80047f4:	4b70      	ldr	r3, [pc, #448]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a6f      	ldr	r2, [pc, #444]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80047fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	4b6d      	ldr	r3, [pc, #436]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a6c      	ldr	r2, [pc, #432]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004806:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	4b6a      	ldr	r3, [pc, #424]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a69      	ldr	r2, [pc, #420]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004816:	6013      	str	r3, [r2, #0]
 8004818:	e029      	b.n	800486e <HAL_RCC_OscConfig+0x12e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004822:	d112      	bne.n	800484a <HAL_RCC_OscConfig+0x10a>
 8004824:	4b64      	ldr	r3, [pc, #400]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a63      	ldr	r2, [pc, #396]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 800482a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	4b61      	ldr	r3, [pc, #388]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a60      	ldr	r2, [pc, #384]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	4b5e      	ldr	r3, [pc, #376]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a5d      	ldr	r2, [pc, #372]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	e011      	b.n	800486e <HAL_RCC_OscConfig+0x12e>
 800484a:	4b5b      	ldr	r3, [pc, #364]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a5a      	ldr	r2, [pc, #360]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	4b58      	ldr	r3, [pc, #352]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a57      	ldr	r2, [pc, #348]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 800485c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	4b55      	ldr	r3, [pc, #340]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a54      	ldr	r2, [pc, #336]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004868:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800486c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d013      	beq.n	800489e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004876:	f7fe fbc5 	bl	8003004 <HAL_GetTick>
 800487a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800487e:	f7fe fbc1 	bl	8003004 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b64      	cmp	r3, #100	; 0x64
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e380      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004890:	4b49      	ldr	r3, [pc, #292]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0f0      	beq.n	800487e <HAL_RCC_OscConfig+0x13e>
 800489c:	e014      	b.n	80048c8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489e:	f7fe fbb1 	bl	8003004 <HAL_GetTick>
 80048a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a6:	f7fe fbad 	bl	8003004 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b64      	cmp	r3, #100	; 0x64
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e36c      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048b8:	4b3f      	ldr	r3, [pc, #252]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f0      	bne.n	80048a6 <HAL_RCC_OscConfig+0x166>
 80048c4:	e000      	b.n	80048c8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 808c 	beq.w	80049ee <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d6:	4b38      	ldr	r3, [pc, #224]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048de:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048e0:	4b35      	ldr	r3, [pc, #212]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <HAL_RCC_OscConfig+0x1bc>
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	2b18      	cmp	r3, #24
 80048f0:	d137      	bne.n	8004962 <HAL_RCC_OscConfig+0x222>
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d132      	bne.n	8004962 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048fc:	4b2e      	ldr	r3, [pc, #184]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_OscConfig+0x1d4>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e33e      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004914:	4b28      	ldr	r3, [pc, #160]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 0219 	bic.w	r2, r3, #25
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4925      	ldr	r1, [pc, #148]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004922:	4313      	orrs	r3, r2
 8004924:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004926:	f7fe fb6d 	bl	8003004 <HAL_GetTick>
 800492a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800492e:	f7fe fb69 	bl	8003004 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e328      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004940:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494c:	4b1a      	ldr	r3, [pc, #104]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	061b      	lsls	r3, r3, #24
 800495a:	4917      	ldr	r1, [pc, #92]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 800495c:	4313      	orrs	r3, r2
 800495e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004960:	e045      	b.n	80049ee <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d028      	beq.n	80049bc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800496a:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 0219 	bic.w	r2, r3, #25
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	4910      	ldr	r1, [pc, #64]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004978:	4313      	orrs	r3, r2
 800497a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fe fb42 	bl	8003004 <HAL_GetTick>
 8004980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004984:	f7fe fb3e 	bl	8003004 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e2fd      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004996:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a2:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	061b      	lsls	r3, r3, #24
 80049b0:	4901      	ldr	r1, [pc, #4]	; (80049b8 <HAL_RCC_OscConfig+0x278>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	604b      	str	r3, [r1, #4]
 80049b6:	e01a      	b.n	80049ee <HAL_RCC_OscConfig+0x2ae>
 80049b8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049bc:	4b97      	ldr	r3, [pc, #604]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a96      	ldr	r2, [pc, #600]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fe fb1c 	bl	8003004 <HAL_GetTick>
 80049cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d0:	f7fe fb18 	bl	8003004 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e2d7      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049e2:	4b8e      	ldr	r3, [pc, #568]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0310 	and.w	r3, r3, #16
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d06a      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049fa:	4b88      	ldr	r3, [pc, #544]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a04:	4b85      	ldr	r3, [pc, #532]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d007      	beq.n	8004a20 <HAL_RCC_OscConfig+0x2e0>
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b18      	cmp	r3, #24
 8004a14:	d11b      	bne.n	8004a4e <HAL_RCC_OscConfig+0x30e>
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f003 0303 	and.w	r3, r3, #3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d116      	bne.n	8004a4e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a20:	4b7e      	ldr	r3, [pc, #504]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_RCC_OscConfig+0x2f8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	2b80      	cmp	r3, #128	; 0x80
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e2ac      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a38:	4b78      	ldr	r3, [pc, #480]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	061b      	lsls	r3, r3, #24
 8004a46:	4975      	ldr	r1, [pc, #468]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a4c:	e040      	b.n	8004ad0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d023      	beq.n	8004a9e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a56:	4b71      	ldr	r3, [pc, #452]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a70      	ldr	r2, [pc, #448]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a62:	f7fe facf 	bl	8003004 <HAL_GetTick>
 8004a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a6a:	f7fe facb 	bl	8003004 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e28a      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a7c:	4b67      	ldr	r3, [pc, #412]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0f0      	beq.n	8004a6a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a88:	4b64      	ldr	r3, [pc, #400]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	061b      	lsls	r3, r3, #24
 8004a96:	4961      	ldr	r1, [pc, #388]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60cb      	str	r3, [r1, #12]
 8004a9c:	e018      	b.n	8004ad0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a9e:	4b5f      	ldr	r3, [pc, #380]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a5e      	ldr	r2, [pc, #376]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aaa:	f7fe faab 	bl	8003004 <HAL_GetTick>
 8004aae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ab2:	f7fe faa7 	bl	8003004 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e266      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ac4:	4b55      	ldr	r3, [pc, #340]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f0      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d036      	beq.n	8004b4a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d019      	beq.n	8004b18 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ae4:	4b4d      	ldr	r3, [pc, #308]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae8:	4a4c      	ldr	r2, [pc, #304]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af0:	f7fe fa88 	bl	8003004 <HAL_GetTick>
 8004af4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004af8:	f7fe fa84 	bl	8003004 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e243      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b0a:	4b44      	ldr	r3, [pc, #272]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x3b8>
 8004b16:	e018      	b.n	8004b4a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b18:	4b40      	ldr	r3, [pc, #256]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1c:	4a3f      	ldr	r2, [pc, #252]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b24:	f7fe fa6e 	bl	8003004 <HAL_GetTick>
 8004b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b2c:	f7fe fa6a 	bl	8003004 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e229      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b3e:	4b37      	ldr	r3, [pc, #220]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d036      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d019      	beq.n	8004b92 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b5e:	4b2f      	ldr	r3, [pc, #188]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a2e      	ldr	r2, [pc, #184]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004b64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b6a:	f7fe fa4b 	bl	8003004 <HAL_GetTick>
 8004b6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b72:	f7fe fa47 	bl	8003004 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e206      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b84:	4b25      	ldr	r3, [pc, #148]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCC_OscConfig+0x432>
 8004b90:	e018      	b.n	8004bc4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b92:	4b22      	ldr	r3, [pc, #136]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a21      	ldr	r2, [pc, #132]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b9e:	f7fe fa31 	bl	8003004 <HAL_GetTick>
 8004ba2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ba6:	f7fe fa2d 	bl	8003004 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e1ec      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bb8:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f0      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80af 	beq.w	8004d30 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bd2:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <HAL_RCC_OscConfig+0x4e0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a12      	ldr	r2, [pc, #72]	; (8004c20 <HAL_RCC_OscConfig+0x4e0>)
 8004bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bde:	f7fe fa11 	bl	8003004 <HAL_GetTick>
 8004be2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be6:	f7fe fa0d 	bl	8003004 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b64      	cmp	r3, #100	; 0x64
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e1cc      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bf8:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <HAL_RCC_OscConfig+0x4e0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0f0      	beq.n	8004be6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d10b      	bne.n	8004c24 <HAL_RCC_OscConfig+0x4e4>
 8004c0c:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c10:	4a02      	ldr	r2, [pc, #8]	; (8004c1c <HAL_RCC_OscConfig+0x4dc>)
 8004c12:	f043 0301 	orr.w	r3, r3, #1
 8004c16:	6713      	str	r3, [r2, #112]	; 0x70
 8004c18:	e05b      	b.n	8004cd2 <HAL_RCC_OscConfig+0x592>
 8004c1a:	bf00      	nop
 8004c1c:	58024400 	.word	0x58024400
 8004c20:	58024800 	.word	0x58024800
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d112      	bne.n	8004c52 <HAL_RCC_OscConfig+0x512>
 8004c2c:	4b9d      	ldr	r3, [pc, #628]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	4a9c      	ldr	r2, [pc, #624]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c32:	f023 0301 	bic.w	r3, r3, #1
 8004c36:	6713      	str	r3, [r2, #112]	; 0x70
 8004c38:	4b9a      	ldr	r3, [pc, #616]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	4a99      	ldr	r2, [pc, #612]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c42:	6713      	str	r3, [r2, #112]	; 0x70
 8004c44:	4b97      	ldr	r3, [pc, #604]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	4a96      	ldr	r2, [pc, #600]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c4a:	f023 0304 	bic.w	r3, r3, #4
 8004c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c50:	e03f      	b.n	8004cd2 <HAL_RCC_OscConfig+0x592>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b05      	cmp	r3, #5
 8004c58:	d112      	bne.n	8004c80 <HAL_RCC_OscConfig+0x540>
 8004c5a:	4b92      	ldr	r3, [pc, #584]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	4a91      	ldr	r2, [pc, #580]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c60:	f043 0304 	orr.w	r3, r3, #4
 8004c64:	6713      	str	r3, [r2, #112]	; 0x70
 8004c66:	4b8f      	ldr	r3, [pc, #572]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	4a8e      	ldr	r2, [pc, #568]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c70:	6713      	str	r3, [r2, #112]	; 0x70
 8004c72:	4b8c      	ldr	r3, [pc, #560]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	4a8b      	ldr	r2, [pc, #556]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c7e:	e028      	b.n	8004cd2 <HAL_RCC_OscConfig+0x592>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b85      	cmp	r3, #133	; 0x85
 8004c86:	d112      	bne.n	8004cae <HAL_RCC_OscConfig+0x56e>
 8004c88:	4b86      	ldr	r3, [pc, #536]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8c:	4a85      	ldr	r2, [pc, #532]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c8e:	f043 0304 	orr.w	r3, r3, #4
 8004c92:	6713      	str	r3, [r2, #112]	; 0x70
 8004c94:	4b83      	ldr	r3, [pc, #524]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	4a82      	ldr	r2, [pc, #520]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca0:	4b80      	ldr	r3, [pc, #512]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	4a7f      	ldr	r2, [pc, #508]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	6713      	str	r3, [r2, #112]	; 0x70
 8004cac:	e011      	b.n	8004cd2 <HAL_RCC_OscConfig+0x592>
 8004cae:	4b7d      	ldr	r3, [pc, #500]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb2:	4a7c      	ldr	r2, [pc, #496]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004cba:	4b7a      	ldr	r3, [pc, #488]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	4a79      	ldr	r2, [pc, #484]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004cc0:	f023 0304 	bic.w	r3, r3, #4
 8004cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc6:	4b77      	ldr	r3, [pc, #476]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cca:	4a76      	ldr	r2, [pc, #472]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d015      	beq.n	8004d06 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cda:	f7fe f993 	bl	8003004 <HAL_GetTick>
 8004cde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce2:	f7fe f98f 	bl	8003004 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e14c      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cf8:	4b6a      	ldr	r3, [pc, #424]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0ee      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x5a2>
 8004d04:	e014      	b.n	8004d30 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d06:	f7fe f97d 	bl	8003004 <HAL_GetTick>
 8004d0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0e:	f7fe f979 	bl	8003004 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e136      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d24:	4b5f      	ldr	r3, [pc, #380]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1ee      	bne.n	8004d0e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 812b 	beq.w	8004f90 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d3a:	4b5a      	ldr	r3, [pc, #360]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d42:	2b18      	cmp	r3, #24
 8004d44:	f000 80bb 	beq.w	8004ebe <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	f040 8095 	bne.w	8004e7c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d52:	4b54      	ldr	r3, [pc, #336]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a53      	ldr	r2, [pc, #332]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004d58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5e:	f7fe f951 	bl	8003004 <HAL_GetTick>
 8004d62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d66:	f7fe f94d 	bl	8003004 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e10c      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d78:	4b4a      	ldr	r3, [pc, #296]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f0      	bne.n	8004d66 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d84:	4b47      	ldr	r3, [pc, #284]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d88:	4b47      	ldr	r3, [pc, #284]	; (8004ea8 <HAL_RCC_OscConfig+0x768>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d94:	0112      	lsls	r2, r2, #4
 8004d96:	430a      	orrs	r2, r1
 8004d98:	4942      	ldr	r1, [pc, #264]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	628b      	str	r3, [r1, #40]	; 0x28
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	3b01      	subs	r3, #1
 8004da4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dac:	3b01      	subs	r3, #1
 8004dae:	025b      	lsls	r3, r3, #9
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	3b01      	subs	r3, #1
 8004dba:	041b      	lsls	r3, r3, #16
 8004dbc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	061b      	lsls	r3, r3, #24
 8004dca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004dce:	4935      	ldr	r1, [pc, #212]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004dd4:	4b33      	ldr	r3, [pc, #204]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	4a32      	ldr	r2, [pc, #200]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004dda:	f023 0301 	bic.w	r3, r3, #1
 8004dde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004de0:	4b30      	ldr	r3, [pc, #192]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de4:	4b31      	ldr	r3, [pc, #196]	; (8004eac <HAL_RCC_OscConfig+0x76c>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004dec:	00d2      	lsls	r2, r2, #3
 8004dee:	492d      	ldr	r1, [pc, #180]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004df4:	4b2b      	ldr	r3, [pc, #172]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	f023 020c 	bic.w	r2, r3, #12
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	4928      	ldr	r1, [pc, #160]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e06:	4b27      	ldr	r3, [pc, #156]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	f023 0202 	bic.w	r2, r3, #2
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	4924      	ldr	r1, [pc, #144]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e18:	4b22      	ldr	r3, [pc, #136]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e24:	4b1f      	ldr	r3, [pc, #124]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	4a1e      	ldr	r2, [pc, #120]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e30:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	4a1b      	ldr	r2, [pc, #108]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004e3c:	4b19      	ldr	r3, [pc, #100]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	4a18      	ldr	r2, [pc, #96]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e42:	f043 0301 	orr.w	r3, r3, #1
 8004e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e48:	4b16      	ldr	r3, [pc, #88]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a15      	ldr	r2, [pc, #84]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e54:	f7fe f8d6 	bl	8003004 <HAL_GetTick>
 8004e58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fe f8d2 	bl	8003004 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e091      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x71c>
 8004e7a:	e089      	b.n	8004f90 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a08      	ldr	r2, [pc, #32]	; (8004ea4 <HAL_RCC_OscConfig+0x764>)
 8004e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7fe f8bc 	bl	8003004 <HAL_GetTick>
 8004e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e8e:	e00f      	b.n	8004eb0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e90:	f7fe f8b8 	bl	8003004 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d908      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e077      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
 8004ea2:	bf00      	nop
 8004ea4:	58024400 	.word	0x58024400
 8004ea8:	fffffc0c 	.word	0xfffffc0c
 8004eac:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eb0:	4b3a      	ldr	r3, [pc, #232]	; (8004f9c <HAL_RCC_OscConfig+0x85c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e9      	bne.n	8004e90 <HAL_RCC_OscConfig+0x750>
 8004ebc:	e068      	b.n	8004f90 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ebe:	4b37      	ldr	r3, [pc, #220]	; (8004f9c <HAL_RCC_OscConfig+0x85c>)
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ec4:	4b35      	ldr	r3, [pc, #212]	; (8004f9c <HAL_RCC_OscConfig+0x85c>)
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d031      	beq.n	8004f36 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f003 0203 	and.w	r2, r3, #3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d12a      	bne.n	8004f36 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	091b      	lsrs	r3, r3, #4
 8004ee4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d122      	bne.n	8004f36 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d11a      	bne.n	8004f36 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	0a5b      	lsrs	r3, r3, #9
 8004f04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d111      	bne.n	8004f36 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	0c1b      	lsrs	r3, r3, #16
 8004f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d108      	bne.n	8004f36 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	0e1b      	lsrs	r3, r3, #24
 8004f28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f30:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d001      	beq.n	8004f3a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e02b      	b.n	8004f92 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f3a:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <HAL_RCC_OscConfig+0x85c>)
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	08db      	lsrs	r3, r3, #3
 8004f40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f44:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d01f      	beq.n	8004f90 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004f50:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <HAL_RCC_OscConfig+0x85c>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	4a11      	ldr	r2, [pc, #68]	; (8004f9c <HAL_RCC_OscConfig+0x85c>)
 8004f56:	f023 0301 	bic.w	r3, r3, #1
 8004f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f5c:	f7fe f852 	bl	8003004 <HAL_GetTick>
 8004f60:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004f62:	bf00      	nop
 8004f64:	f7fe f84e 	bl	8003004 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d0f9      	beq.n	8004f64 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f70:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <HAL_RCC_OscConfig+0x85c>)
 8004f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f74:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <HAL_RCC_OscConfig+0x860>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f7c:	00d2      	lsls	r2, r2, #3
 8004f7e:	4907      	ldr	r1, [pc, #28]	; (8004f9c <HAL_RCC_OscConfig+0x85c>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <HAL_RCC_OscConfig+0x85c>)
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <HAL_RCC_OscConfig+0x85c>)
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3730      	adds	r7, #48	; 0x30
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	58024400 	.word	0x58024400
 8004fa0:	ffff0007 	.word	0xffff0007

08004fa4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e19c      	b.n	80052f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b8a      	ldr	r3, [pc, #552]	; (80051e4 <HAL_RCC_ClockConfig+0x240>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d910      	bls.n	8004fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4b87      	ldr	r3, [pc, #540]	; (80051e4 <HAL_RCC_ClockConfig+0x240>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f023 020f 	bic.w	r2, r3, #15
 8004fce:	4985      	ldr	r1, [pc, #532]	; (80051e4 <HAL_RCC_ClockConfig+0x240>)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b83      	ldr	r3, [pc, #524]	; (80051e4 <HAL_RCC_ClockConfig+0x240>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e184      	b.n	80052f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d010      	beq.n	8005016 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	4b7b      	ldr	r3, [pc, #492]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005000:	429a      	cmp	r2, r3
 8005002:	d908      	bls.n	8005016 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005004:	4b78      	ldr	r3, [pc, #480]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	4975      	ldr	r1, [pc, #468]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005012:	4313      	orrs	r3, r2
 8005014:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d010      	beq.n	8005044 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695a      	ldr	r2, [r3, #20]
 8005026:	4b70      	ldr	r3, [pc, #448]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800502e:	429a      	cmp	r2, r3
 8005030:	d908      	bls.n	8005044 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005032:	4b6d      	ldr	r3, [pc, #436]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	496a      	ldr	r1, [pc, #424]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005040:	4313      	orrs	r3, r2
 8005042:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	d010      	beq.n	8005072 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	4b64      	ldr	r3, [pc, #400]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800505c:	429a      	cmp	r2, r3
 800505e:	d908      	bls.n	8005072 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005060:	4b61      	ldr	r3, [pc, #388]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	495e      	ldr	r1, [pc, #376]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 800506e:	4313      	orrs	r3, r2
 8005070:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d010      	beq.n	80050a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69da      	ldr	r2, [r3, #28]
 8005082:	4b59      	ldr	r3, [pc, #356]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800508a:	429a      	cmp	r2, r3
 800508c:	d908      	bls.n	80050a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800508e:	4b56      	ldr	r3, [pc, #344]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	4953      	ldr	r1, [pc, #332]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 800509c:	4313      	orrs	r3, r2
 800509e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d010      	beq.n	80050ce <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	4b4d      	ldr	r3, [pc, #308]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d908      	bls.n	80050ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050bc:	4b4a      	ldr	r3, [pc, #296]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	f023 020f 	bic.w	r2, r3, #15
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4947      	ldr	r1, [pc, #284]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d055      	beq.n	8005186 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80050da:	4b43      	ldr	r3, [pc, #268]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	4940      	ldr	r1, [pc, #256]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d107      	bne.n	8005104 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050f4:	4b3c      	ldr	r3, [pc, #240]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d121      	bne.n	8005144 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e0f6      	b.n	80052f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b03      	cmp	r3, #3
 800510a:	d107      	bne.n	800511c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800510c:	4b36      	ldr	r3, [pc, #216]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d115      	bne.n	8005144 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e0ea      	b.n	80052f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d107      	bne.n	8005134 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005124:	4b30      	ldr	r3, [pc, #192]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512c:	2b00      	cmp	r3, #0
 800512e:	d109      	bne.n	8005144 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0de      	b.n	80052f2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005134:	4b2c      	ldr	r3, [pc, #176]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0d6      	b.n	80052f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005144:	4b28      	ldr	r3, [pc, #160]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f023 0207 	bic.w	r2, r3, #7
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	4925      	ldr	r1, [pc, #148]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005152:	4313      	orrs	r3, r2
 8005154:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005156:	f7fd ff55 	bl	8003004 <HAL_GetTick>
 800515a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515c:	e00a      	b.n	8005174 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515e:	f7fd ff51 	bl	8003004 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f241 3288 	movw	r2, #5000	; 0x1388
 800516c:	4293      	cmp	r3, r2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e0be      	b.n	80052f2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005174:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	429a      	cmp	r2, r3
 8005184:	d1eb      	bne.n	800515e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d010      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	429a      	cmp	r2, r3
 80051a0:	d208      	bcs.n	80051b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a2:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f023 020f 	bic.w	r2, r3, #15
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	490e      	ldr	r1, [pc, #56]	; (80051e8 <HAL_RCC_ClockConfig+0x244>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051b4:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <HAL_RCC_ClockConfig+0x240>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d214      	bcs.n	80051ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c2:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <HAL_RCC_ClockConfig+0x240>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f023 020f 	bic.w	r2, r3, #15
 80051ca:	4906      	ldr	r1, [pc, #24]	; (80051e4 <HAL_RCC_ClockConfig+0x240>)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d2:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <HAL_RCC_ClockConfig+0x240>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d005      	beq.n	80051ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e086      	b.n	80052f2 <HAL_RCC_ClockConfig+0x34e>
 80051e4:	52002000 	.word	0x52002000
 80051e8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d010      	beq.n	800521a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	4b3f      	ldr	r3, [pc, #252]	; (80052fc <HAL_RCC_ClockConfig+0x358>)
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005204:	429a      	cmp	r2, r3
 8005206:	d208      	bcs.n	800521a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005208:	4b3c      	ldr	r3, [pc, #240]	; (80052fc <HAL_RCC_ClockConfig+0x358>)
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	4939      	ldr	r1, [pc, #228]	; (80052fc <HAL_RCC_ClockConfig+0x358>)
 8005216:	4313      	orrs	r3, r2
 8005218:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d010      	beq.n	8005248 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695a      	ldr	r2, [r3, #20]
 800522a:	4b34      	ldr	r3, [pc, #208]	; (80052fc <HAL_RCC_ClockConfig+0x358>)
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005232:	429a      	cmp	r2, r3
 8005234:	d208      	bcs.n	8005248 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005236:	4b31      	ldr	r3, [pc, #196]	; (80052fc <HAL_RCC_ClockConfig+0x358>)
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	492e      	ldr	r1, [pc, #184]	; (80052fc <HAL_RCC_ClockConfig+0x358>)
 8005244:	4313      	orrs	r3, r2
 8005246:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b00      	cmp	r3, #0
 8005252:	d010      	beq.n	8005276 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699a      	ldr	r2, [r3, #24]
 8005258:	4b28      	ldr	r3, [pc, #160]	; (80052fc <HAL_RCC_ClockConfig+0x358>)
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005260:	429a      	cmp	r2, r3
 8005262:	d208      	bcs.n	8005276 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005264:	4b25      	ldr	r3, [pc, #148]	; (80052fc <HAL_RCC_ClockConfig+0x358>)
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	4922      	ldr	r1, [pc, #136]	; (80052fc <HAL_RCC_ClockConfig+0x358>)
 8005272:	4313      	orrs	r3, r2
 8005274:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d010      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69da      	ldr	r2, [r3, #28]
 8005286:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <HAL_RCC_ClockConfig+0x358>)
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800528e:	429a      	cmp	r2, r3
 8005290:	d208      	bcs.n	80052a4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005292:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <HAL_RCC_ClockConfig+0x358>)
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	4917      	ldr	r1, [pc, #92]	; (80052fc <HAL_RCC_ClockConfig+0x358>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80052a4:	f000 f834 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 80052a8:	4602      	mov	r2, r0
 80052aa:	4b14      	ldr	r3, [pc, #80]	; (80052fc <HAL_RCC_ClockConfig+0x358>)
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	0a1b      	lsrs	r3, r3, #8
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	4912      	ldr	r1, [pc, #72]	; (8005300 <HAL_RCC_ClockConfig+0x35c>)
 80052b6:	5ccb      	ldrb	r3, [r1, r3]
 80052b8:	f003 031f 	and.w	r3, r3, #31
 80052bc:	fa22 f303 	lsr.w	r3, r2, r3
 80052c0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80052c2:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <HAL_RCC_ClockConfig+0x358>)
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	4a0d      	ldr	r2, [pc, #52]	; (8005300 <HAL_RCC_ClockConfig+0x35c>)
 80052cc:	5cd3      	ldrb	r3, [r2, r3]
 80052ce:	f003 031f 	and.w	r3, r3, #31
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
 80052d8:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <HAL_RCC_ClockConfig+0x360>)
 80052da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052dc:	4a0a      	ldr	r2, [pc, #40]	; (8005308 <HAL_RCC_ClockConfig+0x364>)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80052e2:	4b0a      	ldr	r3, [pc, #40]	; (800530c <HAL_RCC_ClockConfig+0x368>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fd fe42 	bl	8002f70 <HAL_InitTick>
 80052ec:	4603      	mov	r3, r0
 80052ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	58024400 	.word	0x58024400
 8005300:	08009e2c 	.word	0x08009e2c
 8005304:	240000a4 	.word	0x240000a4
 8005308:	240000a0 	.word	0x240000a0
 800530c:	240000a8 	.word	0x240000a8

08005310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005310:	b480      	push	{r7}
 8005312:	b089      	sub	sp, #36	; 0x24
 8005314:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005316:	4bb3      	ldr	r3, [pc, #716]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800531e:	2b18      	cmp	r3, #24
 8005320:	f200 8155 	bhi.w	80055ce <HAL_RCC_GetSysClockFreq+0x2be>
 8005324:	a201      	add	r2, pc, #4	; (adr r2, 800532c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532a:	bf00      	nop
 800532c:	08005391 	.word	0x08005391
 8005330:	080055cf 	.word	0x080055cf
 8005334:	080055cf 	.word	0x080055cf
 8005338:	080055cf 	.word	0x080055cf
 800533c:	080055cf 	.word	0x080055cf
 8005340:	080055cf 	.word	0x080055cf
 8005344:	080055cf 	.word	0x080055cf
 8005348:	080055cf 	.word	0x080055cf
 800534c:	080053b7 	.word	0x080053b7
 8005350:	080055cf 	.word	0x080055cf
 8005354:	080055cf 	.word	0x080055cf
 8005358:	080055cf 	.word	0x080055cf
 800535c:	080055cf 	.word	0x080055cf
 8005360:	080055cf 	.word	0x080055cf
 8005364:	080055cf 	.word	0x080055cf
 8005368:	080055cf 	.word	0x080055cf
 800536c:	080053bd 	.word	0x080053bd
 8005370:	080055cf 	.word	0x080055cf
 8005374:	080055cf 	.word	0x080055cf
 8005378:	080055cf 	.word	0x080055cf
 800537c:	080055cf 	.word	0x080055cf
 8005380:	080055cf 	.word	0x080055cf
 8005384:	080055cf 	.word	0x080055cf
 8005388:	080055cf 	.word	0x080055cf
 800538c:	080053c3 	.word	0x080053c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005390:	4b94      	ldr	r3, [pc, #592]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b00      	cmp	r3, #0
 800539a:	d009      	beq.n	80053b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800539c:	4b91      	ldr	r3, [pc, #580]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	08db      	lsrs	r3, r3, #3
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	4a90      	ldr	r2, [pc, #576]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
 80053ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80053ae:	e111      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80053b0:	4b8d      	ldr	r3, [pc, #564]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053b2:	61bb      	str	r3, [r7, #24]
      break;
 80053b4:	e10e      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80053b6:	4b8d      	ldr	r3, [pc, #564]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053b8:	61bb      	str	r3, [r7, #24]
      break;
 80053ba:	e10b      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80053bc:	4b8c      	ldr	r3, [pc, #560]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80053be:	61bb      	str	r3, [r7, #24]
      break;
 80053c0:	e108      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053c2:	4b88      	ldr	r3, [pc, #544]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80053cc:	4b85      	ldr	r3, [pc, #532]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	091b      	lsrs	r3, r3, #4
 80053d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053d6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80053d8:	4b82      	ldr	r3, [pc, #520]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80053e2:	4b80      	ldr	r3, [pc, #512]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e6:	08db      	lsrs	r3, r3, #3
 80053e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80e1 	beq.w	80055c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b02      	cmp	r3, #2
 800540a:	f000 8083 	beq.w	8005514 <HAL_RCC_GetSysClockFreq+0x204>
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b02      	cmp	r3, #2
 8005412:	f200 80a1 	bhi.w	8005558 <HAL_RCC_GetSysClockFreq+0x248>
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0x114>
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d056      	beq.n	80054d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005422:	e099      	b.n	8005558 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005424:	4b6f      	ldr	r3, [pc, #444]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	d02d      	beq.n	800548c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005430:	4b6c      	ldr	r3, [pc, #432]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	08db      	lsrs	r3, r3, #3
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	4a6b      	ldr	r2, [pc, #428]	; (80055e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
 8005440:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	ee07 3a90 	vmov	s15, r3
 8005448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545a:	4b62      	ldr	r3, [pc, #392]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546a:	ed97 6a02 	vldr	s12, [r7, #8]
 800546e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80055f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800547e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005486:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800548a:	e087      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	eddf 6a58 	vldr	s13, [pc, #352]	; 80055f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800549a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549e:	4b51      	ldr	r3, [pc, #324]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80054b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80055f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054ce:	e065      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80055fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80054de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e2:	4b40      	ldr	r3, [pc, #256]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80054f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80055f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800550a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005512:	e043      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	ee07 3a90 	vmov	s15, r3
 800551a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005600 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005526:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005536:	ed97 6a02 	vldr	s12, [r7, #8]
 800553a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80055f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800553e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800554a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005552:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005556:	e021      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005562:	eddf 6a26 	vldr	s13, [pc, #152]	; 80055fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800556a:	4b1e      	ldr	r3, [pc, #120]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557a:	ed97 6a02 	vldr	s12, [r7, #8]
 800557e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80055f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800558a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800558e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005596:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800559a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800559c:	4b11      	ldr	r3, [pc, #68]	; (80055e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	0a5b      	lsrs	r3, r3, #9
 80055a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055a6:	3301      	adds	r3, #1
 80055a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80055b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055c0:	ee17 3a90 	vmov	r3, s15
 80055c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80055c6:	e005      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	61bb      	str	r3, [r7, #24]
      break;
 80055cc:	e002      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80055ce:	4b07      	ldr	r3, [pc, #28]	; (80055ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80055d0:	61bb      	str	r3, [r7, #24]
      break;
 80055d2:	bf00      	nop
  }

  return sysclockfreq;
 80055d4:	69bb      	ldr	r3, [r7, #24]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3724      	adds	r7, #36	; 0x24
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	58024400 	.word	0x58024400
 80055e8:	03d09000 	.word	0x03d09000
 80055ec:	003d0900 	.word	0x003d0900
 80055f0:	007a1200 	.word	0x007a1200
 80055f4:	46000000 	.word	0x46000000
 80055f8:	4c742400 	.word	0x4c742400
 80055fc:	4a742400 	.word	0x4a742400
 8005600:	4af42400 	.word	0x4af42400

08005604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800560a:	f7ff fe81 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 800560e:	4602      	mov	r2, r0
 8005610:	4b10      	ldr	r3, [pc, #64]	; (8005654 <HAL_RCC_GetHCLKFreq+0x50>)
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	0a1b      	lsrs	r3, r3, #8
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	490f      	ldr	r1, [pc, #60]	; (8005658 <HAL_RCC_GetHCLKFreq+0x54>)
 800561c:	5ccb      	ldrb	r3, [r1, r3]
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	fa22 f303 	lsr.w	r3, r2, r3
 8005626:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005628:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <HAL_RCC_GetHCLKFreq+0x50>)
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	4a09      	ldr	r2, [pc, #36]	; (8005658 <HAL_RCC_GetHCLKFreq+0x54>)
 8005632:	5cd3      	ldrb	r3, [r2, r3]
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	fa22 f303 	lsr.w	r3, r2, r3
 800563e:	4a07      	ldr	r2, [pc, #28]	; (800565c <HAL_RCC_GetHCLKFreq+0x58>)
 8005640:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005642:	4a07      	ldr	r2, [pc, #28]	; (8005660 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005648:	4b04      	ldr	r3, [pc, #16]	; (800565c <HAL_RCC_GetHCLKFreq+0x58>)
 800564a:	681b      	ldr	r3, [r3, #0]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	58024400 	.word	0x58024400
 8005658:	08009e2c 	.word	0x08009e2c
 800565c:	240000a4 	.word	0x240000a4
 8005660:	240000a0 	.word	0x240000a0

08005664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005668:	f7ff ffcc 	bl	8005604 <HAL_RCC_GetHCLKFreq>
 800566c:	4602      	mov	r2, r0
 800566e:	4b06      	ldr	r3, [pc, #24]	; (8005688 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	4904      	ldr	r1, [pc, #16]	; (800568c <HAL_RCC_GetPCLK1Freq+0x28>)
 800567a:	5ccb      	ldrb	r3, [r1, r3]
 800567c:	f003 031f 	and.w	r3, r3, #31
 8005680:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005684:	4618      	mov	r0, r3
 8005686:	bd80      	pop	{r7, pc}
 8005688:	58024400 	.word	0x58024400
 800568c:	08009e2c 	.word	0x08009e2c

08005690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005694:	f7ff ffb6 	bl	8005604 <HAL_RCC_GetHCLKFreq>
 8005698:	4602      	mov	r2, r0
 800569a:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	0a1b      	lsrs	r3, r3, #8
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	4904      	ldr	r1, [pc, #16]	; (80056b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056a6:	5ccb      	ldrb	r3, [r1, r3]
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	58024400 	.word	0x58024400
 80056b8:	08009e2c 	.word	0x08009e2c

080056bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056c0:	b0c8      	sub	sp, #288	; 0x120
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056c8:	2300      	movs	r3, #0
 80056ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056ce:	2300      	movs	r3, #0
 80056d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80056e0:	2500      	movs	r5, #0
 80056e2:	ea54 0305 	orrs.w	r3, r4, r5
 80056e6:	d049      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80056e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056f2:	d02f      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80056f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056f8:	d828      	bhi.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80056fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056fe:	d01a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005700:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005704:	d822      	bhi.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800570a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800570e:	d007      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005710:	e01c      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005712:	4ba7      	ldr	r3, [pc, #668]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	4aa6      	ldr	r2, [pc, #664]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800571c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800571e:	e01a      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005724:	3308      	adds	r3, #8
 8005726:	2102      	movs	r1, #2
 8005728:	4618      	mov	r0, r3
 800572a:	f002 fa6d 	bl	8007c08 <RCCEx_PLL2_Config>
 800572e:	4603      	mov	r3, r0
 8005730:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005734:	e00f      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800573a:	3328      	adds	r3, #40	; 0x28
 800573c:	2102      	movs	r1, #2
 800573e:	4618      	mov	r0, r3
 8005740:	f002 fb14 	bl	8007d6c <RCCEx_PLL3_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800574a:	e004      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005752:	e000      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005756:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800575e:	4b94      	ldr	r3, [pc, #592]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005762:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800576a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800576c:	4a90      	ldr	r2, [pc, #576]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800576e:	430b      	orrs	r3, r1
 8005770:	6513      	str	r3, [r2, #80]	; 0x50
 8005772:	e003      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005774:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005778:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800577c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005788:	f04f 0900 	mov.w	r9, #0
 800578c:	ea58 0309 	orrs.w	r3, r8, r9
 8005790:	d047      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005798:	2b04      	cmp	r3, #4
 800579a:	d82a      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800579c:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057b9 	.word	0x080057b9
 80057a8:	080057c7 	.word	0x080057c7
 80057ac:	080057dd 	.word	0x080057dd
 80057b0:	080057fb 	.word	0x080057fb
 80057b4:	080057fb 	.word	0x080057fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057b8:	4b7d      	ldr	r3, [pc, #500]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	4a7c      	ldr	r2, [pc, #496]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057c4:	e01a      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ca:	3308      	adds	r3, #8
 80057cc:	2100      	movs	r1, #0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f002 fa1a 	bl	8007c08 <RCCEx_PLL2_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057da:	e00f      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e0:	3328      	adds	r3, #40	; 0x28
 80057e2:	2100      	movs	r1, #0
 80057e4:	4618      	mov	r0, r3
 80057e6:	f002 fac1 	bl	8007d6c <RCCEx_PLL3_Config>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057f0:	e004      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80057f8:	e000      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80057fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005804:	4b6a      	ldr	r3, [pc, #424]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005808:	f023 0107 	bic.w	r1, r3, #7
 800580c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005812:	4a67      	ldr	r2, [pc, #412]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005814:	430b      	orrs	r3, r1
 8005816:	6513      	str	r3, [r2, #80]	; 0x50
 8005818:	e003      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800581e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800582e:	f04f 0b00 	mov.w	fp, #0
 8005832:	ea5a 030b 	orrs.w	r3, sl, fp
 8005836:	d054      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8005838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800583c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005842:	d036      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005844:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005848:	d82f      	bhi.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800584a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800584e:	d032      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005854:	d829      	bhi.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005856:	2bc0      	cmp	r3, #192	; 0xc0
 8005858:	d02f      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800585a:	2bc0      	cmp	r3, #192	; 0xc0
 800585c:	d825      	bhi.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800585e:	2b80      	cmp	r3, #128	; 0x80
 8005860:	d018      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d821      	bhi.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800586a:	2b40      	cmp	r3, #64	; 0x40
 800586c:	d007      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800586e:	e01c      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005870:	4b4f      	ldr	r3, [pc, #316]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	4a4e      	ldr	r2, [pc, #312]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800587a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800587c:	e01e      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800587e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005882:	3308      	adds	r3, #8
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f002 f9be 	bl	8007c08 <RCCEx_PLL2_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005892:	e013      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005898:	3328      	adds	r3, #40	; 0x28
 800589a:	2100      	movs	r1, #0
 800589c:	4618      	mov	r0, r3
 800589e:	f002 fa65 	bl	8007d6c <RCCEx_PLL3_Config>
 80058a2:	4603      	mov	r3, r0
 80058a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80058a8:	e008      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80058b0:	e004      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80058b2:	bf00      	nop
 80058b4:	e002      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80058b6:	bf00      	nop
 80058b8:	e000      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80058ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80058c4:	4b3a      	ldr	r3, [pc, #232]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80058cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d2:	4a37      	ldr	r2, [pc, #220]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058d4:	430b      	orrs	r3, r1
 80058d6:	6513      	str	r3, [r2, #80]	; 0x50
 80058d8:	e003      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80058e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80058ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80058f2:	2300      	movs	r3, #0
 80058f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80058fc:	460b      	mov	r3, r1
 80058fe:	4313      	orrs	r3, r2
 8005900:	d05c      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005908:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800590c:	d03b      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800590e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005912:	d834      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005918:	d037      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800591a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800591e:	d82e      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005920:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005924:	d033      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005926:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800592a:	d828      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800592c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005930:	d01a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005936:	d822      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800593c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005940:	d007      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005942:	e01c      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005944:	4b1a      	ldr	r3, [pc, #104]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	4a19      	ldr	r2, [pc, #100]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800594a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800594e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005950:	e01e      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005956:	3308      	adds	r3, #8
 8005958:	2100      	movs	r1, #0
 800595a:	4618      	mov	r0, r3
 800595c:	f002 f954 	bl	8007c08 <RCCEx_PLL2_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005966:	e013      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800596c:	3328      	adds	r3, #40	; 0x28
 800596e:	2100      	movs	r1, #0
 8005970:	4618      	mov	r0, r3
 8005972:	f002 f9fb 	bl	8007d6c <RCCEx_PLL3_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800597c:	e008      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005984:	e004      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005986:	bf00      	nop
 8005988:	e002      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800598a:	bf00      	nop
 800598c:	e000      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800598e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005990:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10d      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005998:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800599a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800599c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80059a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a6:	4a02      	ldr	r2, [pc, #8]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059a8:	430b      	orrs	r3, r1
 80059aa:	6513      	str	r3, [r2, #80]	; 0x50
 80059ac:	e006      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80059ae:	bf00      	nop
 80059b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80059b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80059bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80059c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80059cc:	2300      	movs	r3, #0
 80059ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80059d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80059d6:	460b      	mov	r3, r1
 80059d8:	4313      	orrs	r3, r2
 80059da:	d03a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80059dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e2:	2b30      	cmp	r3, #48	; 0x30
 80059e4:	d01f      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80059e6:	2b30      	cmp	r3, #48	; 0x30
 80059e8:	d819      	bhi.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d00c      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80059ee:	2b20      	cmp	r3, #32
 80059f0:	d815      	bhi.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d019      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80059f6:	2b10      	cmp	r3, #16
 80059f8:	d111      	bne.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059fa:	4bae      	ldr	r3, [pc, #696]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	4aad      	ldr	r2, [pc, #692]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005a06:	e011      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	2102      	movs	r1, #2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f002 f8f9 	bl	8007c08 <RCCEx_PLL2_Config>
 8005a16:	4603      	mov	r3, r0
 8005a18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005a1c:	e006      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a24:	e002      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005a26:	bf00      	nop
 8005a28:	e000      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005a34:	4b9f      	ldr	r3, [pc, #636]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a38:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a42:	4a9c      	ldr	r2, [pc, #624]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a44:	430b      	orrs	r3, r1
 8005a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a48:	e003      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005a5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a62:	2300      	movs	r3, #0
 8005a64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a68:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	d051      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a7c:	d035      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005a7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a82:	d82e      	bhi.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005a84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a88:	d031      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005a8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a8e:	d828      	bhi.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a94:	d01a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a9a:	d822      	bhi.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa4:	d007      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005aa6:	e01c      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa8:	4b82      	ldr	r3, [pc, #520]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	4a81      	ldr	r2, [pc, #516]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ab4:	e01c      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aba:	3308      	adds	r3, #8
 8005abc:	2100      	movs	r1, #0
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f002 f8a2 	bl	8007c08 <RCCEx_PLL2_Config>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005aca:	e011      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ad0:	3328      	adds	r3, #40	; 0x28
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f002 f949 	bl	8007d6c <RCCEx_PLL3_Config>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ae0:	e006      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ae8:	e002      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005aea:	bf00      	nop
 8005aec:	e000      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005af0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005af8:	4b6e      	ldr	r3, [pc, #440]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005afc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b06:	4a6b      	ldr	r2, [pc, #428]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	6513      	str	r3, [r2, #80]	; 0x50
 8005b0c:	e003      	b.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005b22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b26:	2300      	movs	r3, #0
 8005b28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b2c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005b30:	460b      	mov	r3, r1
 8005b32:	4313      	orrs	r3, r2
 8005b34:	d053      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b40:	d033      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005b42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b46:	d82c      	bhi.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005b48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b4c:	d02f      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005b4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005b52:	d826      	bhi.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005b54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b58:	d02b      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005b5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b5e:	d820      	bhi.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b64:	d012      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005b66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b6a:	d81a      	bhi.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d022      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b74:	d115      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f002 f842 	bl	8007c08 <RCCEx_PLL2_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b8a:	e015      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b90:	3328      	adds	r3, #40	; 0x28
 8005b92:	2101      	movs	r1, #1
 8005b94:	4618      	mov	r0, r3
 8005b96:	f002 f8e9 	bl	8007d6c <RCCEx_PLL3_Config>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ba0:	e00a      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005ba8:	e006      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005baa:	bf00      	nop
 8005bac:	e004      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005bae:	bf00      	nop
 8005bb0:	e002      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005bb2:	bf00      	nop
 8005bb4:	e000      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005bc0:	4b3c      	ldr	r3, [pc, #240]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bce:	4a39      	ldr	r2, [pc, #228]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6513      	str	r3, [r2, #80]	; 0x50
 8005bd4:	e003      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005bea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bf4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	d060      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005bfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c06:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005c0a:	d039      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005c0c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005c10:	d832      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c16:	d035      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c1c:	d82c      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c22:	d031      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c28:	d826      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005c2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c2e:	d02d      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005c30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c34:	d820      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c3a:	d012      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c40:	d81a      	bhi.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d024      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c4a:	d115      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c50:	3308      	adds	r3, #8
 8005c52:	2101      	movs	r1, #1
 8005c54:	4618      	mov	r0, r3
 8005c56:	f001 ffd7 	bl	8007c08 <RCCEx_PLL2_Config>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c60:	e017      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c66:	3328      	adds	r3, #40	; 0x28
 8005c68:	2101      	movs	r1, #1
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f002 f87e 	bl	8007d6c <RCCEx_PLL3_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c76:	e00c      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005c7e:	e008      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c80:	bf00      	nop
 8005c82:	e006      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c84:	bf00      	nop
 8005c86:	e004      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c88:	bf00      	nop
 8005c8a:	e002      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c8c:	bf00      	nop
 8005c8e:	e000      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10e      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c9a:	4b06      	ldr	r3, [pc, #24]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005caa:	4a02      	ldr	r2, [pc, #8]	; (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cac:	430b      	orrs	r3, r1
 8005cae:	6593      	str	r3, [r2, #88]	; 0x58
 8005cb0:	e006      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005cb2:	bf00      	nop
 8005cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005cbc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005cd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	d037      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cea:	d00e      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf0:	d816      	bhi.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d018      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cfa:	d111      	bne.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cfc:	4bc4      	ldr	r3, [pc, #784]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	4ac3      	ldr	r2, [pc, #780]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d08:	e00f      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d0e:	3308      	adds	r3, #8
 8005d10:	2101      	movs	r1, #1
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 ff78 	bl	8007c08 <RCCEx_PLL2_Config>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d1e:	e004      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d26:	e000      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10a      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d32:	4bb7      	ldr	r3, [pc, #732]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d36:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d40:	4ab3      	ldr	r2, [pc, #716]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d42:	430b      	orrs	r3, r1
 8005d44:	6513      	str	r3, [r2, #80]	; 0x50
 8005d46:	e003      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d60:	2300      	movs	r3, #0
 8005d62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005d66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	d039      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d81c      	bhi.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005dbd 	.word	0x08005dbd
 8005d84:	08005d91 	.word	0x08005d91
 8005d88:	08005d9f 	.word	0x08005d9f
 8005d8c:	08005dbd 	.word	0x08005dbd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d90:	4b9f      	ldr	r3, [pc, #636]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	4a9e      	ldr	r2, [pc, #632]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d9c:	e00f      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da2:	3308      	adds	r3, #8
 8005da4:	2102      	movs	r1, #2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f001 ff2e 	bl	8007c08 <RCCEx_PLL2_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005db2:	e004      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005dba:	e000      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10a      	bne.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005dc6:	4b92      	ldr	r3, [pc, #584]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dca:	f023 0103 	bic.w	r1, r3, #3
 8005dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd4:	4a8e      	ldr	r2, [pc, #568]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005dda:	e003      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ddc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005de0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005df0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005df4:	2300      	movs	r3, #0
 8005df6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005dfa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f000 8099 	beq.w	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e06:	4b83      	ldr	r3, [pc, #524]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a82      	ldr	r2, [pc, #520]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e12:	f7fd f8f7 	bl	8003004 <HAL_GetTick>
 8005e16:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e1a:	e00b      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e1c:	f7fd f8f2 	bl	8003004 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b64      	cmp	r3, #100	; 0x64
 8005e2a:	d903      	bls.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e32:	e005      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e34:	4b77      	ldr	r3, [pc, #476]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0ed      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005e40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d173      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e48:	4b71      	ldr	r3, [pc, #452]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e54:	4053      	eors	r3, r2
 8005e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d015      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e5e:	4b6c      	ldr	r3, [pc, #432]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e66:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e6a:	4b69      	ldr	r3, [pc, #420]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6e:	4a68      	ldr	r2, [pc, #416]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e74:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e76:	4b66      	ldr	r3, [pc, #408]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7a:	4a65      	ldr	r2, [pc, #404]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e80:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e82:	4a63      	ldr	r2, [pc, #396]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e96:	d118      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fd f8b4 	bl	8003004 <HAL_GetTick>
 8005e9c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ea0:	e00d      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea2:	f7fd f8af 	bl	8003004 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005eac:	1ad2      	subs	r2, r2, r3
 8005eae:	f241 3388 	movw	r3, #5000	; 0x1388
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d903      	bls.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8005ebc:	e005      	b.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ebe:	4b54      	ldr	r3, [pc, #336]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0eb      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005eca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d129      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ed6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee2:	d10e      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005ee4:	4b4a      	ldr	r3, [pc, #296]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005ef4:	091a      	lsrs	r2, r3, #4
 8005ef6:	4b48      	ldr	r3, [pc, #288]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	4a45      	ldr	r2, [pc, #276]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6113      	str	r3, [r2, #16]
 8005f00:	e005      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005f02:	4b43      	ldr	r3, [pc, #268]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	4a42      	ldr	r2, [pc, #264]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f0c:	6113      	str	r3, [r2, #16]
 8005f0e:	4b40      	ldr	r3, [pc, #256]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f10:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f1e:	4a3c      	ldr	r2, [pc, #240]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f20:	430b      	orrs	r3, r1
 8005f22:	6713      	str	r3, [r2, #112]	; 0x70
 8005f24:	e008      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f2a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005f2e:	e003      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f002 0301 	and.w	r3, r2, #1
 8005f44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4313      	orrs	r3, r2
 8005f56:	f000 8090 	beq.w	800607a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f62:	2b28      	cmp	r3, #40	; 0x28
 8005f64:	d870      	bhi.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005f66:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6c:	08006051 	.word	0x08006051
 8005f70:	08006049 	.word	0x08006049
 8005f74:	08006049 	.word	0x08006049
 8005f78:	08006049 	.word	0x08006049
 8005f7c:	08006049 	.word	0x08006049
 8005f80:	08006049 	.word	0x08006049
 8005f84:	08006049 	.word	0x08006049
 8005f88:	08006049 	.word	0x08006049
 8005f8c:	0800601d 	.word	0x0800601d
 8005f90:	08006049 	.word	0x08006049
 8005f94:	08006049 	.word	0x08006049
 8005f98:	08006049 	.word	0x08006049
 8005f9c:	08006049 	.word	0x08006049
 8005fa0:	08006049 	.word	0x08006049
 8005fa4:	08006049 	.word	0x08006049
 8005fa8:	08006049 	.word	0x08006049
 8005fac:	08006033 	.word	0x08006033
 8005fb0:	08006049 	.word	0x08006049
 8005fb4:	08006049 	.word	0x08006049
 8005fb8:	08006049 	.word	0x08006049
 8005fbc:	08006049 	.word	0x08006049
 8005fc0:	08006049 	.word	0x08006049
 8005fc4:	08006049 	.word	0x08006049
 8005fc8:	08006049 	.word	0x08006049
 8005fcc:	08006051 	.word	0x08006051
 8005fd0:	08006049 	.word	0x08006049
 8005fd4:	08006049 	.word	0x08006049
 8005fd8:	08006049 	.word	0x08006049
 8005fdc:	08006049 	.word	0x08006049
 8005fe0:	08006049 	.word	0x08006049
 8005fe4:	08006049 	.word	0x08006049
 8005fe8:	08006049 	.word	0x08006049
 8005fec:	08006051 	.word	0x08006051
 8005ff0:	08006049 	.word	0x08006049
 8005ff4:	08006049 	.word	0x08006049
 8005ff8:	08006049 	.word	0x08006049
 8005ffc:	08006049 	.word	0x08006049
 8006000:	08006049 	.word	0x08006049
 8006004:	08006049 	.word	0x08006049
 8006008:	08006049 	.word	0x08006049
 800600c:	08006051 	.word	0x08006051
 8006010:	58024400 	.word	0x58024400
 8006014:	58024800 	.word	0x58024800
 8006018:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800601c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006020:	3308      	adds	r3, #8
 8006022:	2101      	movs	r1, #1
 8006024:	4618      	mov	r0, r3
 8006026:	f001 fdef 	bl	8007c08 <RCCEx_PLL2_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006030:	e00f      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006036:	3328      	adds	r3, #40	; 0x28
 8006038:	2101      	movs	r1, #1
 800603a:	4618      	mov	r0, r3
 800603c:	f001 fe96 	bl	8007d6c <RCCEx_PLL3_Config>
 8006040:	4603      	mov	r3, r0
 8006042:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006046:	e004      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800604e:	e000      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006050:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006052:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10b      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800605a:	4bc0      	ldr	r3, [pc, #768]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800605c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800606a:	4abc      	ldr	r2, [pc, #752]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800606c:	430b      	orrs	r3, r1
 800606e:	6553      	str	r3, [r2, #84]	; 0x54
 8006070:	e003      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006072:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006076:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800607a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	f002 0302 	and.w	r3, r2, #2
 8006086:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800608a:	2300      	movs	r3, #0
 800608c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006090:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006094:	460b      	mov	r3, r1
 8006096:	4313      	orrs	r3, r2
 8006098:	d043      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800609a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060a2:	2b05      	cmp	r3, #5
 80060a4:	d824      	bhi.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80060a6:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	080060f9 	.word	0x080060f9
 80060b0:	080060c5 	.word	0x080060c5
 80060b4:	080060db 	.word	0x080060db
 80060b8:	080060f9 	.word	0x080060f9
 80060bc:	080060f9 	.word	0x080060f9
 80060c0:	080060f9 	.word	0x080060f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060c8:	3308      	adds	r3, #8
 80060ca:	2101      	movs	r1, #1
 80060cc:	4618      	mov	r0, r3
 80060ce:	f001 fd9b 	bl	8007c08 <RCCEx_PLL2_Config>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060d8:	e00f      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060de:	3328      	adds	r3, #40	; 0x28
 80060e0:	2101      	movs	r1, #1
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 fe42 	bl	8007d6c <RCCEx_PLL3_Config>
 80060e8:	4603      	mov	r3, r0
 80060ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060ee:	e004      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80060f6:	e000      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80060f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10b      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006102:	4b96      	ldr	r3, [pc, #600]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006106:	f023 0107 	bic.w	r1, r3, #7
 800610a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800610e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006112:	4a92      	ldr	r2, [pc, #584]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006114:	430b      	orrs	r3, r1
 8006116:	6553      	str	r3, [r2, #84]	; 0x54
 8006118:	e003      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800611e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612a:	f002 0304 	and.w	r3, r2, #4
 800612e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006132:	2300      	movs	r3, #0
 8006134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006138:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800613c:	460b      	mov	r3, r1
 800613e:	4313      	orrs	r3, r2
 8006140:	d043      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006146:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800614a:	2b05      	cmp	r3, #5
 800614c:	d824      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800614e:	a201      	add	r2, pc, #4	; (adr r2, 8006154 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8006150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006154:	080061a1 	.word	0x080061a1
 8006158:	0800616d 	.word	0x0800616d
 800615c:	08006183 	.word	0x08006183
 8006160:	080061a1 	.word	0x080061a1
 8006164:	080061a1 	.word	0x080061a1
 8006168:	080061a1 	.word	0x080061a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800616c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006170:	3308      	adds	r3, #8
 8006172:	2101      	movs	r1, #1
 8006174:	4618      	mov	r0, r3
 8006176:	f001 fd47 	bl	8007c08 <RCCEx_PLL2_Config>
 800617a:	4603      	mov	r3, r0
 800617c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006180:	e00f      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006186:	3328      	adds	r3, #40	; 0x28
 8006188:	2101      	movs	r1, #1
 800618a:	4618      	mov	r0, r3
 800618c:	f001 fdee 	bl	8007d6c <RCCEx_PLL3_Config>
 8006190:	4603      	mov	r3, r0
 8006192:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006196:	e004      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800619e:	e000      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80061a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10b      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061aa:	4b6c      	ldr	r3, [pc, #432]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80061ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ae:	f023 0107 	bic.w	r1, r3, #7
 80061b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061ba:	4a68      	ldr	r2, [pc, #416]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80061bc:	430b      	orrs	r3, r1
 80061be:	6593      	str	r3, [r2, #88]	; 0x58
 80061c0:	e003      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	f002 0320 	and.w	r3, r2, #32
 80061d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061da:	2300      	movs	r3, #0
 80061dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061e4:	460b      	mov	r3, r1
 80061e6:	4313      	orrs	r3, r2
 80061e8:	d055      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80061ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061f6:	d033      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80061f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061fc:	d82c      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80061fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006202:	d02f      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006208:	d826      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800620a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800620e:	d02b      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006210:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006214:	d820      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800621a:	d012      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800621c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006220:	d81a      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d022      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800622a:	d115      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800622c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006230:	3308      	adds	r3, #8
 8006232:	2100      	movs	r1, #0
 8006234:	4618      	mov	r0, r3
 8006236:	f001 fce7 	bl	8007c08 <RCCEx_PLL2_Config>
 800623a:	4603      	mov	r3, r0
 800623c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006240:	e015      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006246:	3328      	adds	r3, #40	; 0x28
 8006248:	2102      	movs	r1, #2
 800624a:	4618      	mov	r0, r3
 800624c:	f001 fd8e 	bl	8007d6c <RCCEx_PLL3_Config>
 8006250:	4603      	mov	r3, r0
 8006252:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006256:	e00a      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800625e:	e006      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006260:	bf00      	nop
 8006262:	e004      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006264:	bf00      	nop
 8006266:	e002      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8006268:	bf00      	nop
 800626a:	e000      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800626c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800626e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10b      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006276:	4b39      	ldr	r3, [pc, #228]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800627e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006282:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006286:	4a35      	ldr	r2, [pc, #212]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006288:	430b      	orrs	r3, r1
 800628a:	6553      	str	r3, [r2, #84]	; 0x54
 800628c:	e003      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006292:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80062a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062a6:	2300      	movs	r3, #0
 80062a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4313      	orrs	r3, r2
 80062b4:	d058      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80062b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062c2:	d033      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80062c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80062c8:	d82c      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80062ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ce:	d02f      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80062d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d4:	d826      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80062d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062da:	d02b      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80062dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062e0:	d820      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80062e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062e6:	d012      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80062e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ec:	d81a      	bhi.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d022      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80062f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f6:	d115      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062fc:	3308      	adds	r3, #8
 80062fe:	2100      	movs	r1, #0
 8006300:	4618      	mov	r0, r3
 8006302:	f001 fc81 	bl	8007c08 <RCCEx_PLL2_Config>
 8006306:	4603      	mov	r3, r0
 8006308:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800630c:	e015      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800630e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006312:	3328      	adds	r3, #40	; 0x28
 8006314:	2102      	movs	r1, #2
 8006316:	4618      	mov	r0, r3
 8006318:	f001 fd28 	bl	8007d6c <RCCEx_PLL3_Config>
 800631c:	4603      	mov	r3, r0
 800631e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006322:	e00a      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800632a:	e006      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800632c:	bf00      	nop
 800632e:	e004      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006330:	bf00      	nop
 8006332:	e002      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006334:	bf00      	nop
 8006336:	e000      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8006338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800633a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10e      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006342:	4b06      	ldr	r3, [pc, #24]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006346:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800634a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800634e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006352:	4a02      	ldr	r2, [pc, #8]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006354:	430b      	orrs	r3, r1
 8006356:	6593      	str	r3, [r2, #88]	; 0x58
 8006358:	e006      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800635a:	bf00      	nop
 800635c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006360:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006364:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006370:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006378:	2300      	movs	r3, #0
 800637a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800637e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006382:	460b      	mov	r3, r1
 8006384:	4313      	orrs	r3, r2
 8006386:	d055      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800638c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006390:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006394:	d033      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006396:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800639a:	d82c      	bhi.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800639c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a0:	d02f      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80063a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a6:	d826      	bhi.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80063a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063ac:	d02b      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80063ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80063b2:	d820      	bhi.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80063b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063b8:	d012      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80063ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063be:	d81a      	bhi.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d022      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80063c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c8:	d115      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ce:	3308      	adds	r3, #8
 80063d0:	2100      	movs	r1, #0
 80063d2:	4618      	mov	r0, r3
 80063d4:	f001 fc18 	bl	8007c08 <RCCEx_PLL2_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063de:	e015      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e4:	3328      	adds	r3, #40	; 0x28
 80063e6:	2102      	movs	r1, #2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 fcbf 	bl	8007d6c <RCCEx_PLL3_Config>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063f4:	e00a      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80063fc:	e006      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80063fe:	bf00      	nop
 8006400:	e004      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006402:	bf00      	nop
 8006404:	e002      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006406:	bf00      	nop
 8006408:	e000      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800640a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800640c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006414:	4ba1      	ldr	r3, [pc, #644]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006418:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800641c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006420:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006424:	4a9d      	ldr	r2, [pc, #628]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006426:	430b      	orrs	r3, r1
 8006428:	6593      	str	r3, [r2, #88]	; 0x58
 800642a:	e003      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006430:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f002 0308 	and.w	r3, r2, #8
 8006440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006444:	2300      	movs	r3, #0
 8006446:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800644a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800644e:	460b      	mov	r3, r1
 8006450:	4313      	orrs	r3, r2
 8006452:	d01e      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800645c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006460:	d10c      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006466:	3328      	adds	r3, #40	; 0x28
 8006468:	2102      	movs	r1, #2
 800646a:	4618      	mov	r0, r3
 800646c:	f001 fc7e 	bl	8007d6c <RCCEx_PLL3_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800647c:	4b87      	ldr	r3, [pc, #540]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800647e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006480:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800648c:	4a83      	ldr	r2, [pc, #524]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800648e:	430b      	orrs	r3, r1
 8006490:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649a:	f002 0310 	and.w	r3, r2, #16
 800649e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064a2:	2300      	movs	r3, #0
 80064a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80064a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80064ac:	460b      	mov	r3, r1
 80064ae:	4313      	orrs	r3, r2
 80064b0:	d01e      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80064b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064be:	d10c      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064c4:	3328      	adds	r3, #40	; 0x28
 80064c6:	2102      	movs	r1, #2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f001 fc4f 	bl	8007d6c <RCCEx_PLL3_Config>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064da:	4b70      	ldr	r3, [pc, #448]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80064ea:	4a6c      	ldr	r2, [pc, #432]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80064ec:	430b      	orrs	r3, r1
 80064ee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80064fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006500:	2300      	movs	r3, #0
 8006502:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006506:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800650a:	460b      	mov	r3, r1
 800650c:	4313      	orrs	r3, r2
 800650e:	d03e      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006510:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006514:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800651c:	d022      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800651e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006522:	d81b      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652c:	d00b      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800652e:	e015      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006534:	3308      	adds	r3, #8
 8006536:	2100      	movs	r1, #0
 8006538:	4618      	mov	r0, r3
 800653a:	f001 fb65 	bl	8007c08 <RCCEx_PLL2_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006544:	e00f      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800654a:	3328      	adds	r3, #40	; 0x28
 800654c:	2102      	movs	r1, #2
 800654e:	4618      	mov	r0, r3
 8006550:	f001 fc0c 	bl	8007d6c <RCCEx_PLL3_Config>
 8006554:	4603      	mov	r3, r0
 8006556:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800655a:	e004      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006562:	e000      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8006564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006566:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10b      	bne.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800656e:	4b4b      	ldr	r3, [pc, #300]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006572:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800657a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800657e:	4a47      	ldr	r2, [pc, #284]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006580:	430b      	orrs	r3, r1
 8006582:	6593      	str	r3, [r2, #88]	; 0x58
 8006584:	e003      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006586:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800658a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800658e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800659a:	67bb      	str	r3, [r7, #120]	; 0x78
 800659c:	2300      	movs	r3, #0
 800659e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80065a4:	460b      	mov	r3, r1
 80065a6:	4313      	orrs	r3, r2
 80065a8:	d03b      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80065aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065b6:	d01f      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80065b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065bc:	d818      	bhi.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80065be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065c2:	d003      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80065c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065c8:	d007      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80065ca:	e011      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065cc:	4b33      	ldr	r3, [pc, #204]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	4a32      	ldr	r2, [pc, #200]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80065d8:	e00f      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065de:	3328      	adds	r3, #40	; 0x28
 80065e0:	2101      	movs	r1, #1
 80065e2:	4618      	mov	r0, r3
 80065e4:	f001 fbc2 	bl	8007d6c <RCCEx_PLL3_Config>
 80065e8:	4603      	mov	r3, r0
 80065ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80065ee:	e004      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80065f6:	e000      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80065f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10b      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006602:	4b26      	ldr	r3, [pc, #152]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006606:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800660a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800660e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006612:	4a22      	ldr	r2, [pc, #136]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006614:	430b      	orrs	r3, r1
 8006616:	6553      	str	r3, [r2, #84]	; 0x54
 8006618:	e003      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800661a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800661e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800662e:	673b      	str	r3, [r7, #112]	; 0x70
 8006630:	2300      	movs	r3, #0
 8006632:	677b      	str	r3, [r7, #116]	; 0x74
 8006634:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006638:	460b      	mov	r3, r1
 800663a:	4313      	orrs	r3, r2
 800663c:	d034      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800663e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8006648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800664c:	d007      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800664e:	e011      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006650:	4b12      	ldr	r3, [pc, #72]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	4a11      	ldr	r2, [pc, #68]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800665a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800665c:	e00e      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800665e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006662:	3308      	adds	r3, #8
 8006664:	2102      	movs	r1, #2
 8006666:	4618      	mov	r0, r3
 8006668:	f001 face 	bl	8007c08 <RCCEx_PLL2_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006672:	e003      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800667a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800667c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10d      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006688:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800668c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006692:	4a02      	ldr	r2, [pc, #8]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006694:	430b      	orrs	r3, r1
 8006696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006698:	e006      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800669a:	bf00      	nop
 800669c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80066b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80066b6:	2300      	movs	r3, #0
 80066b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80066be:	460b      	mov	r3, r1
 80066c0:	4313      	orrs	r3, r2
 80066c2:	d00c      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066c8:	3328      	adds	r3, #40	; 0x28
 80066ca:	2102      	movs	r1, #2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f001 fb4d 	bl	8007d6c <RCCEx_PLL3_Config>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80066ea:	663b      	str	r3, [r7, #96]	; 0x60
 80066ec:	2300      	movs	r3, #0
 80066ee:	667b      	str	r3, [r7, #100]	; 0x64
 80066f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80066f4:	460b      	mov	r3, r1
 80066f6:	4313      	orrs	r3, r2
 80066f8:	d038      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80066fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006706:	d018      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8006708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800670c:	d811      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800670e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006712:	d014      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006718:	d80b      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d011      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800671e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006722:	d106      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006724:	4bc3      	ldr	r3, [pc, #780]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	4ac2      	ldr	r2, [pc, #776]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800672a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800672e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006730:	e008      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006738:	e004      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800673a:	bf00      	nop
 800673c:	e002      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800673e:	bf00      	nop
 8006740:	e000      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8006742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006744:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10b      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800674c:	4bb9      	ldr	r3, [pc, #740]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800674e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006750:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675c:	4ab5      	ldr	r2, [pc, #724]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800675e:	430b      	orrs	r3, r1
 8006760:	6553      	str	r3, [r2, #84]	; 0x54
 8006762:	e003      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006764:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006768:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800676c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006778:	65bb      	str	r3, [r7, #88]	; 0x58
 800677a:	2300      	movs	r3, #0
 800677c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800677e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006782:	460b      	mov	r3, r1
 8006784:	4313      	orrs	r3, r2
 8006786:	d009      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006788:	4baa      	ldr	r3, [pc, #680]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800678a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800678c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006796:	4aa7      	ldr	r2, [pc, #668]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006798:	430b      	orrs	r3, r1
 800679a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800679c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80067a8:	653b      	str	r3, [r7, #80]	; 0x50
 80067aa:	2300      	movs	r3, #0
 80067ac:	657b      	str	r3, [r7, #84]	; 0x54
 80067ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80067b2:	460b      	mov	r3, r1
 80067b4:	4313      	orrs	r3, r2
 80067b6:	d009      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067b8:	4b9e      	ldr	r3, [pc, #632]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80067ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067bc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80067c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c6:	4a9b      	ldr	r2, [pc, #620]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80067c8:	430b      	orrs	r3, r1
 80067ca:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80067cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80067d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80067da:	2300      	movs	r3, #0
 80067dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80067e2:	460b      	mov	r3, r1
 80067e4:	4313      	orrs	r3, r2
 80067e6:	d009      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80067e8:	4b92      	ldr	r3, [pc, #584]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80067ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ec:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80067f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f6:	4a8f      	ldr	r2, [pc, #572]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80067f8:	430b      	orrs	r3, r1
 80067fa:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006808:	643b      	str	r3, [r7, #64]	; 0x40
 800680a:	2300      	movs	r3, #0
 800680c:	647b      	str	r3, [r7, #68]	; 0x44
 800680e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006812:	460b      	mov	r3, r1
 8006814:	4313      	orrs	r3, r2
 8006816:	d00e      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006818:	4b86      	ldr	r3, [pc, #536]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	4a85      	ldr	r2, [pc, #532]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800681e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006822:	6113      	str	r3, [r2, #16]
 8006824:	4b83      	ldr	r3, [pc, #524]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006826:	6919      	ldr	r1, [r3, #16]
 8006828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800682c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006830:	4a80      	ldr	r2, [pc, #512]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006832:	430b      	orrs	r3, r1
 8006834:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006842:	63bb      	str	r3, [r7, #56]	; 0x38
 8006844:	2300      	movs	r3, #0
 8006846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006848:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800684c:	460b      	mov	r3, r1
 800684e:	4313      	orrs	r3, r2
 8006850:	d009      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006852:	4b78      	ldr	r3, [pc, #480]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006856:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800685a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800685e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006860:	4a74      	ldr	r2, [pc, #464]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006862:	430b      	orrs	r3, r1
 8006864:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006866:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006872:	633b      	str	r3, [r7, #48]	; 0x30
 8006874:	2300      	movs	r3, #0
 8006876:	637b      	str	r3, [r7, #52]	; 0x34
 8006878:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800687c:	460b      	mov	r3, r1
 800687e:	4313      	orrs	r3, r2
 8006880:	d00a      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006882:	4b6c      	ldr	r3, [pc, #432]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006886:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800688a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800688e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006892:	4a68      	ldr	r2, [pc, #416]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006894:	430b      	orrs	r3, r1
 8006896:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	2100      	movs	r1, #0
 80068a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068aa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80068ae:	460b      	mov	r3, r1
 80068b0:	4313      	orrs	r3, r2
 80068b2:	d011      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068b8:	3308      	adds	r3, #8
 80068ba:	2100      	movs	r1, #0
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 f9a3 	bl	8007c08 <RCCEx_PLL2_Config>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80068c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80068d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	2100      	movs	r1, #0
 80068e2:	6239      	str	r1, [r7, #32]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
 80068ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068ee:	460b      	mov	r3, r1
 80068f0:	4313      	orrs	r3, r2
 80068f2:	d011      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068f8:	3308      	adds	r3, #8
 80068fa:	2101      	movs	r1, #1
 80068fc:	4618      	mov	r0, r3
 80068fe:	f001 f983 	bl	8007c08 <RCCEx_PLL2_Config>
 8006902:	4603      	mov	r3, r0
 8006904:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006908:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006910:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006914:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	2100      	movs	r1, #0
 8006922:	61b9      	str	r1, [r7, #24]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	61fb      	str	r3, [r7, #28]
 800692a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800692e:	460b      	mov	r3, r1
 8006930:	4313      	orrs	r3, r2
 8006932:	d011      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006938:	3308      	adds	r3, #8
 800693a:	2102      	movs	r1, #2
 800693c:	4618      	mov	r0, r3
 800693e:	f001 f963 	bl	8007c08 <RCCEx_PLL2_Config>
 8006942:	4603      	mov	r3, r0
 8006944:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006948:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006950:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006954:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006960:	2100      	movs	r1, #0
 8006962:	6139      	str	r1, [r7, #16]
 8006964:	f003 0308 	and.w	r3, r3, #8
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800696e:	460b      	mov	r3, r1
 8006970:	4313      	orrs	r3, r2
 8006972:	d011      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006978:	3328      	adds	r3, #40	; 0x28
 800697a:	2100      	movs	r1, #0
 800697c:	4618      	mov	r0, r3
 800697e:	f001 f9f5 	bl	8007d6c <RCCEx_PLL3_Config>
 8006982:	4603      	mov	r3, r0
 8006984:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8006988:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006990:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006994:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	2100      	movs	r1, #0
 80069a2:	60b9      	str	r1, [r7, #8]
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069ae:	460b      	mov	r3, r1
 80069b0:	4313      	orrs	r3, r2
 80069b2:	d011      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b8:	3328      	adds	r3, #40	; 0x28
 80069ba:	2101      	movs	r1, #1
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 f9d5 	bl	8007d6c <RCCEx_PLL3_Config>
 80069c2:	4603      	mov	r3, r0
 80069c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80069c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80069d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80069d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e0:	2100      	movs	r1, #0
 80069e2:	6039      	str	r1, [r7, #0]
 80069e4:	f003 0320 	and.w	r3, r3, #32
 80069e8:	607b      	str	r3, [r7, #4]
 80069ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069ee:	460b      	mov	r3, r1
 80069f0:	4313      	orrs	r3, r2
 80069f2:	d011      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069f8:	3328      	adds	r3, #40	; 0x28
 80069fa:	2102      	movs	r1, #2
 80069fc:	4618      	mov	r0, r3
 80069fe:	f001 f9b5 	bl	8007d6c <RCCEx_PLL3_Config>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006a08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006a18:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	e000      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a32:	bf00      	nop
 8006a34:	58024400 	.word	0x58024400

08006a38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b090      	sub	sp, #64	; 0x40
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a46:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006a4a:	430b      	orrs	r3, r1
 8006a4c:	f040 8094 	bne.w	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006a50:	4b97      	ldr	r3, [pc, #604]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a54:	f003 0307 	and.w	r3, r3, #7
 8006a58:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	2b04      	cmp	r3, #4
 8006a5e:	f200 8087 	bhi.w	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006a62:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a7d 	.word	0x08006a7d
 8006a6c:	08006aa5 	.word	0x08006aa5
 8006a70:	08006acd 	.word	0x08006acd
 8006a74:	08006b69 	.word	0x08006b69
 8006a78:	08006af5 	.word	0x08006af5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a7c:	4b8c      	ldr	r3, [pc, #560]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a88:	d108      	bne.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 ff68 	bl	8007964 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a98:	f000 bc97 	b.w	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa0:	f000 bc93 	b.w	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006aa4:	4b82      	ldr	r3, [pc, #520]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ab0:	d108      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ab2:	f107 0318 	add.w	r3, r7, #24
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fcac 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ac0:	f000 bc83 	b.w	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ac8:	f000 bc7f 	b.w	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006acc:	4b78      	ldr	r3, [pc, #480]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ad8:	d108      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ada:	f107 030c 	add.w	r3, r7, #12
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fdec 	bl	80076bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ae8:	f000 bc6f 	b.w	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006af0:	f000 bc6b 	b.w	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006af4:	4b6e      	ldr	r3, [pc, #440]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006afc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006afe:	4b6c      	ldr	r3, [pc, #432]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d10c      	bne.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d109      	bne.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b10:	4b67      	ldr	r3, [pc, #412]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	08db      	lsrs	r3, r3, #3
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	4a66      	ldr	r2, [pc, #408]	; (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b22:	e01f      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b24:	4b62      	ldr	r3, [pc, #392]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b30:	d106      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b38:	d102      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b3a:	4b5f      	ldr	r3, [pc, #380]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b3e:	e011      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b40:	4b5b      	ldr	r3, [pc, #364]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b4c:	d106      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b54:	d102      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b56:	4b59      	ldr	r3, [pc, #356]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b5a:	e003      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006b60:	f000 bc33 	b.w	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006b64:	f000 bc31 	b.w	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b68:	4b55      	ldr	r3, [pc, #340]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b6c:	f000 bc2d 	b.w	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006b70:	2300      	movs	r3, #0
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b74:	f000 bc29 	b.w	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b7c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006b80:	430b      	orrs	r3, r1
 8006b82:	f040 809f 	bne.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8006b86:	4b4a      	ldr	r3, [pc, #296]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b8a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006b8e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b96:	d04d      	beq.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b9e:	f200 8084 	bhi.w	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	2bc0      	cmp	r3, #192	; 0xc0
 8006ba6:	d07d      	beq.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	2bc0      	cmp	r3, #192	; 0xc0
 8006bac:	d87d      	bhi.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	2b80      	cmp	r3, #128	; 0x80
 8006bb2:	d02d      	beq.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	2b80      	cmp	r3, #128	; 0x80
 8006bb8:	d877      	bhi.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	2b40      	cmp	r3, #64	; 0x40
 8006bc4:	d012      	beq.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006bc6:	e070      	b.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bc8:	4b39      	ldr	r3, [pc, #228]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bd4:	d107      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fec2 	bl	8007964 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006be4:	e3f1      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bea:	e3ee      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bec:	4b30      	ldr	r3, [pc, #192]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bf8:	d107      	bne.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bfa:	f107 0318 	add.w	r3, r7, #24
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fc08 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c08:	e3df      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c0e:	e3dc      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c10:	4b27      	ldr	r3, [pc, #156]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c1c:	d107      	bne.n	8006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c1e:	f107 030c 	add.w	r3, r7, #12
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 fd4a 	bl	80076bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c2c:	e3cd      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c32:	e3ca      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c34:	4b1e      	ldr	r3, [pc, #120]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c3e:	4b1c      	ldr	r3, [pc, #112]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d10c      	bne.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d109      	bne.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c50:	4b17      	ldr	r3, [pc, #92]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	08db      	lsrs	r3, r3, #3
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	4a16      	ldr	r2, [pc, #88]	; (8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c62:	e01e      	b.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c64:	4b12      	ldr	r3, [pc, #72]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c70:	d106      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8006c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c78:	d102      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c7a:	4b0f      	ldr	r3, [pc, #60]	; (8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c7e:	e010      	b.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c80:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c8c:	d106      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c94:	d102      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c96:	4b09      	ldr	r3, [pc, #36]	; (8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c9a:	e002      	b.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006ca0:	e393      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006ca2:	e392      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ca8:	e38f      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cae:	e38c      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006cb0:	58024400 	.word	0x58024400
 8006cb4:	03d09000 	.word	0x03d09000
 8006cb8:	003d0900 	.word	0x003d0900
 8006cbc:	007a1200 	.word	0x007a1200
 8006cc0:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cc8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	f040 809c 	bne.w	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8006cd2:	4b9e      	ldr	r3, [pc, #632]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006cda:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ce2:	d054      	beq.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cea:	f200 808b 	bhi.w	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cf4:	f000 8083 	beq.w	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cfe:	f200 8081 	bhi.w	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d08:	d02f      	beq.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d10:	d878      	bhi.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1e:	d012      	beq.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8006d20:	e070      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d22:	4b8a      	ldr	r3, [pc, #552]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d2e:	d107      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fe15 	bl	8007964 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d3e:	e344      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d44:	e341      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d46:	4b81      	ldr	r3, [pc, #516]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d52:	d107      	bne.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d54:	f107 0318 	add.w	r3, r7, #24
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fb5b 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d62:	e332      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d68:	e32f      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d6a:	4b78      	ldr	r3, [pc, #480]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d76:	d107      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d78:	f107 030c 	add.w	r3, r7, #12
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fc9d 	bl	80076bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d86:	e320      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d8c:	e31d      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d8e:	4b6f      	ldr	r3, [pc, #444]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d98:	4b6c      	ldr	r3, [pc, #432]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d10c      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d109      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006daa:	4b68      	ldr	r3, [pc, #416]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	08db      	lsrs	r3, r3, #3
 8006db0:	f003 0303 	and.w	r3, r3, #3
 8006db4:	4a66      	ldr	r2, [pc, #408]	; (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006db6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dbc:	e01e      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dbe:	4b63      	ldr	r3, [pc, #396]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dca:	d106      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dd2:	d102      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006dd4:	4b5f      	ldr	r3, [pc, #380]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd8:	e010      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006dda:	4b5c      	ldr	r3, [pc, #368]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006de6:	d106      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dee:	d102      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006df0:	4b59      	ldr	r3, [pc, #356]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df4:	e002      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8006dfa:	e2e6      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006dfc:	e2e5      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006dfe:	4b57      	ldr	r3, [pc, #348]	; (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e02:	e2e2      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e08:	e2df      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006e12:	430b      	orrs	r3, r1
 8006e14:	f040 80a7 	bne.w	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006e18:	4b4c      	ldr	r3, [pc, #304]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006e20:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e28:	d055      	beq.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e30:	f200 8096 	bhi.w	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e3a:	f000 8084 	beq.w	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e44:	f200 808c 	bhi.w	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e4e:	d030      	beq.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e56:	f200 8083 	bhi.w	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d004      	beq.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e66:	d012      	beq.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006e68:	e07a      	b.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e6a:	4b38      	ldr	r3, [pc, #224]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e76:	d107      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fd71 	bl	8007964 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e86:	e2a0      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e8c:	e29d      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e8e:	4b2f      	ldr	r3, [pc, #188]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e9a:	d107      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e9c:	f107 0318 	add.w	r3, r7, #24
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 fab7 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eaa:	e28e      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb0:	e28b      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006eb2:	4b26      	ldr	r3, [pc, #152]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ebe:	d107      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ec0:	f107 030c 	add.w	r3, r7, #12
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fbf9 	bl	80076bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ece:	e27c      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ed4:	e279      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ed6:	4b1d      	ldr	r3, [pc, #116]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ede:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ee0:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d10c      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8006eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ef2:	4b16      	ldr	r3, [pc, #88]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	08db      	lsrs	r3, r3, #3
 8006ef8:	f003 0303 	and.w	r3, r3, #3
 8006efc:	4a14      	ldr	r2, [pc, #80]	; (8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006efe:	fa22 f303 	lsr.w	r3, r2, r3
 8006f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f04:	e01e      	b.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f06:	4b11      	ldr	r3, [pc, #68]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f12:	d106      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f1a:	d102      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f20:	e010      	b.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f22:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f2e:	d106      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f36:	d102      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f38:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f3c:	e002      	b.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006f42:	e242      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006f44:	e241      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f46:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f4a:	e23e      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006f4c:	58024400 	.word	0x58024400
 8006f50:	03d09000 	.word	0x03d09000
 8006f54:	003d0900 	.word	0x003d0900
 8006f58:	007a1200 	.word	0x007a1200
 8006f5c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f64:	e231      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f6a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006f6e:	430b      	orrs	r3, r1
 8006f70:	f040 8085 	bne.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006f74:	4b9c      	ldr	r3, [pc, #624]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f78:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006f7c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f84:	d06b      	beq.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f8c:	d874      	bhi.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f94:	d056      	beq.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8006f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f9c:	d86c      	bhi.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fa4:	d03b      	beq.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fac:	d864      	bhi.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb4:	d021      	beq.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fbc:	d85c      	bhi.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d004      	beq.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fca:	d004      	beq.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8006fcc:	e054      	b.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006fce:	f7fe fb49 	bl	8005664 <HAL_RCC_GetPCLK1Freq>
 8006fd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006fd4:	e1f9      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fd6:	4b84      	ldr	r3, [pc, #528]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fe2:	d107      	bne.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe4:	f107 0318 	add.w	r3, r7, #24
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fa13 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ff2:	e1ea      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ff8:	e1e7      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ffa:	4b7b      	ldr	r3, [pc, #492]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007002:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007006:	d107      	bne.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007008:	f107 030c 	add.w	r3, r7, #12
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fb55 	bl	80076bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007016:	e1d8      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800701c:	e1d5      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800701e:	4b72      	ldr	r3, [pc, #456]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0304 	and.w	r3, r3, #4
 8007026:	2b04      	cmp	r3, #4
 8007028:	d109      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800702a:	4b6f      	ldr	r3, [pc, #444]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	08db      	lsrs	r3, r3, #3
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	4a6d      	ldr	r2, [pc, #436]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007036:	fa22 f303 	lsr.w	r3, r2, r3
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800703c:	e1c5      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007042:	e1c2      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007044:	4b68      	ldr	r3, [pc, #416]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007050:	d102      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8007052:	4b67      	ldr	r3, [pc, #412]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007054:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007056:	e1b8      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800705c:	e1b5      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800705e:	4b62      	ldr	r3, [pc, #392]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800706a:	d102      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800706c:	4b61      	ldr	r3, [pc, #388]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800706e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007070:	e1ab      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007072:	2300      	movs	r3, #0
 8007074:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007076:	e1a8      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800707c:	e1a5      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800707e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007082:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007086:	430b      	orrs	r3, r1
 8007088:	d173      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800708a:	4b57      	ldr	r3, [pc, #348]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800708c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007092:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800709a:	d02f      	beq.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070a2:	d863      	bhi.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d004      	beq.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b0:	d012      	beq.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80070b2:	e05b      	b.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070b4:	4b4c      	ldr	r3, [pc, #304]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070c0:	d107      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070c2:	f107 0318 	add.w	r3, r7, #24
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 f9a4 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070d0:	e17b      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070d2:	2300      	movs	r3, #0
 80070d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070d6:	e178      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070d8:	4b43      	ldr	r3, [pc, #268]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e4:	d107      	bne.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070e6:	f107 030c 	add.w	r3, r7, #12
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fae6 	bl	80076bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070f4:	e169      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070fa:	e166      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070fc:	4b3a      	ldr	r3, [pc, #232]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80070fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007104:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007106:	4b38      	ldr	r3, [pc, #224]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b04      	cmp	r3, #4
 8007110:	d10c      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8007112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007114:	2b00      	cmp	r3, #0
 8007116:	d109      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007118:	4b33      	ldr	r3, [pc, #204]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	08db      	lsrs	r3, r3, #3
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	4a32      	ldr	r2, [pc, #200]	; (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
 8007128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800712a:	e01e      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800712c:	4b2e      	ldr	r3, [pc, #184]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007138:	d106      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800713a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007140:	d102      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007142:	4b2b      	ldr	r3, [pc, #172]	; (80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007146:	e010      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007148:	4b27      	ldr	r3, [pc, #156]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007154:	d106      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800715c:	d102      	bne.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800715e:	4b25      	ldr	r3, [pc, #148]	; (80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8007160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007162:	e002      	b.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007168:	e12f      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800716a:	e12e      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007170:	e12b      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007176:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800717a:	430b      	orrs	r3, r1
 800717c:	d13c      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800717e:	4b1a      	ldr	r3, [pc, #104]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007186:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	2b00      	cmp	r3, #0
 800718c:	d004      	beq.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007194:	d012      	beq.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8007196:	e023      	b.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007198:	4b13      	ldr	r3, [pc, #76]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071a4:	d107      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 fbda 	bl	8007964 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071b4:	e109      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ba:	e106      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071bc:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071c8:	d107      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ca:	f107 0318 	add.w	r3, r7, #24
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 f920 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071d8:	e0f7      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071de:	e0f4      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e4:	e0f1      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80071e6:	bf00      	nop
 80071e8:	58024400 	.word	0x58024400
 80071ec:	03d09000 	.word	0x03d09000
 80071f0:	003d0900 	.word	0x003d0900
 80071f4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80071f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071fc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007200:	430b      	orrs	r3, r1
 8007202:	f040 8091 	bne.w	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007206:	4b73      	ldr	r3, [pc, #460]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800720e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007212:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007216:	f000 8081 	beq.w	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800721a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007220:	d87f      	bhi.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007228:	d06b      	beq.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007230:	d877      	bhi.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007238:	d056      	beq.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800723a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007240:	d86f      	bhi.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007248:	d03b      	beq.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007250:	d867      	bhi.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007258:	d021      	beq.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007260:	d85f      	bhi.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	2b00      	cmp	r3, #0
 8007266:	d004      	beq.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800726e:	d004      	beq.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007270:	e057      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007272:	f000 f8b9 	bl	80073e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007276:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007278:	e0a7      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800727a:	4b56      	ldr	r3, [pc, #344]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007286:	d107      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007288:	f107 0318 	add.w	r3, r7, #24
 800728c:	4618      	mov	r0, r3
 800728e:	f000 f8c1 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007296:	e098      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800729c:	e095      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800729e:	4b4d      	ldr	r3, [pc, #308]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072aa:	d107      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072ac:	f107 030c 	add.w	r3, r7, #12
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fa03 	bl	80076bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072ba:	e086      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80072bc:	2300      	movs	r3, #0
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072c0:	e083      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072c2:	4b44      	ldr	r3, [pc, #272]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0304 	and.w	r3, r3, #4
 80072ca:	2b04      	cmp	r3, #4
 80072cc:	d109      	bne.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072ce:	4b41      	ldr	r3, [pc, #260]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	08db      	lsrs	r3, r3, #3
 80072d4:	f003 0303 	and.w	r3, r3, #3
 80072d8:	4a3f      	ldr	r2, [pc, #252]	; (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80072da:	fa22 f303 	lsr.w	r3, r2, r3
 80072de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072e0:	e073      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072e6:	e070      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80072e8:	4b3a      	ldr	r3, [pc, #232]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f4:	d102      	bne.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80072f6:	4b39      	ldr	r3, [pc, #228]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072fa:	e066      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007300:	e063      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007302:	4b34      	ldr	r3, [pc, #208]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800730e:	d102      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8007310:	4b33      	ldr	r3, [pc, #204]	; (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007314:	e059      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800731a:	e056      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800731c:	4b31      	ldr	r3, [pc, #196]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800731e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007320:	e053      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007326:	e050      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800732c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007330:	430b      	orrs	r3, r1
 8007332:	d148      	bne.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007334:	4b27      	ldr	r3, [pc, #156]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007338:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800733c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800733e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007344:	d02a      	beq.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8007346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800734c:	d838      	bhi.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	2b00      	cmp	r3, #0
 8007352:	d004      	beq.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8007354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800735a:	d00d      	beq.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800735c:	e030      	b.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800735e:	4b1d      	ldr	r3, [pc, #116]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007366:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800736a:	d102      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800736c:	4b1c      	ldr	r3, [pc, #112]	; (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800736e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007370:	e02b      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007372:	2300      	movs	r3, #0
 8007374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007376:	e028      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007378:	4b16      	ldr	r3, [pc, #88]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007380:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007384:	d107      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800738a:	4618      	mov	r0, r3
 800738c:	f000 faea 	bl	8007964 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007394:	e019      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800739a:	e016      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800739c:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073a8:	d107      	bne.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073aa:	f107 0318 	add.w	r3, r7, #24
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 f830 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073b8:	e007      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073be:	e004      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80073c0:	2300      	movs	r3, #0
 80073c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073c4:	e001      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80073ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3740      	adds	r7, #64	; 0x40
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	58024400 	.word	0x58024400
 80073d8:	03d09000 	.word	0x03d09000
 80073dc:	003d0900 	.word	0x003d0900
 80073e0:	007a1200 	.word	0x007a1200
 80073e4:	00bb8000 	.word	0x00bb8000

080073e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80073ec:	f7fe f90a 	bl	8005604 <HAL_RCC_GetHCLKFreq>
 80073f0:	4602      	mov	r2, r0
 80073f2:	4b06      	ldr	r3, [pc, #24]	; (800740c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	091b      	lsrs	r3, r3, #4
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	4904      	ldr	r1, [pc, #16]	; (8007410 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80073fe:	5ccb      	ldrb	r3, [r1, r3]
 8007400:	f003 031f 	and.w	r3, r3, #31
 8007404:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007408:	4618      	mov	r0, r3
 800740a:	bd80      	pop	{r7, pc}
 800740c:	58024400 	.word	0x58024400
 8007410:	08009e2c 	.word	0x08009e2c

08007414 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007414:	b480      	push	{r7}
 8007416:	b089      	sub	sp, #36	; 0x24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800741c:	4ba1      	ldr	r3, [pc, #644]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	f003 0303 	and.w	r3, r3, #3
 8007424:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007426:	4b9f      	ldr	r3, [pc, #636]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	0b1b      	lsrs	r3, r3, #12
 800742c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007430:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007432:	4b9c      	ldr	r3, [pc, #624]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007436:	091b      	lsrs	r3, r3, #4
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800743e:	4b99      	ldr	r3, [pc, #612]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007442:	08db      	lsrs	r3, r3, #3
 8007444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	fb02 f303 	mul.w	r3, r2, r3
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007456:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 8111 	beq.w	8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b02      	cmp	r3, #2
 8007466:	f000 8083 	beq.w	8007570 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	2b02      	cmp	r3, #2
 800746e:	f200 80a1 	bhi.w	80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d056      	beq.n	800752c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800747e:	e099      	b.n	80075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007480:	4b88      	ldr	r3, [pc, #544]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0320 	and.w	r3, r3, #32
 8007488:	2b00      	cmp	r3, #0
 800748a:	d02d      	beq.n	80074e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800748c:	4b85      	ldr	r3, [pc, #532]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	08db      	lsrs	r3, r3, #3
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	4a84      	ldr	r2, [pc, #528]	; (80076a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007498:	fa22 f303 	lsr.w	r3, r2, r3
 800749c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	ee07 3a90 	vmov	s15, r3
 80074a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b6:	4b7b      	ldr	r3, [pc, #492]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074e6:	e087      	b.n	80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fa:	4b6a      	ldr	r3, [pc, #424]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750a:	ed97 6a03 	vldr	s12, [r7, #12]
 800750e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800751e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800752a:	e065      	b.n	80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007536:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800753a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753e:	4b59      	ldr	r3, [pc, #356]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007552:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800756e:	e043      	b.n	80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80076b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800757e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007582:	4b48      	ldr	r3, [pc, #288]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007592:	ed97 6a03 	vldr	s12, [r7, #12]
 8007596:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800759a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075b2:	e021      	b.n	80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c6:	4b37      	ldr	r3, [pc, #220]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80075f8:	4b2a      	ldr	r3, [pc, #168]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fc:	0a5b      	lsrs	r3, r3, #9
 80075fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800760e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007612:	edd7 6a07 	vldr	s13, [r7, #28]
 8007616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800761a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800761e:	ee17 2a90 	vmov	r2, s15
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007626:	4b1f      	ldr	r3, [pc, #124]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	0c1b      	lsrs	r3, r3, #16
 800762c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007630:	ee07 3a90 	vmov	s15, r3
 8007634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007638:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800763c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007640:	edd7 6a07 	vldr	s13, [r7, #28]
 8007644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764c:	ee17 2a90 	vmov	r2, s15
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007654:	4b13      	ldr	r3, [pc, #76]	; (80076a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	0e1b      	lsrs	r3, r3, #24
 800765a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800766a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800766e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800767a:	ee17 2a90 	vmov	r2, s15
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007682:	e008      	b.n	8007696 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	609a      	str	r2, [r3, #8]
}
 8007696:	bf00      	nop
 8007698:	3724      	adds	r7, #36	; 0x24
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	58024400 	.word	0x58024400
 80076a8:	03d09000 	.word	0x03d09000
 80076ac:	46000000 	.word	0x46000000
 80076b0:	4c742400 	.word	0x4c742400
 80076b4:	4a742400 	.word	0x4a742400
 80076b8:	4af42400 	.word	0x4af42400

080076bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80076bc:	b480      	push	{r7}
 80076be:	b089      	sub	sp, #36	; 0x24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076c4:	4ba1      	ldr	r3, [pc, #644]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c8:	f003 0303 	and.w	r3, r3, #3
 80076cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80076ce:	4b9f      	ldr	r3, [pc, #636]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d2:	0d1b      	lsrs	r3, r3, #20
 80076d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076da:	4b9c      	ldr	r3, [pc, #624]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	0a1b      	lsrs	r3, r3, #8
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80076e6:	4b99      	ldr	r3, [pc, #612]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ea:	08db      	lsrs	r3, r3, #3
 80076ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	fb02 f303 	mul.w	r3, r2, r3
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 8111 	beq.w	800792c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	2b02      	cmp	r3, #2
 800770e:	f000 8083 	beq.w	8007818 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	2b02      	cmp	r3, #2
 8007716:	f200 80a1 	bhi.w	800785c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d056      	beq.n	80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007726:	e099      	b.n	800785c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007728:	4b88      	ldr	r3, [pc, #544]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b00      	cmp	r3, #0
 8007732:	d02d      	beq.n	8007790 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007734:	4b85      	ldr	r3, [pc, #532]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	08db      	lsrs	r3, r3, #3
 800773a:	f003 0303 	and.w	r3, r3, #3
 800773e:	4a84      	ldr	r2, [pc, #528]	; (8007950 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007740:	fa22 f303 	lsr.w	r3, r2, r3
 8007744:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	ee07 3a90 	vmov	s15, r3
 800774c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800775a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775e:	4b7b      	ldr	r3, [pc, #492]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007766:	ee07 3a90 	vmov	s15, r3
 800776a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007772:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800777a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800778a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800778e:	e087      	b.n	80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800779e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a2:	4b6a      	ldr	r3, [pc, #424]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077aa:	ee07 3a90 	vmov	s15, r3
 80077ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077d2:	e065      	b.n	80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800795c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e6:	4b59      	ldr	r3, [pc, #356]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800780a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800780e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007816:	e043      	b.n	80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007822:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007960 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800782a:	4b48      	ldr	r3, [pc, #288]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783a:	ed97 6a03 	vldr	s12, [r7, #12]
 800783e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800784a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800784e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800785a:	e021      	b.n	80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007866:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800795c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800786a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800786e:	4b37      	ldr	r3, [pc, #220]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800787e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007882:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007954 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800788a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800788e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800789a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800789e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80078a0:	4b2a      	ldr	r3, [pc, #168]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a4:	0a5b      	lsrs	r3, r3, #9
 80078a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078aa:	ee07 3a90 	vmov	s15, r3
 80078ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80078be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c6:	ee17 2a90 	vmov	r2, s15
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80078ce:	4b1f      	ldr	r3, [pc, #124]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	0c1b      	lsrs	r3, r3, #16
 80078d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d8:	ee07 3a90 	vmov	s15, r3
 80078dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f4:	ee17 2a90 	vmov	r2, s15
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80078fc:	4b13      	ldr	r3, [pc, #76]	; (800794c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	0e1b      	lsrs	r3, r3, #24
 8007902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007912:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007916:	edd7 6a07 	vldr	s13, [r7, #28]
 800791a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800791e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007922:	ee17 2a90 	vmov	r2, s15
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800792a:	e008      	b.n	800793e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	609a      	str	r2, [r3, #8]
}
 800793e:	bf00      	nop
 8007940:	3724      	adds	r7, #36	; 0x24
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	58024400 	.word	0x58024400
 8007950:	03d09000 	.word	0x03d09000
 8007954:	46000000 	.word	0x46000000
 8007958:	4c742400 	.word	0x4c742400
 800795c:	4a742400 	.word	0x4a742400
 8007960:	4af42400 	.word	0x4af42400

08007964 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007964:	b480      	push	{r7}
 8007966:	b089      	sub	sp, #36	; 0x24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800796c:	4ba0      	ldr	r3, [pc, #640]	; (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800796e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007970:	f003 0303 	and.w	r3, r3, #3
 8007974:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007976:	4b9e      	ldr	r3, [pc, #632]	; (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797a:	091b      	lsrs	r3, r3, #4
 800797c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007980:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007982:	4b9b      	ldr	r3, [pc, #620]	; (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800798c:	4b98      	ldr	r3, [pc, #608]	; (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800798e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007990:	08db      	lsrs	r3, r3, #3
 8007992:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	fb02 f303 	mul.w	r3, r2, r3
 800799c:	ee07 3a90 	vmov	s15, r3
 80079a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 8111 	beq.w	8007bd2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	f000 8083 	beq.w	8007abe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	f200 80a1 	bhi.w	8007b02 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d003      	beq.n	80079ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d056      	beq.n	8007a7a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80079cc:	e099      	b.n	8007b02 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079ce:	4b88      	ldr	r3, [pc, #544]	; (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d02d      	beq.n	8007a36 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079da:	4b85      	ldr	r3, [pc, #532]	; (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	08db      	lsrs	r3, r3, #3
 80079e0:	f003 0303 	and.w	r3, r3, #3
 80079e4:	4a83      	ldr	r2, [pc, #524]	; (8007bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80079e6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	ee07 3a90 	vmov	s15, r3
 80079fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a04:	4b7a      	ldr	r3, [pc, #488]	; (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a0c:	ee07 3a90 	vmov	s15, r3
 8007a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a18:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a30:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a34:	e087      	b.n	8007b46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	ee07 3a90 	vmov	s15, r3
 8007a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a40:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007bfc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a48:	4b69      	ldr	r3, [pc, #420]	; (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a50:	ee07 3a90 	vmov	s15, r3
 8007a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a58:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a5c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a78:	e065      	b.n	8007b46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	ee07 3a90 	vmov	s15, r3
 8007a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a84:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007c00 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a8c:	4b58      	ldr	r3, [pc, #352]	; (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a94:	ee07 3a90 	vmov	s15, r3
 8007a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aa0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007aa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ab8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007abc:	e043      	b.n	8007b46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	ee07 3a90 	vmov	s15, r3
 8007ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007c04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007acc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad0:	4b47      	ldr	r3, [pc, #284]	; (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad8:	ee07 3a90 	vmov	s15, r3
 8007adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ae4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ae8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007af0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007af4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007afc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b00:	e021      	b.n	8007b46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	ee07 3a90 	vmov	s15, r3
 8007b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007bfc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007b10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b14:	4b36      	ldr	r3, [pc, #216]	; (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b1c:	ee07 3a90 	vmov	s15, r3
 8007b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b24:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b28:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007bf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b44:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007b46:	4b2a      	ldr	r3, [pc, #168]	; (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4a:	0a5b      	lsrs	r3, r3, #9
 8007b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b50:	ee07 3a90 	vmov	s15, r3
 8007b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b60:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b6c:	ee17 2a90 	vmov	r2, s15
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007b74:	4b1e      	ldr	r3, [pc, #120]	; (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	0c1b      	lsrs	r3, r3, #16
 8007b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b9a:	ee17 2a90 	vmov	r2, s15
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007ba2:	4b13      	ldr	r3, [pc, #76]	; (8007bf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba6:	0e1b      	lsrs	r3, r3, #24
 8007ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bac:	ee07 3a90 	vmov	s15, r3
 8007bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc8:	ee17 2a90 	vmov	r2, s15
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007bd0:	e008      	b.n	8007be4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	609a      	str	r2, [r3, #8]
}
 8007be4:	bf00      	nop
 8007be6:	3724      	adds	r7, #36	; 0x24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	58024400 	.word	0x58024400
 8007bf4:	03d09000 	.word	0x03d09000
 8007bf8:	46000000 	.word	0x46000000
 8007bfc:	4c742400 	.word	0x4c742400
 8007c00:	4a742400 	.word	0x4a742400
 8007c04:	4af42400 	.word	0x4af42400

08007c08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c16:	4b53      	ldr	r3, [pc, #332]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d101      	bne.n	8007c26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e099      	b.n	8007d5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007c26:	4b4f      	ldr	r3, [pc, #316]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a4e      	ldr	r2, [pc, #312]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007c2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c32:	f7fb f9e7 	bl	8003004 <HAL_GetTick>
 8007c36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c38:	e008      	b.n	8007c4c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c3a:	f7fb f9e3 	bl	8003004 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d901      	bls.n	8007c4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e086      	b.n	8007d5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c4c:	4b45      	ldr	r3, [pc, #276]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1f0      	bne.n	8007c3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007c58:	4b42      	ldr	r3, [pc, #264]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	031b      	lsls	r3, r3, #12
 8007c66:	493f      	ldr	r1, [pc, #252]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	628b      	str	r3, [r1, #40]	; 0x28
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	025b      	lsls	r3, r3, #9
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	041b      	lsls	r3, r3, #16
 8007c8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	061b      	lsls	r3, r3, #24
 8007c98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c9c:	4931      	ldr	r1, [pc, #196]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ca2:	4b30      	ldr	r3, [pc, #192]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	492d      	ldr	r1, [pc, #180]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007cb4:	4b2b      	ldr	r3, [pc, #172]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	f023 0220 	bic.w	r2, r3, #32
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	4928      	ldr	r1, [pc, #160]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007cc6:	4b27      	ldr	r3, [pc, #156]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cca:	4a26      	ldr	r2, [pc, #152]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007ccc:	f023 0310 	bic.w	r3, r3, #16
 8007cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cd2:	4b24      	ldr	r3, [pc, #144]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cd6:	4b24      	ldr	r3, [pc, #144]	; (8007d68 <RCCEx_PLL2_Config+0x160>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	69d2      	ldr	r2, [r2, #28]
 8007cde:	00d2      	lsls	r2, r2, #3
 8007ce0:	4920      	ldr	r1, [pc, #128]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007ce6:	4b1f      	ldr	r3, [pc, #124]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	4a1e      	ldr	r2, [pc, #120]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cec:	f043 0310 	orr.w	r3, r3, #16
 8007cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d106      	bne.n	8007d06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007cf8:	4b1a      	ldr	r3, [pc, #104]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfc:	4a19      	ldr	r2, [pc, #100]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007cfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d04:	e00f      	b.n	8007d26 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d106      	bne.n	8007d1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007d0c:	4b15      	ldr	r3, [pc, #84]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	4a14      	ldr	r2, [pc, #80]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d18:	e005      	b.n	8007d26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007d1a:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1e:	4a11      	ldr	r2, [pc, #68]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007d20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007d26:	4b0f      	ldr	r3, [pc, #60]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a0e      	ldr	r2, [pc, #56]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007d2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d32:	f7fb f967 	bl	8003004 <HAL_GetTick>
 8007d36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d38:	e008      	b.n	8007d4c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d3a:	f7fb f963 	bl	8003004 <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d901      	bls.n	8007d4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e006      	b.n	8007d5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d4c:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <RCCEx_PLL2_Config+0x15c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d0f0      	beq.n	8007d3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	58024400 	.word	0x58024400
 8007d68:	ffff0007 	.word	0xffff0007

08007d6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d7a:	4b53      	ldr	r3, [pc, #332]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7e:	f003 0303 	and.w	r3, r3, #3
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d101      	bne.n	8007d8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e099      	b.n	8007ebe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d8a:	4b4f      	ldr	r3, [pc, #316]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a4e      	ldr	r2, [pc, #312]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d96:	f7fb f935 	bl	8003004 <HAL_GetTick>
 8007d9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d9c:	e008      	b.n	8007db0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d9e:	f7fb f931 	bl	8003004 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d901      	bls.n	8007db0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e086      	b.n	8007ebe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007db0:	4b45      	ldr	r3, [pc, #276]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1f0      	bne.n	8007d9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007dbc:	4b42      	ldr	r3, [pc, #264]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	051b      	lsls	r3, r3, #20
 8007dca:	493f      	ldr	r1, [pc, #252]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	628b      	str	r3, [r1, #40]	; 0x28
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	025b      	lsls	r3, r3, #9
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	431a      	orrs	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	3b01      	subs	r3, #1
 8007dec:	041b      	lsls	r3, r3, #16
 8007dee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007df2:	431a      	orrs	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	061b      	lsls	r3, r3, #24
 8007dfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e00:	4931      	ldr	r1, [pc, #196]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e06:	4b30      	ldr	r3, [pc, #192]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	492d      	ldr	r1, [pc, #180]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e18:	4b2b      	ldr	r3, [pc, #172]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	4928      	ldr	r1, [pc, #160]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e2a:	4b27      	ldr	r3, [pc, #156]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2e:	4a26      	ldr	r2, [pc, #152]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e36:	4b24      	ldr	r3, [pc, #144]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e3a:	4b24      	ldr	r3, [pc, #144]	; (8007ecc <RCCEx_PLL3_Config+0x160>)
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	69d2      	ldr	r2, [r2, #28]
 8007e42:	00d2      	lsls	r2, r2, #3
 8007e44:	4920      	ldr	r1, [pc, #128]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007e4a:	4b1f      	ldr	r3, [pc, #124]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4e:	4a1e      	ldr	r2, [pc, #120]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d106      	bne.n	8007e6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007e5c:	4b1a      	ldr	r3, [pc, #104]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	4a19      	ldr	r2, [pc, #100]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e68:	e00f      	b.n	8007e8a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d106      	bne.n	8007e7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007e70:	4b15      	ldr	r3, [pc, #84]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e74:	4a14      	ldr	r2, [pc, #80]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e7c:	e005      	b.n	8007e8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007e7e:	4b12      	ldr	r3, [pc, #72]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e82:	4a11      	ldr	r2, [pc, #68]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e8a:	4b0f      	ldr	r3, [pc, #60]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a0e      	ldr	r2, [pc, #56]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e96:	f7fb f8b5 	bl	8003004 <HAL_GetTick>
 8007e9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e9c:	e008      	b.n	8007eb0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e9e:	f7fb f8b1 	bl	8003004 <HAL_GetTick>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d901      	bls.n	8007eb0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e006      	b.n	8007ebe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007eb0:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <RCCEx_PLL3_Config+0x15c>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d0f0      	beq.n	8007e9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	58024400 	.word	0x58024400
 8007ecc:	ffff0007 	.word	0xffff0007

08007ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e042      	b.n	8007f68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d106      	bne.n	8007efa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7f9 f907 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2224      	movs	r2, #36	; 0x24
 8007efe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0201 	bic.w	r2, r2, #1
 8007f10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f8ba 	bl	800808c <UART_SetConfig>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e022      	b.n	8007f68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 ff1a 	bl	8008d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0201 	orr.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 ffa1 	bl	8008ea8 <UART_CheckIdleState>
 8007f66:	4603      	mov	r3, r0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b08a      	sub	sp, #40	; 0x28
 8007f74:	af02      	add	r7, sp, #8
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	d17b      	bne.n	8008082 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d002      	beq.n	8007f96 <HAL_UART_Transmit+0x26>
 8007f90:	88fb      	ldrh	r3, [r7, #6]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e074      	b.n	8008084 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2221      	movs	r2, #33	; 0x21
 8007fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007faa:	f7fb f82b 	bl	8003004 <HAL_GetTick>
 8007fae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	88fa      	ldrh	r2, [r7, #6]
 8007fb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	88fa      	ldrh	r2, [r7, #6]
 8007fbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fc8:	d108      	bne.n	8007fdc <HAL_UART_Transmit+0x6c>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d104      	bne.n	8007fdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	61bb      	str	r3, [r7, #24]
 8007fda:	e003      	b.n	8007fe4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007fe4:	e030      	b.n	8008048 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2200      	movs	r2, #0
 8007fee:	2180      	movs	r1, #128	; 0x80
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f001 f803 	bl	8008ffc <UART_WaitOnFlagUntilTimeout>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d005      	beq.n	8008008 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e03d      	b.n	8008084 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10b      	bne.n	8008026 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800801c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	3302      	adds	r3, #2
 8008022:	61bb      	str	r3, [r7, #24]
 8008024:	e007      	b.n	8008036 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	781a      	ldrb	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	3301      	adds	r3, #1
 8008034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	b29a      	uxth	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800804e:	b29b      	uxth	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1c8      	bne.n	8007fe6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2200      	movs	r2, #0
 800805c:	2140      	movs	r1, #64	; 0x40
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 ffcc 	bl	8008ffc <UART_WaitOnFlagUntilTimeout>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d005      	beq.n	8008076 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2220      	movs	r2, #32
 800806e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e006      	b.n	8008084 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2220      	movs	r2, #32
 800807a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	e000      	b.n	8008084 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008082:	2302      	movs	r3, #2
  }
}
 8008084:	4618      	mov	r0, r3
 8008086:	3720      	adds	r7, #32
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800808c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008090:	b092      	sub	sp, #72	; 0x48
 8008092:	af00      	add	r7, sp, #0
 8008094:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	431a      	orrs	r2, r3
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	431a      	orrs	r2, r3
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	4bbe      	ldr	r3, [pc, #760]	; (80083b4 <UART_SetConfig+0x328>)
 80080bc:	4013      	ands	r3, r2
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	6812      	ldr	r2, [r2, #0]
 80080c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080c4:	430b      	orrs	r3, r1
 80080c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4ab3      	ldr	r2, [pc, #716]	; (80083b8 <UART_SetConfig+0x32c>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d004      	beq.n	80080f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080f4:	4313      	orrs	r3, r2
 80080f6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	689a      	ldr	r2, [r3, #8]
 80080fe:	4baf      	ldr	r3, [pc, #700]	; (80083bc <UART_SetConfig+0x330>)
 8008100:	4013      	ands	r3, r2
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	6812      	ldr	r2, [r2, #0]
 8008106:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008108:	430b      	orrs	r3, r1
 800810a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008112:	f023 010f 	bic.w	r1, r3, #15
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4aa6      	ldr	r2, [pc, #664]	; (80083c0 <UART_SetConfig+0x334>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d177      	bne.n	800821c <UART_SetConfig+0x190>
 800812c:	4ba5      	ldr	r3, [pc, #660]	; (80083c4 <UART_SetConfig+0x338>)
 800812e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008134:	2b28      	cmp	r3, #40	; 0x28
 8008136:	d86d      	bhi.n	8008214 <UART_SetConfig+0x188>
 8008138:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <UART_SetConfig+0xb4>)
 800813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813e:	bf00      	nop
 8008140:	080081e5 	.word	0x080081e5
 8008144:	08008215 	.word	0x08008215
 8008148:	08008215 	.word	0x08008215
 800814c:	08008215 	.word	0x08008215
 8008150:	08008215 	.word	0x08008215
 8008154:	08008215 	.word	0x08008215
 8008158:	08008215 	.word	0x08008215
 800815c:	08008215 	.word	0x08008215
 8008160:	080081ed 	.word	0x080081ed
 8008164:	08008215 	.word	0x08008215
 8008168:	08008215 	.word	0x08008215
 800816c:	08008215 	.word	0x08008215
 8008170:	08008215 	.word	0x08008215
 8008174:	08008215 	.word	0x08008215
 8008178:	08008215 	.word	0x08008215
 800817c:	08008215 	.word	0x08008215
 8008180:	080081f5 	.word	0x080081f5
 8008184:	08008215 	.word	0x08008215
 8008188:	08008215 	.word	0x08008215
 800818c:	08008215 	.word	0x08008215
 8008190:	08008215 	.word	0x08008215
 8008194:	08008215 	.word	0x08008215
 8008198:	08008215 	.word	0x08008215
 800819c:	08008215 	.word	0x08008215
 80081a0:	080081fd 	.word	0x080081fd
 80081a4:	08008215 	.word	0x08008215
 80081a8:	08008215 	.word	0x08008215
 80081ac:	08008215 	.word	0x08008215
 80081b0:	08008215 	.word	0x08008215
 80081b4:	08008215 	.word	0x08008215
 80081b8:	08008215 	.word	0x08008215
 80081bc:	08008215 	.word	0x08008215
 80081c0:	08008205 	.word	0x08008205
 80081c4:	08008215 	.word	0x08008215
 80081c8:	08008215 	.word	0x08008215
 80081cc:	08008215 	.word	0x08008215
 80081d0:	08008215 	.word	0x08008215
 80081d4:	08008215 	.word	0x08008215
 80081d8:	08008215 	.word	0x08008215
 80081dc:	08008215 	.word	0x08008215
 80081e0:	0800820d 	.word	0x0800820d
 80081e4:	2301      	movs	r3, #1
 80081e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ea:	e326      	b.n	800883a <UART_SetConfig+0x7ae>
 80081ec:	2304      	movs	r3, #4
 80081ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081f2:	e322      	b.n	800883a <UART_SetConfig+0x7ae>
 80081f4:	2308      	movs	r3, #8
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081fa:	e31e      	b.n	800883a <UART_SetConfig+0x7ae>
 80081fc:	2310      	movs	r3, #16
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008202:	e31a      	b.n	800883a <UART_SetConfig+0x7ae>
 8008204:	2320      	movs	r3, #32
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820a:	e316      	b.n	800883a <UART_SetConfig+0x7ae>
 800820c:	2340      	movs	r3, #64	; 0x40
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008212:	e312      	b.n	800883a <UART_SetConfig+0x7ae>
 8008214:	2380      	movs	r3, #128	; 0x80
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821a:	e30e      	b.n	800883a <UART_SetConfig+0x7ae>
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a69      	ldr	r2, [pc, #420]	; (80083c8 <UART_SetConfig+0x33c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d130      	bne.n	8008288 <UART_SetConfig+0x1fc>
 8008226:	4b67      	ldr	r3, [pc, #412]	; (80083c4 <UART_SetConfig+0x338>)
 8008228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822a:	f003 0307 	and.w	r3, r3, #7
 800822e:	2b05      	cmp	r3, #5
 8008230:	d826      	bhi.n	8008280 <UART_SetConfig+0x1f4>
 8008232:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <UART_SetConfig+0x1ac>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	08008251 	.word	0x08008251
 800823c:	08008259 	.word	0x08008259
 8008240:	08008261 	.word	0x08008261
 8008244:	08008269 	.word	0x08008269
 8008248:	08008271 	.word	0x08008271
 800824c:	08008279 	.word	0x08008279
 8008250:	2300      	movs	r3, #0
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008256:	e2f0      	b.n	800883a <UART_SetConfig+0x7ae>
 8008258:	2304      	movs	r3, #4
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800825e:	e2ec      	b.n	800883a <UART_SetConfig+0x7ae>
 8008260:	2308      	movs	r3, #8
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008266:	e2e8      	b.n	800883a <UART_SetConfig+0x7ae>
 8008268:	2310      	movs	r3, #16
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826e:	e2e4      	b.n	800883a <UART_SetConfig+0x7ae>
 8008270:	2320      	movs	r3, #32
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008276:	e2e0      	b.n	800883a <UART_SetConfig+0x7ae>
 8008278:	2340      	movs	r3, #64	; 0x40
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827e:	e2dc      	b.n	800883a <UART_SetConfig+0x7ae>
 8008280:	2380      	movs	r3, #128	; 0x80
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008286:	e2d8      	b.n	800883a <UART_SetConfig+0x7ae>
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a4f      	ldr	r2, [pc, #316]	; (80083cc <UART_SetConfig+0x340>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d130      	bne.n	80082f4 <UART_SetConfig+0x268>
 8008292:	4b4c      	ldr	r3, [pc, #304]	; (80083c4 <UART_SetConfig+0x338>)
 8008294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	2b05      	cmp	r3, #5
 800829c:	d826      	bhi.n	80082ec <UART_SetConfig+0x260>
 800829e:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <UART_SetConfig+0x218>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	080082bd 	.word	0x080082bd
 80082a8:	080082c5 	.word	0x080082c5
 80082ac:	080082cd 	.word	0x080082cd
 80082b0:	080082d5 	.word	0x080082d5
 80082b4:	080082dd 	.word	0x080082dd
 80082b8:	080082e5 	.word	0x080082e5
 80082bc:	2300      	movs	r3, #0
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c2:	e2ba      	b.n	800883a <UART_SetConfig+0x7ae>
 80082c4:	2304      	movs	r3, #4
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ca:	e2b6      	b.n	800883a <UART_SetConfig+0x7ae>
 80082cc:	2308      	movs	r3, #8
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d2:	e2b2      	b.n	800883a <UART_SetConfig+0x7ae>
 80082d4:	2310      	movs	r3, #16
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082da:	e2ae      	b.n	800883a <UART_SetConfig+0x7ae>
 80082dc:	2320      	movs	r3, #32
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e2:	e2aa      	b.n	800883a <UART_SetConfig+0x7ae>
 80082e4:	2340      	movs	r3, #64	; 0x40
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ea:	e2a6      	b.n	800883a <UART_SetConfig+0x7ae>
 80082ec:	2380      	movs	r3, #128	; 0x80
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f2:	e2a2      	b.n	800883a <UART_SetConfig+0x7ae>
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a35      	ldr	r2, [pc, #212]	; (80083d0 <UART_SetConfig+0x344>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d130      	bne.n	8008360 <UART_SetConfig+0x2d4>
 80082fe:	4b31      	ldr	r3, [pc, #196]	; (80083c4 <UART_SetConfig+0x338>)
 8008300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008302:	f003 0307 	and.w	r3, r3, #7
 8008306:	2b05      	cmp	r3, #5
 8008308:	d826      	bhi.n	8008358 <UART_SetConfig+0x2cc>
 800830a:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <UART_SetConfig+0x284>)
 800830c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008310:	08008329 	.word	0x08008329
 8008314:	08008331 	.word	0x08008331
 8008318:	08008339 	.word	0x08008339
 800831c:	08008341 	.word	0x08008341
 8008320:	08008349 	.word	0x08008349
 8008324:	08008351 	.word	0x08008351
 8008328:	2300      	movs	r3, #0
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832e:	e284      	b.n	800883a <UART_SetConfig+0x7ae>
 8008330:	2304      	movs	r3, #4
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008336:	e280      	b.n	800883a <UART_SetConfig+0x7ae>
 8008338:	2308      	movs	r3, #8
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833e:	e27c      	b.n	800883a <UART_SetConfig+0x7ae>
 8008340:	2310      	movs	r3, #16
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008346:	e278      	b.n	800883a <UART_SetConfig+0x7ae>
 8008348:	2320      	movs	r3, #32
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834e:	e274      	b.n	800883a <UART_SetConfig+0x7ae>
 8008350:	2340      	movs	r3, #64	; 0x40
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008356:	e270      	b.n	800883a <UART_SetConfig+0x7ae>
 8008358:	2380      	movs	r3, #128	; 0x80
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835e:	e26c      	b.n	800883a <UART_SetConfig+0x7ae>
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a1b      	ldr	r2, [pc, #108]	; (80083d4 <UART_SetConfig+0x348>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d142      	bne.n	80083f0 <UART_SetConfig+0x364>
 800836a:	4b16      	ldr	r3, [pc, #88]	; (80083c4 <UART_SetConfig+0x338>)
 800836c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800836e:	f003 0307 	and.w	r3, r3, #7
 8008372:	2b05      	cmp	r3, #5
 8008374:	d838      	bhi.n	80083e8 <UART_SetConfig+0x35c>
 8008376:	a201      	add	r2, pc, #4	; (adr r2, 800837c <UART_SetConfig+0x2f0>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	08008395 	.word	0x08008395
 8008380:	0800839d 	.word	0x0800839d
 8008384:	080083a5 	.word	0x080083a5
 8008388:	080083ad 	.word	0x080083ad
 800838c:	080083d9 	.word	0x080083d9
 8008390:	080083e1 	.word	0x080083e1
 8008394:	2300      	movs	r3, #0
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839a:	e24e      	b.n	800883a <UART_SetConfig+0x7ae>
 800839c:	2304      	movs	r3, #4
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a2:	e24a      	b.n	800883a <UART_SetConfig+0x7ae>
 80083a4:	2308      	movs	r3, #8
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083aa:	e246      	b.n	800883a <UART_SetConfig+0x7ae>
 80083ac:	2310      	movs	r3, #16
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e242      	b.n	800883a <UART_SetConfig+0x7ae>
 80083b4:	cfff69f3 	.word	0xcfff69f3
 80083b8:	58000c00 	.word	0x58000c00
 80083bc:	11fff4ff 	.word	0x11fff4ff
 80083c0:	40011000 	.word	0x40011000
 80083c4:	58024400 	.word	0x58024400
 80083c8:	40004400 	.word	0x40004400
 80083cc:	40004800 	.word	0x40004800
 80083d0:	40004c00 	.word	0x40004c00
 80083d4:	40005000 	.word	0x40005000
 80083d8:	2320      	movs	r3, #32
 80083da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083de:	e22c      	b.n	800883a <UART_SetConfig+0x7ae>
 80083e0:	2340      	movs	r3, #64	; 0x40
 80083e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e6:	e228      	b.n	800883a <UART_SetConfig+0x7ae>
 80083e8:	2380      	movs	r3, #128	; 0x80
 80083ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ee:	e224      	b.n	800883a <UART_SetConfig+0x7ae>
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4ab1      	ldr	r2, [pc, #708]	; (80086bc <UART_SetConfig+0x630>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d176      	bne.n	80084e8 <UART_SetConfig+0x45c>
 80083fa:	4bb1      	ldr	r3, [pc, #708]	; (80086c0 <UART_SetConfig+0x634>)
 80083fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008402:	2b28      	cmp	r3, #40	; 0x28
 8008404:	d86c      	bhi.n	80084e0 <UART_SetConfig+0x454>
 8008406:	a201      	add	r2, pc, #4	; (adr r2, 800840c <UART_SetConfig+0x380>)
 8008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840c:	080084b1 	.word	0x080084b1
 8008410:	080084e1 	.word	0x080084e1
 8008414:	080084e1 	.word	0x080084e1
 8008418:	080084e1 	.word	0x080084e1
 800841c:	080084e1 	.word	0x080084e1
 8008420:	080084e1 	.word	0x080084e1
 8008424:	080084e1 	.word	0x080084e1
 8008428:	080084e1 	.word	0x080084e1
 800842c:	080084b9 	.word	0x080084b9
 8008430:	080084e1 	.word	0x080084e1
 8008434:	080084e1 	.word	0x080084e1
 8008438:	080084e1 	.word	0x080084e1
 800843c:	080084e1 	.word	0x080084e1
 8008440:	080084e1 	.word	0x080084e1
 8008444:	080084e1 	.word	0x080084e1
 8008448:	080084e1 	.word	0x080084e1
 800844c:	080084c1 	.word	0x080084c1
 8008450:	080084e1 	.word	0x080084e1
 8008454:	080084e1 	.word	0x080084e1
 8008458:	080084e1 	.word	0x080084e1
 800845c:	080084e1 	.word	0x080084e1
 8008460:	080084e1 	.word	0x080084e1
 8008464:	080084e1 	.word	0x080084e1
 8008468:	080084e1 	.word	0x080084e1
 800846c:	080084c9 	.word	0x080084c9
 8008470:	080084e1 	.word	0x080084e1
 8008474:	080084e1 	.word	0x080084e1
 8008478:	080084e1 	.word	0x080084e1
 800847c:	080084e1 	.word	0x080084e1
 8008480:	080084e1 	.word	0x080084e1
 8008484:	080084e1 	.word	0x080084e1
 8008488:	080084e1 	.word	0x080084e1
 800848c:	080084d1 	.word	0x080084d1
 8008490:	080084e1 	.word	0x080084e1
 8008494:	080084e1 	.word	0x080084e1
 8008498:	080084e1 	.word	0x080084e1
 800849c:	080084e1 	.word	0x080084e1
 80084a0:	080084e1 	.word	0x080084e1
 80084a4:	080084e1 	.word	0x080084e1
 80084a8:	080084e1 	.word	0x080084e1
 80084ac:	080084d9 	.word	0x080084d9
 80084b0:	2301      	movs	r3, #1
 80084b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b6:	e1c0      	b.n	800883a <UART_SetConfig+0x7ae>
 80084b8:	2304      	movs	r3, #4
 80084ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084be:	e1bc      	b.n	800883a <UART_SetConfig+0x7ae>
 80084c0:	2308      	movs	r3, #8
 80084c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c6:	e1b8      	b.n	800883a <UART_SetConfig+0x7ae>
 80084c8:	2310      	movs	r3, #16
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ce:	e1b4      	b.n	800883a <UART_SetConfig+0x7ae>
 80084d0:	2320      	movs	r3, #32
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d6:	e1b0      	b.n	800883a <UART_SetConfig+0x7ae>
 80084d8:	2340      	movs	r3, #64	; 0x40
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084de:	e1ac      	b.n	800883a <UART_SetConfig+0x7ae>
 80084e0:	2380      	movs	r3, #128	; 0x80
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e6:	e1a8      	b.n	800883a <UART_SetConfig+0x7ae>
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a75      	ldr	r2, [pc, #468]	; (80086c4 <UART_SetConfig+0x638>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d130      	bne.n	8008554 <UART_SetConfig+0x4c8>
 80084f2:	4b73      	ldr	r3, [pc, #460]	; (80086c0 <UART_SetConfig+0x634>)
 80084f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b05      	cmp	r3, #5
 80084fc:	d826      	bhi.n	800854c <UART_SetConfig+0x4c0>
 80084fe:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <UART_SetConfig+0x478>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	0800851d 	.word	0x0800851d
 8008508:	08008525 	.word	0x08008525
 800850c:	0800852d 	.word	0x0800852d
 8008510:	08008535 	.word	0x08008535
 8008514:	0800853d 	.word	0x0800853d
 8008518:	08008545 	.word	0x08008545
 800851c:	2300      	movs	r3, #0
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008522:	e18a      	b.n	800883a <UART_SetConfig+0x7ae>
 8008524:	2304      	movs	r3, #4
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852a:	e186      	b.n	800883a <UART_SetConfig+0x7ae>
 800852c:	2308      	movs	r3, #8
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008532:	e182      	b.n	800883a <UART_SetConfig+0x7ae>
 8008534:	2310      	movs	r3, #16
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853a:	e17e      	b.n	800883a <UART_SetConfig+0x7ae>
 800853c:	2320      	movs	r3, #32
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008542:	e17a      	b.n	800883a <UART_SetConfig+0x7ae>
 8008544:	2340      	movs	r3, #64	; 0x40
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854a:	e176      	b.n	800883a <UART_SetConfig+0x7ae>
 800854c:	2380      	movs	r3, #128	; 0x80
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008552:	e172      	b.n	800883a <UART_SetConfig+0x7ae>
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a5b      	ldr	r2, [pc, #364]	; (80086c8 <UART_SetConfig+0x63c>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d130      	bne.n	80085c0 <UART_SetConfig+0x534>
 800855e:	4b58      	ldr	r3, [pc, #352]	; (80086c0 <UART_SetConfig+0x634>)
 8008560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008562:	f003 0307 	and.w	r3, r3, #7
 8008566:	2b05      	cmp	r3, #5
 8008568:	d826      	bhi.n	80085b8 <UART_SetConfig+0x52c>
 800856a:	a201      	add	r2, pc, #4	; (adr r2, 8008570 <UART_SetConfig+0x4e4>)
 800856c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008570:	08008589 	.word	0x08008589
 8008574:	08008591 	.word	0x08008591
 8008578:	08008599 	.word	0x08008599
 800857c:	080085a1 	.word	0x080085a1
 8008580:	080085a9 	.word	0x080085a9
 8008584:	080085b1 	.word	0x080085b1
 8008588:	2300      	movs	r3, #0
 800858a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800858e:	e154      	b.n	800883a <UART_SetConfig+0x7ae>
 8008590:	2304      	movs	r3, #4
 8008592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008596:	e150      	b.n	800883a <UART_SetConfig+0x7ae>
 8008598:	2308      	movs	r3, #8
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859e:	e14c      	b.n	800883a <UART_SetConfig+0x7ae>
 80085a0:	2310      	movs	r3, #16
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a6:	e148      	b.n	800883a <UART_SetConfig+0x7ae>
 80085a8:	2320      	movs	r3, #32
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ae:	e144      	b.n	800883a <UART_SetConfig+0x7ae>
 80085b0:	2340      	movs	r3, #64	; 0x40
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b6:	e140      	b.n	800883a <UART_SetConfig+0x7ae>
 80085b8:	2380      	movs	r3, #128	; 0x80
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085be:	e13c      	b.n	800883a <UART_SetConfig+0x7ae>
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a41      	ldr	r2, [pc, #260]	; (80086cc <UART_SetConfig+0x640>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	f040 8082 	bne.w	80086d0 <UART_SetConfig+0x644>
 80085cc:	4b3c      	ldr	r3, [pc, #240]	; (80086c0 <UART_SetConfig+0x634>)
 80085ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085d4:	2b28      	cmp	r3, #40	; 0x28
 80085d6:	d86d      	bhi.n	80086b4 <UART_SetConfig+0x628>
 80085d8:	a201      	add	r2, pc, #4	; (adr r2, 80085e0 <UART_SetConfig+0x554>)
 80085da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085de:	bf00      	nop
 80085e0:	08008685 	.word	0x08008685
 80085e4:	080086b5 	.word	0x080086b5
 80085e8:	080086b5 	.word	0x080086b5
 80085ec:	080086b5 	.word	0x080086b5
 80085f0:	080086b5 	.word	0x080086b5
 80085f4:	080086b5 	.word	0x080086b5
 80085f8:	080086b5 	.word	0x080086b5
 80085fc:	080086b5 	.word	0x080086b5
 8008600:	0800868d 	.word	0x0800868d
 8008604:	080086b5 	.word	0x080086b5
 8008608:	080086b5 	.word	0x080086b5
 800860c:	080086b5 	.word	0x080086b5
 8008610:	080086b5 	.word	0x080086b5
 8008614:	080086b5 	.word	0x080086b5
 8008618:	080086b5 	.word	0x080086b5
 800861c:	080086b5 	.word	0x080086b5
 8008620:	08008695 	.word	0x08008695
 8008624:	080086b5 	.word	0x080086b5
 8008628:	080086b5 	.word	0x080086b5
 800862c:	080086b5 	.word	0x080086b5
 8008630:	080086b5 	.word	0x080086b5
 8008634:	080086b5 	.word	0x080086b5
 8008638:	080086b5 	.word	0x080086b5
 800863c:	080086b5 	.word	0x080086b5
 8008640:	0800869d 	.word	0x0800869d
 8008644:	080086b5 	.word	0x080086b5
 8008648:	080086b5 	.word	0x080086b5
 800864c:	080086b5 	.word	0x080086b5
 8008650:	080086b5 	.word	0x080086b5
 8008654:	080086b5 	.word	0x080086b5
 8008658:	080086b5 	.word	0x080086b5
 800865c:	080086b5 	.word	0x080086b5
 8008660:	080086a5 	.word	0x080086a5
 8008664:	080086b5 	.word	0x080086b5
 8008668:	080086b5 	.word	0x080086b5
 800866c:	080086b5 	.word	0x080086b5
 8008670:	080086b5 	.word	0x080086b5
 8008674:	080086b5 	.word	0x080086b5
 8008678:	080086b5 	.word	0x080086b5
 800867c:	080086b5 	.word	0x080086b5
 8008680:	080086ad 	.word	0x080086ad
 8008684:	2301      	movs	r3, #1
 8008686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868a:	e0d6      	b.n	800883a <UART_SetConfig+0x7ae>
 800868c:	2304      	movs	r3, #4
 800868e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008692:	e0d2      	b.n	800883a <UART_SetConfig+0x7ae>
 8008694:	2308      	movs	r3, #8
 8008696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869a:	e0ce      	b.n	800883a <UART_SetConfig+0x7ae>
 800869c:	2310      	movs	r3, #16
 800869e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a2:	e0ca      	b.n	800883a <UART_SetConfig+0x7ae>
 80086a4:	2320      	movs	r3, #32
 80086a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086aa:	e0c6      	b.n	800883a <UART_SetConfig+0x7ae>
 80086ac:	2340      	movs	r3, #64	; 0x40
 80086ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b2:	e0c2      	b.n	800883a <UART_SetConfig+0x7ae>
 80086b4:	2380      	movs	r3, #128	; 0x80
 80086b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ba:	e0be      	b.n	800883a <UART_SetConfig+0x7ae>
 80086bc:	40011400 	.word	0x40011400
 80086c0:	58024400 	.word	0x58024400
 80086c4:	40007800 	.word	0x40007800
 80086c8:	40007c00 	.word	0x40007c00
 80086cc:	40011800 	.word	0x40011800
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4aad      	ldr	r2, [pc, #692]	; (800898c <UART_SetConfig+0x900>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d176      	bne.n	80087c8 <UART_SetConfig+0x73c>
 80086da:	4bad      	ldr	r3, [pc, #692]	; (8008990 <UART_SetConfig+0x904>)
 80086dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086e2:	2b28      	cmp	r3, #40	; 0x28
 80086e4:	d86c      	bhi.n	80087c0 <UART_SetConfig+0x734>
 80086e6:	a201      	add	r2, pc, #4	; (adr r2, 80086ec <UART_SetConfig+0x660>)
 80086e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ec:	08008791 	.word	0x08008791
 80086f0:	080087c1 	.word	0x080087c1
 80086f4:	080087c1 	.word	0x080087c1
 80086f8:	080087c1 	.word	0x080087c1
 80086fc:	080087c1 	.word	0x080087c1
 8008700:	080087c1 	.word	0x080087c1
 8008704:	080087c1 	.word	0x080087c1
 8008708:	080087c1 	.word	0x080087c1
 800870c:	08008799 	.word	0x08008799
 8008710:	080087c1 	.word	0x080087c1
 8008714:	080087c1 	.word	0x080087c1
 8008718:	080087c1 	.word	0x080087c1
 800871c:	080087c1 	.word	0x080087c1
 8008720:	080087c1 	.word	0x080087c1
 8008724:	080087c1 	.word	0x080087c1
 8008728:	080087c1 	.word	0x080087c1
 800872c:	080087a1 	.word	0x080087a1
 8008730:	080087c1 	.word	0x080087c1
 8008734:	080087c1 	.word	0x080087c1
 8008738:	080087c1 	.word	0x080087c1
 800873c:	080087c1 	.word	0x080087c1
 8008740:	080087c1 	.word	0x080087c1
 8008744:	080087c1 	.word	0x080087c1
 8008748:	080087c1 	.word	0x080087c1
 800874c:	080087a9 	.word	0x080087a9
 8008750:	080087c1 	.word	0x080087c1
 8008754:	080087c1 	.word	0x080087c1
 8008758:	080087c1 	.word	0x080087c1
 800875c:	080087c1 	.word	0x080087c1
 8008760:	080087c1 	.word	0x080087c1
 8008764:	080087c1 	.word	0x080087c1
 8008768:	080087c1 	.word	0x080087c1
 800876c:	080087b1 	.word	0x080087b1
 8008770:	080087c1 	.word	0x080087c1
 8008774:	080087c1 	.word	0x080087c1
 8008778:	080087c1 	.word	0x080087c1
 800877c:	080087c1 	.word	0x080087c1
 8008780:	080087c1 	.word	0x080087c1
 8008784:	080087c1 	.word	0x080087c1
 8008788:	080087c1 	.word	0x080087c1
 800878c:	080087b9 	.word	0x080087b9
 8008790:	2301      	movs	r3, #1
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008796:	e050      	b.n	800883a <UART_SetConfig+0x7ae>
 8008798:	2304      	movs	r3, #4
 800879a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879e:	e04c      	b.n	800883a <UART_SetConfig+0x7ae>
 80087a0:	2308      	movs	r3, #8
 80087a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a6:	e048      	b.n	800883a <UART_SetConfig+0x7ae>
 80087a8:	2310      	movs	r3, #16
 80087aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ae:	e044      	b.n	800883a <UART_SetConfig+0x7ae>
 80087b0:	2320      	movs	r3, #32
 80087b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087b6:	e040      	b.n	800883a <UART_SetConfig+0x7ae>
 80087b8:	2340      	movs	r3, #64	; 0x40
 80087ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087be:	e03c      	b.n	800883a <UART_SetConfig+0x7ae>
 80087c0:	2380      	movs	r3, #128	; 0x80
 80087c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087c6:	e038      	b.n	800883a <UART_SetConfig+0x7ae>
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a71      	ldr	r2, [pc, #452]	; (8008994 <UART_SetConfig+0x908>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d130      	bne.n	8008834 <UART_SetConfig+0x7a8>
 80087d2:	4b6f      	ldr	r3, [pc, #444]	; (8008990 <UART_SetConfig+0x904>)
 80087d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	2b05      	cmp	r3, #5
 80087dc:	d826      	bhi.n	800882c <UART_SetConfig+0x7a0>
 80087de:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <UART_SetConfig+0x758>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	080087fd 	.word	0x080087fd
 80087e8:	08008805 	.word	0x08008805
 80087ec:	0800880d 	.word	0x0800880d
 80087f0:	08008815 	.word	0x08008815
 80087f4:	0800881d 	.word	0x0800881d
 80087f8:	08008825 	.word	0x08008825
 80087fc:	2302      	movs	r3, #2
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008802:	e01a      	b.n	800883a <UART_SetConfig+0x7ae>
 8008804:	2304      	movs	r3, #4
 8008806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880a:	e016      	b.n	800883a <UART_SetConfig+0x7ae>
 800880c:	2308      	movs	r3, #8
 800880e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008812:	e012      	b.n	800883a <UART_SetConfig+0x7ae>
 8008814:	2310      	movs	r3, #16
 8008816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881a:	e00e      	b.n	800883a <UART_SetConfig+0x7ae>
 800881c:	2320      	movs	r3, #32
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008822:	e00a      	b.n	800883a <UART_SetConfig+0x7ae>
 8008824:	2340      	movs	r3, #64	; 0x40
 8008826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882a:	e006      	b.n	800883a <UART_SetConfig+0x7ae>
 800882c:	2380      	movs	r3, #128	; 0x80
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008832:	e002      	b.n	800883a <UART_SetConfig+0x7ae>
 8008834:	2380      	movs	r3, #128	; 0x80
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a55      	ldr	r2, [pc, #340]	; (8008994 <UART_SetConfig+0x908>)
 8008840:	4293      	cmp	r3, r2
 8008842:	f040 80f8 	bne.w	8008a36 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008846:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800884a:	2b20      	cmp	r3, #32
 800884c:	dc46      	bgt.n	80088dc <UART_SetConfig+0x850>
 800884e:	2b02      	cmp	r3, #2
 8008850:	db75      	blt.n	800893e <UART_SetConfig+0x8b2>
 8008852:	3b02      	subs	r3, #2
 8008854:	2b1e      	cmp	r3, #30
 8008856:	d872      	bhi.n	800893e <UART_SetConfig+0x8b2>
 8008858:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <UART_SetConfig+0x7d4>)
 800885a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885e:	bf00      	nop
 8008860:	080088e3 	.word	0x080088e3
 8008864:	0800893f 	.word	0x0800893f
 8008868:	080088eb 	.word	0x080088eb
 800886c:	0800893f 	.word	0x0800893f
 8008870:	0800893f 	.word	0x0800893f
 8008874:	0800893f 	.word	0x0800893f
 8008878:	080088fb 	.word	0x080088fb
 800887c:	0800893f 	.word	0x0800893f
 8008880:	0800893f 	.word	0x0800893f
 8008884:	0800893f 	.word	0x0800893f
 8008888:	0800893f 	.word	0x0800893f
 800888c:	0800893f 	.word	0x0800893f
 8008890:	0800893f 	.word	0x0800893f
 8008894:	0800893f 	.word	0x0800893f
 8008898:	0800890b 	.word	0x0800890b
 800889c:	0800893f 	.word	0x0800893f
 80088a0:	0800893f 	.word	0x0800893f
 80088a4:	0800893f 	.word	0x0800893f
 80088a8:	0800893f 	.word	0x0800893f
 80088ac:	0800893f 	.word	0x0800893f
 80088b0:	0800893f 	.word	0x0800893f
 80088b4:	0800893f 	.word	0x0800893f
 80088b8:	0800893f 	.word	0x0800893f
 80088bc:	0800893f 	.word	0x0800893f
 80088c0:	0800893f 	.word	0x0800893f
 80088c4:	0800893f 	.word	0x0800893f
 80088c8:	0800893f 	.word	0x0800893f
 80088cc:	0800893f 	.word	0x0800893f
 80088d0:	0800893f 	.word	0x0800893f
 80088d4:	0800893f 	.word	0x0800893f
 80088d8:	08008931 	.word	0x08008931
 80088dc:	2b40      	cmp	r3, #64	; 0x40
 80088de:	d02a      	beq.n	8008936 <UART_SetConfig+0x8aa>
 80088e0:	e02d      	b.n	800893e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80088e2:	f7fe fd81 	bl	80073e8 <HAL_RCCEx_GetD3PCLK1Freq>
 80088e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80088e8:	e02f      	b.n	800894a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fe fd90 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f8:	e027      	b.n	800894a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088fa:	f107 0318 	add.w	r3, r7, #24
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fe fedc 	bl	80076bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008908:	e01f      	b.n	800894a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800890a:	4b21      	ldr	r3, [pc, #132]	; (8008990 <UART_SetConfig+0x904>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	d009      	beq.n	800892a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008916:	4b1e      	ldr	r3, [pc, #120]	; (8008990 <UART_SetConfig+0x904>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	08db      	lsrs	r3, r3, #3
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	4a1d      	ldr	r2, [pc, #116]	; (8008998 <UART_SetConfig+0x90c>)
 8008922:	fa22 f303 	lsr.w	r3, r2, r3
 8008926:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008928:	e00f      	b.n	800894a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800892a:	4b1b      	ldr	r3, [pc, #108]	; (8008998 <UART_SetConfig+0x90c>)
 800892c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800892e:	e00c      	b.n	800894a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008930:	4b1a      	ldr	r3, [pc, #104]	; (800899c <UART_SetConfig+0x910>)
 8008932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008934:	e009      	b.n	800894a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800893a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800893c:	e005      	b.n	800894a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008948:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800894a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 81ee 	beq.w	8008d2e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	4a12      	ldr	r2, [pc, #72]	; (80089a0 <UART_SetConfig+0x914>)
 8008958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800895c:	461a      	mov	r2, r3
 800895e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008960:	fbb3 f3f2 	udiv	r3, r3, r2
 8008964:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	685a      	ldr	r2, [r3, #4]
 800896a:	4613      	mov	r3, r2
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	4413      	add	r3, r2
 8008970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008972:	429a      	cmp	r2, r3
 8008974:	d305      	bcc.n	8008982 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800897c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800897e:	429a      	cmp	r2, r3
 8008980:	d910      	bls.n	80089a4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008988:	e1d1      	b.n	8008d2e <UART_SetConfig+0xca2>
 800898a:	bf00      	nop
 800898c:	40011c00 	.word	0x40011c00
 8008990:	58024400 	.word	0x58024400
 8008994:	58000c00 	.word	0x58000c00
 8008998:	03d09000 	.word	0x03d09000
 800899c:	003d0900 	.word	0x003d0900
 80089a0:	08009e3c 	.word	0x08009e3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a6:	2200      	movs	r2, #0
 80089a8:	60bb      	str	r3, [r7, #8]
 80089aa:	60fa      	str	r2, [r7, #12]
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	4ac0      	ldr	r2, [pc, #768]	; (8008cb4 <UART_SetConfig+0xc28>)
 80089b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	2200      	movs	r2, #0
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	607a      	str	r2, [r7, #4]
 80089be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089c6:	f7f7 fc91 	bl	80002ec <__aeabi_uldivmod>
 80089ca:	4602      	mov	r2, r0
 80089cc:	460b      	mov	r3, r1
 80089ce:	4610      	mov	r0, r2
 80089d0:	4619      	mov	r1, r3
 80089d2:	f04f 0200 	mov.w	r2, #0
 80089d6:	f04f 0300 	mov.w	r3, #0
 80089da:	020b      	lsls	r3, r1, #8
 80089dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089e0:	0202      	lsls	r2, r0, #8
 80089e2:	6979      	ldr	r1, [r7, #20]
 80089e4:	6849      	ldr	r1, [r1, #4]
 80089e6:	0849      	lsrs	r1, r1, #1
 80089e8:	2000      	movs	r0, #0
 80089ea:	460c      	mov	r4, r1
 80089ec:	4605      	mov	r5, r0
 80089ee:	eb12 0804 	adds.w	r8, r2, r4
 80089f2:	eb43 0905 	adc.w	r9, r3, r5
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	469a      	mov	sl, r3
 80089fe:	4693      	mov	fp, r2
 8008a00:	4652      	mov	r2, sl
 8008a02:	465b      	mov	r3, fp
 8008a04:	4640      	mov	r0, r8
 8008a06:	4649      	mov	r1, r9
 8008a08:	f7f7 fc70 	bl	80002ec <__aeabi_uldivmod>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4613      	mov	r3, r2
 8008a12:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a1a:	d308      	bcc.n	8008a2e <UART_SetConfig+0x9a2>
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a22:	d204      	bcs.n	8008a2e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a2a:	60da      	str	r2, [r3, #12]
 8008a2c:	e17f      	b.n	8008d2e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008a34:	e17b      	b.n	8008d2e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a3e:	f040 80bd 	bne.w	8008bbc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008a42:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a46:	2b20      	cmp	r3, #32
 8008a48:	dc48      	bgt.n	8008adc <UART_SetConfig+0xa50>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	db7b      	blt.n	8008b46 <UART_SetConfig+0xaba>
 8008a4e:	2b20      	cmp	r3, #32
 8008a50:	d879      	bhi.n	8008b46 <UART_SetConfig+0xaba>
 8008a52:	a201      	add	r2, pc, #4	; (adr r2, 8008a58 <UART_SetConfig+0x9cc>)
 8008a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a58:	08008ae3 	.word	0x08008ae3
 8008a5c:	08008aeb 	.word	0x08008aeb
 8008a60:	08008b47 	.word	0x08008b47
 8008a64:	08008b47 	.word	0x08008b47
 8008a68:	08008af3 	.word	0x08008af3
 8008a6c:	08008b47 	.word	0x08008b47
 8008a70:	08008b47 	.word	0x08008b47
 8008a74:	08008b47 	.word	0x08008b47
 8008a78:	08008b03 	.word	0x08008b03
 8008a7c:	08008b47 	.word	0x08008b47
 8008a80:	08008b47 	.word	0x08008b47
 8008a84:	08008b47 	.word	0x08008b47
 8008a88:	08008b47 	.word	0x08008b47
 8008a8c:	08008b47 	.word	0x08008b47
 8008a90:	08008b47 	.word	0x08008b47
 8008a94:	08008b47 	.word	0x08008b47
 8008a98:	08008b13 	.word	0x08008b13
 8008a9c:	08008b47 	.word	0x08008b47
 8008aa0:	08008b47 	.word	0x08008b47
 8008aa4:	08008b47 	.word	0x08008b47
 8008aa8:	08008b47 	.word	0x08008b47
 8008aac:	08008b47 	.word	0x08008b47
 8008ab0:	08008b47 	.word	0x08008b47
 8008ab4:	08008b47 	.word	0x08008b47
 8008ab8:	08008b47 	.word	0x08008b47
 8008abc:	08008b47 	.word	0x08008b47
 8008ac0:	08008b47 	.word	0x08008b47
 8008ac4:	08008b47 	.word	0x08008b47
 8008ac8:	08008b47 	.word	0x08008b47
 8008acc:	08008b47 	.word	0x08008b47
 8008ad0:	08008b47 	.word	0x08008b47
 8008ad4:	08008b47 	.word	0x08008b47
 8008ad8:	08008b39 	.word	0x08008b39
 8008adc:	2b40      	cmp	r3, #64	; 0x40
 8008ade:	d02e      	beq.n	8008b3e <UART_SetConfig+0xab2>
 8008ae0:	e031      	b.n	8008b46 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ae2:	f7fc fdbf 	bl	8005664 <HAL_RCC_GetPCLK1Freq>
 8008ae6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ae8:	e033      	b.n	8008b52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008aea:	f7fc fdd1 	bl	8005690 <HAL_RCC_GetPCLK2Freq>
 8008aee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008af0:	e02f      	b.n	8008b52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe fc8c 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b00:	e027      	b.n	8008b52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b02:	f107 0318 	add.w	r3, r7, #24
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe fdd8 	bl	80076bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b10:	e01f      	b.n	8008b52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b12:	4b69      	ldr	r3, [pc, #420]	; (8008cb8 <UART_SetConfig+0xc2c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0320 	and.w	r3, r3, #32
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d009      	beq.n	8008b32 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b1e:	4b66      	ldr	r3, [pc, #408]	; (8008cb8 <UART_SetConfig+0xc2c>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	08db      	lsrs	r3, r3, #3
 8008b24:	f003 0303 	and.w	r3, r3, #3
 8008b28:	4a64      	ldr	r2, [pc, #400]	; (8008cbc <UART_SetConfig+0xc30>)
 8008b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b30:	e00f      	b.n	8008b52 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008b32:	4b62      	ldr	r3, [pc, #392]	; (8008cbc <UART_SetConfig+0xc30>)
 8008b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b36:	e00c      	b.n	8008b52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b38:	4b61      	ldr	r3, [pc, #388]	; (8008cc0 <UART_SetConfig+0xc34>)
 8008b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b3c:	e009      	b.n	8008b52 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b44:	e005      	b.n	8008b52 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008b50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 80ea 	beq.w	8008d2e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	4a55      	ldr	r2, [pc, #340]	; (8008cb4 <UART_SetConfig+0xc28>)
 8008b60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b64:	461a      	mov	r2, r3
 8008b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b6c:	005a      	lsls	r2, r3, #1
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	085b      	lsrs	r3, r3, #1
 8008b74:	441a      	add	r2, r3
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	2b0f      	cmp	r3, #15
 8008b84:	d916      	bls.n	8008bb4 <UART_SetConfig+0xb28>
 8008b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b8c:	d212      	bcs.n	8008bb4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	f023 030f 	bic.w	r3, r3, #15
 8008b96:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9a:	085b      	lsrs	r3, r3, #1
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	f003 0307 	and.w	r3, r3, #7
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008bb0:	60da      	str	r2, [r3, #12]
 8008bb2:	e0bc      	b.n	8008d2e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008bba:	e0b8      	b.n	8008d2e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008bc0:	2b20      	cmp	r3, #32
 8008bc2:	dc4b      	bgt.n	8008c5c <UART_SetConfig+0xbd0>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f2c0 8087 	blt.w	8008cd8 <UART_SetConfig+0xc4c>
 8008bca:	2b20      	cmp	r3, #32
 8008bcc:	f200 8084 	bhi.w	8008cd8 <UART_SetConfig+0xc4c>
 8008bd0:	a201      	add	r2, pc, #4	; (adr r2, 8008bd8 <UART_SetConfig+0xb4c>)
 8008bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd6:	bf00      	nop
 8008bd8:	08008c63 	.word	0x08008c63
 8008bdc:	08008c6b 	.word	0x08008c6b
 8008be0:	08008cd9 	.word	0x08008cd9
 8008be4:	08008cd9 	.word	0x08008cd9
 8008be8:	08008c73 	.word	0x08008c73
 8008bec:	08008cd9 	.word	0x08008cd9
 8008bf0:	08008cd9 	.word	0x08008cd9
 8008bf4:	08008cd9 	.word	0x08008cd9
 8008bf8:	08008c83 	.word	0x08008c83
 8008bfc:	08008cd9 	.word	0x08008cd9
 8008c00:	08008cd9 	.word	0x08008cd9
 8008c04:	08008cd9 	.word	0x08008cd9
 8008c08:	08008cd9 	.word	0x08008cd9
 8008c0c:	08008cd9 	.word	0x08008cd9
 8008c10:	08008cd9 	.word	0x08008cd9
 8008c14:	08008cd9 	.word	0x08008cd9
 8008c18:	08008c93 	.word	0x08008c93
 8008c1c:	08008cd9 	.word	0x08008cd9
 8008c20:	08008cd9 	.word	0x08008cd9
 8008c24:	08008cd9 	.word	0x08008cd9
 8008c28:	08008cd9 	.word	0x08008cd9
 8008c2c:	08008cd9 	.word	0x08008cd9
 8008c30:	08008cd9 	.word	0x08008cd9
 8008c34:	08008cd9 	.word	0x08008cd9
 8008c38:	08008cd9 	.word	0x08008cd9
 8008c3c:	08008cd9 	.word	0x08008cd9
 8008c40:	08008cd9 	.word	0x08008cd9
 8008c44:	08008cd9 	.word	0x08008cd9
 8008c48:	08008cd9 	.word	0x08008cd9
 8008c4c:	08008cd9 	.word	0x08008cd9
 8008c50:	08008cd9 	.word	0x08008cd9
 8008c54:	08008cd9 	.word	0x08008cd9
 8008c58:	08008ccb 	.word	0x08008ccb
 8008c5c:	2b40      	cmp	r3, #64	; 0x40
 8008c5e:	d037      	beq.n	8008cd0 <UART_SetConfig+0xc44>
 8008c60:	e03a      	b.n	8008cd8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c62:	f7fc fcff 	bl	8005664 <HAL_RCC_GetPCLK1Freq>
 8008c66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c68:	e03c      	b.n	8008ce4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c6a:	f7fc fd11 	bl	8005690 <HAL_RCC_GetPCLK2Freq>
 8008c6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c70:	e038      	b.n	8008ce4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fe fbcc 	bl	8007414 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c80:	e030      	b.n	8008ce4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c82:	f107 0318 	add.w	r3, r7, #24
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7fe fd18 	bl	80076bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c90:	e028      	b.n	8008ce4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c92:	4b09      	ldr	r3, [pc, #36]	; (8008cb8 <UART_SetConfig+0xc2c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0320 	and.w	r3, r3, #32
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d012      	beq.n	8008cc4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c9e:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <UART_SetConfig+0xc2c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	08db      	lsrs	r3, r3, #3
 8008ca4:	f003 0303 	and.w	r3, r3, #3
 8008ca8:	4a04      	ldr	r2, [pc, #16]	; (8008cbc <UART_SetConfig+0xc30>)
 8008caa:	fa22 f303 	lsr.w	r3, r2, r3
 8008cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cb0:	e018      	b.n	8008ce4 <UART_SetConfig+0xc58>
 8008cb2:	bf00      	nop
 8008cb4:	08009e3c 	.word	0x08009e3c
 8008cb8:	58024400 	.word	0x58024400
 8008cbc:	03d09000 	.word	0x03d09000
 8008cc0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008cc4:	4b24      	ldr	r3, [pc, #144]	; (8008d58 <UART_SetConfig+0xccc>)
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cc8:	e00c      	b.n	8008ce4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cca:	4b24      	ldr	r3, [pc, #144]	; (8008d5c <UART_SetConfig+0xcd0>)
 8008ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cce:	e009      	b.n	8008ce4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cd6:	e005      	b.n	8008ce4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ce2:	bf00      	nop
    }

    if (pclk != 0U)
 8008ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d021      	beq.n	8008d2e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	4a1c      	ldr	r2, [pc, #112]	; (8008d60 <UART_SetConfig+0xcd4>)
 8008cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf8:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	085b      	lsrs	r3, r3, #1
 8008d02:	441a      	add	r2, r3
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d10:	2b0f      	cmp	r3, #15
 8008d12:	d909      	bls.n	8008d28 <UART_SetConfig+0xc9c>
 8008d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d1a:	d205      	bcs.n	8008d28 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60da      	str	r2, [r3, #12]
 8008d26:	e002      	b.n	8008d2e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2200      	movs	r2, #0
 8008d42:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2200      	movs	r2, #0
 8008d48:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008d4a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3748      	adds	r7, #72	; 0x48
 8008d52:	46bd      	mov	sp, r7
 8008d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d58:	03d09000 	.word	0x03d09000
 8008d5c:	003d0900 	.word	0x003d0900
 8008d60:	08009e3c 	.word	0x08009e3c

08008d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00a      	beq.n	8008d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	430a      	orrs	r2, r1
 8008d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	430a      	orrs	r2, r1
 8008dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	f003 0304 	and.w	r3, r3, #4
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00a      	beq.n	8008dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd6:	f003 0308 	and.w	r3, r3, #8
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00a      	beq.n	8008df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	f003 0310 	and.w	r3, r3, #16
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00a      	beq.n	8008e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1a:	f003 0320 	and.w	r3, r3, #32
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00a      	beq.n	8008e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	430a      	orrs	r2, r1
 8008e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d01a      	beq.n	8008e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e62:	d10a      	bne.n	8008e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00a      	beq.n	8008e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	605a      	str	r2, [r3, #4]
  }
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b098      	sub	sp, #96	; 0x60
 8008eac:	af02      	add	r7, sp, #8
 8008eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008eb8:	f7fa f8a4 	bl	8003004 <HAL_GetTick>
 8008ebc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0308 	and.w	r3, r3, #8
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	d12f      	bne.n	8008f2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f88e 	bl	8008ffc <UART_WaitOnFlagUntilTimeout>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d022      	beq.n	8008f2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eee:	e853 3f00 	ldrex	r3, [r3]
 8008ef2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008efa:	653b      	str	r3, [r7, #80]	; 0x50
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f04:	647b      	str	r3, [r7, #68]	; 0x44
 8008f06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f0c:	e841 2300 	strex	r3, r2, [r1]
 8008f10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e6      	bne.n	8008ee6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e063      	b.n	8008ff4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0304 	and.w	r3, r3, #4
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d149      	bne.n	8008fce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f42:	2200      	movs	r2, #0
 8008f44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f857 	bl	8008ffc <UART_WaitOnFlagUntilTimeout>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d03c      	beq.n	8008fce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	e853 3f00 	ldrex	r3, [r3]
 8008f60:	623b      	str	r3, [r7, #32]
   return(result);
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f72:	633b      	str	r3, [r7, #48]	; 0x30
 8008f74:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f7a:	e841 2300 	strex	r3, r2, [r1]
 8008f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1e6      	bne.n	8008f54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	e853 3f00 	ldrex	r3, [r3]
 8008f94:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f023 0301 	bic.w	r3, r3, #1
 8008f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3308      	adds	r3, #8
 8008fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fa6:	61fa      	str	r2, [r7, #28]
 8008fa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008faa:	69b9      	ldr	r1, [r7, #24]
 8008fac:	69fa      	ldr	r2, [r7, #28]
 8008fae:	e841 2300 	strex	r3, r2, [r1]
 8008fb2:	617b      	str	r3, [r7, #20]
   return(result);
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1e5      	bne.n	8008f86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e012      	b.n	8008ff4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2220      	movs	r2, #32
 8008fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2220      	movs	r2, #32
 8008fda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3758      	adds	r7, #88	; 0x58
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	4613      	mov	r3, r2
 800900a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800900c:	e049      	b.n	80090a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009014:	d045      	beq.n	80090a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009016:	f7f9 fff5 	bl	8003004 <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	69ba      	ldr	r2, [r7, #24]
 8009022:	429a      	cmp	r2, r3
 8009024:	d302      	bcc.n	800902c <UART_WaitOnFlagUntilTimeout+0x30>
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800902c:	2303      	movs	r3, #3
 800902e:	e048      	b.n	80090c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0304 	and.w	r3, r3, #4
 800903a:	2b00      	cmp	r3, #0
 800903c:	d031      	beq.n	80090a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	69db      	ldr	r3, [r3, #28]
 8009044:	f003 0308 	and.w	r3, r3, #8
 8009048:	2b08      	cmp	r3, #8
 800904a:	d110      	bne.n	800906e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2208      	movs	r2, #8
 8009052:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 f839 	bl	80090cc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2208      	movs	r2, #8
 800905e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e029      	b.n	80090c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	69db      	ldr	r3, [r3, #28]
 8009074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800907c:	d111      	bne.n	80090a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f000 f81f 	bl	80090cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2220      	movs	r2, #32
 8009092:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e00f      	b.n	80090c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	69da      	ldr	r2, [r3, #28]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	4013      	ands	r3, r2
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	429a      	cmp	r2, r3
 80090b0:	bf0c      	ite	eq
 80090b2:	2301      	moveq	r3, #1
 80090b4:	2300      	movne	r3, #0
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	461a      	mov	r2, r3
 80090ba:	79fb      	ldrb	r3, [r7, #7]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d0a6      	beq.n	800900e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
	...

080090cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b095      	sub	sp, #84	; 0x54
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090dc:	e853 3f00 	ldrex	r3, [r3]
 80090e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	461a      	mov	r2, r3
 80090f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090f2:	643b      	str	r3, [r7, #64]	; 0x40
 80090f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e6      	bne.n	80090d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	3308      	adds	r3, #8
 800910c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	e853 3f00 	ldrex	r3, [r3]
 8009114:	61fb      	str	r3, [r7, #28]
   return(result);
 8009116:	69fa      	ldr	r2, [r7, #28]
 8009118:	4b1e      	ldr	r3, [pc, #120]	; (8009194 <UART_EndRxTransfer+0xc8>)
 800911a:	4013      	ands	r3, r2
 800911c:	64bb      	str	r3, [r7, #72]	; 0x48
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	3308      	adds	r3, #8
 8009124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009128:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800912c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e5      	bne.n	8009106 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913e:	2b01      	cmp	r3, #1
 8009140:	d118      	bne.n	8009174 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f023 0310 	bic.w	r3, r3, #16
 8009156:	647b      	str	r3, [r7, #68]	; 0x44
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	461a      	mov	r2, r3
 800915e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009160:	61bb      	str	r3, [r7, #24]
 8009162:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009164:	6979      	ldr	r1, [r7, #20]
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	e841 2300 	strex	r3, r2, [r1]
 800916c:	613b      	str	r3, [r7, #16]
   return(result);
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e6      	bne.n	8009142 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2220      	movs	r2, #32
 8009178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009188:	bf00      	nop
 800918a:	3754      	adds	r7, #84	; 0x54
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	effffffe 	.word	0xeffffffe

08009198 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d101      	bne.n	80091ae <HAL_UARTEx_DisableFifoMode+0x16>
 80091aa:	2302      	movs	r3, #2
 80091ac:	e027      	b.n	80091fe <HAL_UARTEx_DisableFifoMode+0x66>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2224      	movs	r2, #36	; 0x24
 80091ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f022 0201 	bic.w	r2, r2, #1
 80091d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2220      	movs	r2, #32
 80091f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800921a:	2b01      	cmp	r3, #1
 800921c:	d101      	bne.n	8009222 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800921e:	2302      	movs	r3, #2
 8009220:	e02d      	b.n	800927e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2224      	movs	r2, #36	; 0x24
 800922e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f022 0201 	bic.w	r2, r2, #1
 8009248:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	430a      	orrs	r2, r1
 800925c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f850 	bl	8009304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2220      	movs	r2, #32
 8009270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009296:	2b01      	cmp	r3, #1
 8009298:	d101      	bne.n	800929e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800929a:	2302      	movs	r3, #2
 800929c:	e02d      	b.n	80092fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2224      	movs	r2, #36	; 0x24
 80092aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 0201 	bic.w	r2, r2, #1
 80092c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f812 	bl	8009304 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2220      	movs	r2, #32
 80092ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009310:	2b00      	cmp	r3, #0
 8009312:	d108      	bne.n	8009326 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009324:	e031      	b.n	800938a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009326:	2310      	movs	r3, #16
 8009328:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800932a:	2310      	movs	r3, #16
 800932c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	0e5b      	lsrs	r3, r3, #25
 8009336:	b2db      	uxtb	r3, r3
 8009338:	f003 0307 	and.w	r3, r3, #7
 800933c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	0f5b      	lsrs	r3, r3, #29
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 0307 	and.w	r3, r3, #7
 800934c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800934e:	7bbb      	ldrb	r3, [r7, #14]
 8009350:	7b3a      	ldrb	r2, [r7, #12]
 8009352:	4911      	ldr	r1, [pc, #68]	; (8009398 <UARTEx_SetNbDataToProcess+0x94>)
 8009354:	5c8a      	ldrb	r2, [r1, r2]
 8009356:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800935a:	7b3a      	ldrb	r2, [r7, #12]
 800935c:	490f      	ldr	r1, [pc, #60]	; (800939c <UARTEx_SetNbDataToProcess+0x98>)
 800935e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009360:	fb93 f3f2 	sdiv	r3, r3, r2
 8009364:	b29a      	uxth	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	7b7a      	ldrb	r2, [r7, #13]
 8009370:	4909      	ldr	r1, [pc, #36]	; (8009398 <UARTEx_SetNbDataToProcess+0x94>)
 8009372:	5c8a      	ldrb	r2, [r1, r2]
 8009374:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009378:	7b7a      	ldrb	r2, [r7, #13]
 800937a:	4908      	ldr	r1, [pc, #32]	; (800939c <UARTEx_SetNbDataToProcess+0x98>)
 800937c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800937e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009382:	b29a      	uxth	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800938a:	bf00      	nop
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	08009e54 	.word	0x08009e54
 800939c:	08009e5c 	.word	0x08009e5c

080093a0 <__errno>:
 80093a0:	4b01      	ldr	r3, [pc, #4]	; (80093a8 <__errno+0x8>)
 80093a2:	6818      	ldr	r0, [r3, #0]
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	240000b0 	.word	0x240000b0

080093ac <__libc_init_array>:
 80093ac:	b570      	push	{r4, r5, r6, lr}
 80093ae:	4d0d      	ldr	r5, [pc, #52]	; (80093e4 <__libc_init_array+0x38>)
 80093b0:	4c0d      	ldr	r4, [pc, #52]	; (80093e8 <__libc_init_array+0x3c>)
 80093b2:	1b64      	subs	r4, r4, r5
 80093b4:	10a4      	asrs	r4, r4, #2
 80093b6:	2600      	movs	r6, #0
 80093b8:	42a6      	cmp	r6, r4
 80093ba:	d109      	bne.n	80093d0 <__libc_init_array+0x24>
 80093bc:	4d0b      	ldr	r5, [pc, #44]	; (80093ec <__libc_init_array+0x40>)
 80093be:	4c0c      	ldr	r4, [pc, #48]	; (80093f0 <__libc_init_array+0x44>)
 80093c0:	f000 fd1e 	bl	8009e00 <_init>
 80093c4:	1b64      	subs	r4, r4, r5
 80093c6:	10a4      	asrs	r4, r4, #2
 80093c8:	2600      	movs	r6, #0
 80093ca:	42a6      	cmp	r6, r4
 80093cc:	d105      	bne.n	80093da <__libc_init_array+0x2e>
 80093ce:	bd70      	pop	{r4, r5, r6, pc}
 80093d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d4:	4798      	blx	r3
 80093d6:	3601      	adds	r6, #1
 80093d8:	e7ee      	b.n	80093b8 <__libc_init_array+0xc>
 80093da:	f855 3b04 	ldr.w	r3, [r5], #4
 80093de:	4798      	blx	r3
 80093e0:	3601      	adds	r6, #1
 80093e2:	e7f2      	b.n	80093ca <__libc_init_array+0x1e>
 80093e4:	08009ed0 	.word	0x08009ed0
 80093e8:	08009ed0 	.word	0x08009ed0
 80093ec:	08009ed0 	.word	0x08009ed0
 80093f0:	08009ed4 	.word	0x08009ed4

080093f4 <memset>:
 80093f4:	4402      	add	r2, r0
 80093f6:	4603      	mov	r3, r0
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d100      	bne.n	80093fe <memset+0xa>
 80093fc:	4770      	bx	lr
 80093fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009402:	e7f9      	b.n	80093f8 <memset+0x4>

08009404 <_puts_r>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	460e      	mov	r6, r1
 8009408:	4605      	mov	r5, r0
 800940a:	b118      	cbz	r0, 8009414 <_puts_r+0x10>
 800940c:	6983      	ldr	r3, [r0, #24]
 800940e:	b90b      	cbnz	r3, 8009414 <_puts_r+0x10>
 8009410:	f000 fa48 	bl	80098a4 <__sinit>
 8009414:	69ab      	ldr	r3, [r5, #24]
 8009416:	68ac      	ldr	r4, [r5, #8]
 8009418:	b913      	cbnz	r3, 8009420 <_puts_r+0x1c>
 800941a:	4628      	mov	r0, r5
 800941c:	f000 fa42 	bl	80098a4 <__sinit>
 8009420:	4b2c      	ldr	r3, [pc, #176]	; (80094d4 <_puts_r+0xd0>)
 8009422:	429c      	cmp	r4, r3
 8009424:	d120      	bne.n	8009468 <_puts_r+0x64>
 8009426:	686c      	ldr	r4, [r5, #4]
 8009428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800942a:	07db      	lsls	r3, r3, #31
 800942c:	d405      	bmi.n	800943a <_puts_r+0x36>
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	0598      	lsls	r0, r3, #22
 8009432:	d402      	bmi.n	800943a <_puts_r+0x36>
 8009434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009436:	f000 fad3 	bl	80099e0 <__retarget_lock_acquire_recursive>
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	0719      	lsls	r1, r3, #28
 800943e:	d51d      	bpl.n	800947c <_puts_r+0x78>
 8009440:	6923      	ldr	r3, [r4, #16]
 8009442:	b1db      	cbz	r3, 800947c <_puts_r+0x78>
 8009444:	3e01      	subs	r6, #1
 8009446:	68a3      	ldr	r3, [r4, #8]
 8009448:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800944c:	3b01      	subs	r3, #1
 800944e:	60a3      	str	r3, [r4, #8]
 8009450:	bb39      	cbnz	r1, 80094a2 <_puts_r+0x9e>
 8009452:	2b00      	cmp	r3, #0
 8009454:	da38      	bge.n	80094c8 <_puts_r+0xc4>
 8009456:	4622      	mov	r2, r4
 8009458:	210a      	movs	r1, #10
 800945a:	4628      	mov	r0, r5
 800945c:	f000 f848 	bl	80094f0 <__swbuf_r>
 8009460:	3001      	adds	r0, #1
 8009462:	d011      	beq.n	8009488 <_puts_r+0x84>
 8009464:	250a      	movs	r5, #10
 8009466:	e011      	b.n	800948c <_puts_r+0x88>
 8009468:	4b1b      	ldr	r3, [pc, #108]	; (80094d8 <_puts_r+0xd4>)
 800946a:	429c      	cmp	r4, r3
 800946c:	d101      	bne.n	8009472 <_puts_r+0x6e>
 800946e:	68ac      	ldr	r4, [r5, #8]
 8009470:	e7da      	b.n	8009428 <_puts_r+0x24>
 8009472:	4b1a      	ldr	r3, [pc, #104]	; (80094dc <_puts_r+0xd8>)
 8009474:	429c      	cmp	r4, r3
 8009476:	bf08      	it	eq
 8009478:	68ec      	ldreq	r4, [r5, #12]
 800947a:	e7d5      	b.n	8009428 <_puts_r+0x24>
 800947c:	4621      	mov	r1, r4
 800947e:	4628      	mov	r0, r5
 8009480:	f000 f888 	bl	8009594 <__swsetup_r>
 8009484:	2800      	cmp	r0, #0
 8009486:	d0dd      	beq.n	8009444 <_puts_r+0x40>
 8009488:	f04f 35ff 	mov.w	r5, #4294967295
 800948c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800948e:	07da      	lsls	r2, r3, #31
 8009490:	d405      	bmi.n	800949e <_puts_r+0x9a>
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	059b      	lsls	r3, r3, #22
 8009496:	d402      	bmi.n	800949e <_puts_r+0x9a>
 8009498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800949a:	f000 faa2 	bl	80099e2 <__retarget_lock_release_recursive>
 800949e:	4628      	mov	r0, r5
 80094a0:	bd70      	pop	{r4, r5, r6, pc}
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	da04      	bge.n	80094b0 <_puts_r+0xac>
 80094a6:	69a2      	ldr	r2, [r4, #24]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	dc06      	bgt.n	80094ba <_puts_r+0xb6>
 80094ac:	290a      	cmp	r1, #10
 80094ae:	d004      	beq.n	80094ba <_puts_r+0xb6>
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	1c5a      	adds	r2, r3, #1
 80094b4:	6022      	str	r2, [r4, #0]
 80094b6:	7019      	strb	r1, [r3, #0]
 80094b8:	e7c5      	b.n	8009446 <_puts_r+0x42>
 80094ba:	4622      	mov	r2, r4
 80094bc:	4628      	mov	r0, r5
 80094be:	f000 f817 	bl	80094f0 <__swbuf_r>
 80094c2:	3001      	adds	r0, #1
 80094c4:	d1bf      	bne.n	8009446 <_puts_r+0x42>
 80094c6:	e7df      	b.n	8009488 <_puts_r+0x84>
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	250a      	movs	r5, #10
 80094cc:	1c5a      	adds	r2, r3, #1
 80094ce:	6022      	str	r2, [r4, #0]
 80094d0:	701d      	strb	r5, [r3, #0]
 80094d2:	e7db      	b.n	800948c <_puts_r+0x88>
 80094d4:	08009e88 	.word	0x08009e88
 80094d8:	08009ea8 	.word	0x08009ea8
 80094dc:	08009e68 	.word	0x08009e68

080094e0 <puts>:
 80094e0:	4b02      	ldr	r3, [pc, #8]	; (80094ec <puts+0xc>)
 80094e2:	4601      	mov	r1, r0
 80094e4:	6818      	ldr	r0, [r3, #0]
 80094e6:	f7ff bf8d 	b.w	8009404 <_puts_r>
 80094ea:	bf00      	nop
 80094ec:	240000b0 	.word	0x240000b0

080094f0 <__swbuf_r>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	460e      	mov	r6, r1
 80094f4:	4614      	mov	r4, r2
 80094f6:	4605      	mov	r5, r0
 80094f8:	b118      	cbz	r0, 8009502 <__swbuf_r+0x12>
 80094fa:	6983      	ldr	r3, [r0, #24]
 80094fc:	b90b      	cbnz	r3, 8009502 <__swbuf_r+0x12>
 80094fe:	f000 f9d1 	bl	80098a4 <__sinit>
 8009502:	4b21      	ldr	r3, [pc, #132]	; (8009588 <__swbuf_r+0x98>)
 8009504:	429c      	cmp	r4, r3
 8009506:	d12b      	bne.n	8009560 <__swbuf_r+0x70>
 8009508:	686c      	ldr	r4, [r5, #4]
 800950a:	69a3      	ldr	r3, [r4, #24]
 800950c:	60a3      	str	r3, [r4, #8]
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	071a      	lsls	r2, r3, #28
 8009512:	d52f      	bpl.n	8009574 <__swbuf_r+0x84>
 8009514:	6923      	ldr	r3, [r4, #16]
 8009516:	b36b      	cbz	r3, 8009574 <__swbuf_r+0x84>
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	6820      	ldr	r0, [r4, #0]
 800951c:	1ac0      	subs	r0, r0, r3
 800951e:	6963      	ldr	r3, [r4, #20]
 8009520:	b2f6      	uxtb	r6, r6
 8009522:	4283      	cmp	r3, r0
 8009524:	4637      	mov	r7, r6
 8009526:	dc04      	bgt.n	8009532 <__swbuf_r+0x42>
 8009528:	4621      	mov	r1, r4
 800952a:	4628      	mov	r0, r5
 800952c:	f000 f926 	bl	800977c <_fflush_r>
 8009530:	bb30      	cbnz	r0, 8009580 <__swbuf_r+0x90>
 8009532:	68a3      	ldr	r3, [r4, #8]
 8009534:	3b01      	subs	r3, #1
 8009536:	60a3      	str	r3, [r4, #8]
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	1c5a      	adds	r2, r3, #1
 800953c:	6022      	str	r2, [r4, #0]
 800953e:	701e      	strb	r6, [r3, #0]
 8009540:	6963      	ldr	r3, [r4, #20]
 8009542:	3001      	adds	r0, #1
 8009544:	4283      	cmp	r3, r0
 8009546:	d004      	beq.n	8009552 <__swbuf_r+0x62>
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	07db      	lsls	r3, r3, #31
 800954c:	d506      	bpl.n	800955c <__swbuf_r+0x6c>
 800954e:	2e0a      	cmp	r6, #10
 8009550:	d104      	bne.n	800955c <__swbuf_r+0x6c>
 8009552:	4621      	mov	r1, r4
 8009554:	4628      	mov	r0, r5
 8009556:	f000 f911 	bl	800977c <_fflush_r>
 800955a:	b988      	cbnz	r0, 8009580 <__swbuf_r+0x90>
 800955c:	4638      	mov	r0, r7
 800955e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009560:	4b0a      	ldr	r3, [pc, #40]	; (800958c <__swbuf_r+0x9c>)
 8009562:	429c      	cmp	r4, r3
 8009564:	d101      	bne.n	800956a <__swbuf_r+0x7a>
 8009566:	68ac      	ldr	r4, [r5, #8]
 8009568:	e7cf      	b.n	800950a <__swbuf_r+0x1a>
 800956a:	4b09      	ldr	r3, [pc, #36]	; (8009590 <__swbuf_r+0xa0>)
 800956c:	429c      	cmp	r4, r3
 800956e:	bf08      	it	eq
 8009570:	68ec      	ldreq	r4, [r5, #12]
 8009572:	e7ca      	b.n	800950a <__swbuf_r+0x1a>
 8009574:	4621      	mov	r1, r4
 8009576:	4628      	mov	r0, r5
 8009578:	f000 f80c 	bl	8009594 <__swsetup_r>
 800957c:	2800      	cmp	r0, #0
 800957e:	d0cb      	beq.n	8009518 <__swbuf_r+0x28>
 8009580:	f04f 37ff 	mov.w	r7, #4294967295
 8009584:	e7ea      	b.n	800955c <__swbuf_r+0x6c>
 8009586:	bf00      	nop
 8009588:	08009e88 	.word	0x08009e88
 800958c:	08009ea8 	.word	0x08009ea8
 8009590:	08009e68 	.word	0x08009e68

08009594 <__swsetup_r>:
 8009594:	4b32      	ldr	r3, [pc, #200]	; (8009660 <__swsetup_r+0xcc>)
 8009596:	b570      	push	{r4, r5, r6, lr}
 8009598:	681d      	ldr	r5, [r3, #0]
 800959a:	4606      	mov	r6, r0
 800959c:	460c      	mov	r4, r1
 800959e:	b125      	cbz	r5, 80095aa <__swsetup_r+0x16>
 80095a0:	69ab      	ldr	r3, [r5, #24]
 80095a2:	b913      	cbnz	r3, 80095aa <__swsetup_r+0x16>
 80095a4:	4628      	mov	r0, r5
 80095a6:	f000 f97d 	bl	80098a4 <__sinit>
 80095aa:	4b2e      	ldr	r3, [pc, #184]	; (8009664 <__swsetup_r+0xd0>)
 80095ac:	429c      	cmp	r4, r3
 80095ae:	d10f      	bne.n	80095d0 <__swsetup_r+0x3c>
 80095b0:	686c      	ldr	r4, [r5, #4]
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095b8:	0719      	lsls	r1, r3, #28
 80095ba:	d42c      	bmi.n	8009616 <__swsetup_r+0x82>
 80095bc:	06dd      	lsls	r5, r3, #27
 80095be:	d411      	bmi.n	80095e4 <__swsetup_r+0x50>
 80095c0:	2309      	movs	r3, #9
 80095c2:	6033      	str	r3, [r6, #0]
 80095c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095c8:	81a3      	strh	r3, [r4, #12]
 80095ca:	f04f 30ff 	mov.w	r0, #4294967295
 80095ce:	e03e      	b.n	800964e <__swsetup_r+0xba>
 80095d0:	4b25      	ldr	r3, [pc, #148]	; (8009668 <__swsetup_r+0xd4>)
 80095d2:	429c      	cmp	r4, r3
 80095d4:	d101      	bne.n	80095da <__swsetup_r+0x46>
 80095d6:	68ac      	ldr	r4, [r5, #8]
 80095d8:	e7eb      	b.n	80095b2 <__swsetup_r+0x1e>
 80095da:	4b24      	ldr	r3, [pc, #144]	; (800966c <__swsetup_r+0xd8>)
 80095dc:	429c      	cmp	r4, r3
 80095de:	bf08      	it	eq
 80095e0:	68ec      	ldreq	r4, [r5, #12]
 80095e2:	e7e6      	b.n	80095b2 <__swsetup_r+0x1e>
 80095e4:	0758      	lsls	r0, r3, #29
 80095e6:	d512      	bpl.n	800960e <__swsetup_r+0x7a>
 80095e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095ea:	b141      	cbz	r1, 80095fe <__swsetup_r+0x6a>
 80095ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095f0:	4299      	cmp	r1, r3
 80095f2:	d002      	beq.n	80095fa <__swsetup_r+0x66>
 80095f4:	4630      	mov	r0, r6
 80095f6:	f000 fa5b 	bl	8009ab0 <_free_r>
 80095fa:	2300      	movs	r3, #0
 80095fc:	6363      	str	r3, [r4, #52]	; 0x34
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009604:	81a3      	strh	r3, [r4, #12]
 8009606:	2300      	movs	r3, #0
 8009608:	6063      	str	r3, [r4, #4]
 800960a:	6923      	ldr	r3, [r4, #16]
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	f043 0308 	orr.w	r3, r3, #8
 8009614:	81a3      	strh	r3, [r4, #12]
 8009616:	6923      	ldr	r3, [r4, #16]
 8009618:	b94b      	cbnz	r3, 800962e <__swsetup_r+0x9a>
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009624:	d003      	beq.n	800962e <__swsetup_r+0x9a>
 8009626:	4621      	mov	r1, r4
 8009628:	4630      	mov	r0, r6
 800962a:	f000 fa01 	bl	8009a30 <__smakebuf_r>
 800962e:	89a0      	ldrh	r0, [r4, #12]
 8009630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009634:	f010 0301 	ands.w	r3, r0, #1
 8009638:	d00a      	beq.n	8009650 <__swsetup_r+0xbc>
 800963a:	2300      	movs	r3, #0
 800963c:	60a3      	str	r3, [r4, #8]
 800963e:	6963      	ldr	r3, [r4, #20]
 8009640:	425b      	negs	r3, r3
 8009642:	61a3      	str	r3, [r4, #24]
 8009644:	6923      	ldr	r3, [r4, #16]
 8009646:	b943      	cbnz	r3, 800965a <__swsetup_r+0xc6>
 8009648:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800964c:	d1ba      	bne.n	80095c4 <__swsetup_r+0x30>
 800964e:	bd70      	pop	{r4, r5, r6, pc}
 8009650:	0781      	lsls	r1, r0, #30
 8009652:	bf58      	it	pl
 8009654:	6963      	ldrpl	r3, [r4, #20]
 8009656:	60a3      	str	r3, [r4, #8]
 8009658:	e7f4      	b.n	8009644 <__swsetup_r+0xb0>
 800965a:	2000      	movs	r0, #0
 800965c:	e7f7      	b.n	800964e <__swsetup_r+0xba>
 800965e:	bf00      	nop
 8009660:	240000b0 	.word	0x240000b0
 8009664:	08009e88 	.word	0x08009e88
 8009668:	08009ea8 	.word	0x08009ea8
 800966c:	08009e68 	.word	0x08009e68

08009670 <__sflush_r>:
 8009670:	898a      	ldrh	r2, [r1, #12]
 8009672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009676:	4605      	mov	r5, r0
 8009678:	0710      	lsls	r0, r2, #28
 800967a:	460c      	mov	r4, r1
 800967c:	d458      	bmi.n	8009730 <__sflush_r+0xc0>
 800967e:	684b      	ldr	r3, [r1, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	dc05      	bgt.n	8009690 <__sflush_r+0x20>
 8009684:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009686:	2b00      	cmp	r3, #0
 8009688:	dc02      	bgt.n	8009690 <__sflush_r+0x20>
 800968a:	2000      	movs	r0, #0
 800968c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009692:	2e00      	cmp	r6, #0
 8009694:	d0f9      	beq.n	800968a <__sflush_r+0x1a>
 8009696:	2300      	movs	r3, #0
 8009698:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800969c:	682f      	ldr	r7, [r5, #0]
 800969e:	602b      	str	r3, [r5, #0]
 80096a0:	d032      	beq.n	8009708 <__sflush_r+0x98>
 80096a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	075a      	lsls	r2, r3, #29
 80096a8:	d505      	bpl.n	80096b6 <__sflush_r+0x46>
 80096aa:	6863      	ldr	r3, [r4, #4]
 80096ac:	1ac0      	subs	r0, r0, r3
 80096ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096b0:	b10b      	cbz	r3, 80096b6 <__sflush_r+0x46>
 80096b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096b4:	1ac0      	subs	r0, r0, r3
 80096b6:	2300      	movs	r3, #0
 80096b8:	4602      	mov	r2, r0
 80096ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096bc:	6a21      	ldr	r1, [r4, #32]
 80096be:	4628      	mov	r0, r5
 80096c0:	47b0      	blx	r6
 80096c2:	1c43      	adds	r3, r0, #1
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	d106      	bne.n	80096d6 <__sflush_r+0x66>
 80096c8:	6829      	ldr	r1, [r5, #0]
 80096ca:	291d      	cmp	r1, #29
 80096cc:	d82c      	bhi.n	8009728 <__sflush_r+0xb8>
 80096ce:	4a2a      	ldr	r2, [pc, #168]	; (8009778 <__sflush_r+0x108>)
 80096d0:	40ca      	lsrs	r2, r1
 80096d2:	07d6      	lsls	r6, r2, #31
 80096d4:	d528      	bpl.n	8009728 <__sflush_r+0xb8>
 80096d6:	2200      	movs	r2, #0
 80096d8:	6062      	str	r2, [r4, #4]
 80096da:	04d9      	lsls	r1, r3, #19
 80096dc:	6922      	ldr	r2, [r4, #16]
 80096de:	6022      	str	r2, [r4, #0]
 80096e0:	d504      	bpl.n	80096ec <__sflush_r+0x7c>
 80096e2:	1c42      	adds	r2, r0, #1
 80096e4:	d101      	bne.n	80096ea <__sflush_r+0x7a>
 80096e6:	682b      	ldr	r3, [r5, #0]
 80096e8:	b903      	cbnz	r3, 80096ec <__sflush_r+0x7c>
 80096ea:	6560      	str	r0, [r4, #84]	; 0x54
 80096ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096ee:	602f      	str	r7, [r5, #0]
 80096f0:	2900      	cmp	r1, #0
 80096f2:	d0ca      	beq.n	800968a <__sflush_r+0x1a>
 80096f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096f8:	4299      	cmp	r1, r3
 80096fa:	d002      	beq.n	8009702 <__sflush_r+0x92>
 80096fc:	4628      	mov	r0, r5
 80096fe:	f000 f9d7 	bl	8009ab0 <_free_r>
 8009702:	2000      	movs	r0, #0
 8009704:	6360      	str	r0, [r4, #52]	; 0x34
 8009706:	e7c1      	b.n	800968c <__sflush_r+0x1c>
 8009708:	6a21      	ldr	r1, [r4, #32]
 800970a:	2301      	movs	r3, #1
 800970c:	4628      	mov	r0, r5
 800970e:	47b0      	blx	r6
 8009710:	1c41      	adds	r1, r0, #1
 8009712:	d1c7      	bne.n	80096a4 <__sflush_r+0x34>
 8009714:	682b      	ldr	r3, [r5, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d0c4      	beq.n	80096a4 <__sflush_r+0x34>
 800971a:	2b1d      	cmp	r3, #29
 800971c:	d001      	beq.n	8009722 <__sflush_r+0xb2>
 800971e:	2b16      	cmp	r3, #22
 8009720:	d101      	bne.n	8009726 <__sflush_r+0xb6>
 8009722:	602f      	str	r7, [r5, #0]
 8009724:	e7b1      	b.n	800968a <__sflush_r+0x1a>
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800972c:	81a3      	strh	r3, [r4, #12]
 800972e:	e7ad      	b.n	800968c <__sflush_r+0x1c>
 8009730:	690f      	ldr	r7, [r1, #16]
 8009732:	2f00      	cmp	r7, #0
 8009734:	d0a9      	beq.n	800968a <__sflush_r+0x1a>
 8009736:	0793      	lsls	r3, r2, #30
 8009738:	680e      	ldr	r6, [r1, #0]
 800973a:	bf08      	it	eq
 800973c:	694b      	ldreq	r3, [r1, #20]
 800973e:	600f      	str	r7, [r1, #0]
 8009740:	bf18      	it	ne
 8009742:	2300      	movne	r3, #0
 8009744:	eba6 0807 	sub.w	r8, r6, r7
 8009748:	608b      	str	r3, [r1, #8]
 800974a:	f1b8 0f00 	cmp.w	r8, #0
 800974e:	dd9c      	ble.n	800968a <__sflush_r+0x1a>
 8009750:	6a21      	ldr	r1, [r4, #32]
 8009752:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009754:	4643      	mov	r3, r8
 8009756:	463a      	mov	r2, r7
 8009758:	4628      	mov	r0, r5
 800975a:	47b0      	blx	r6
 800975c:	2800      	cmp	r0, #0
 800975e:	dc06      	bgt.n	800976e <__sflush_r+0xfe>
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009766:	81a3      	strh	r3, [r4, #12]
 8009768:	f04f 30ff 	mov.w	r0, #4294967295
 800976c:	e78e      	b.n	800968c <__sflush_r+0x1c>
 800976e:	4407      	add	r7, r0
 8009770:	eba8 0800 	sub.w	r8, r8, r0
 8009774:	e7e9      	b.n	800974a <__sflush_r+0xda>
 8009776:	bf00      	nop
 8009778:	20400001 	.word	0x20400001

0800977c <_fflush_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	690b      	ldr	r3, [r1, #16]
 8009780:	4605      	mov	r5, r0
 8009782:	460c      	mov	r4, r1
 8009784:	b913      	cbnz	r3, 800978c <_fflush_r+0x10>
 8009786:	2500      	movs	r5, #0
 8009788:	4628      	mov	r0, r5
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	b118      	cbz	r0, 8009796 <_fflush_r+0x1a>
 800978e:	6983      	ldr	r3, [r0, #24]
 8009790:	b90b      	cbnz	r3, 8009796 <_fflush_r+0x1a>
 8009792:	f000 f887 	bl	80098a4 <__sinit>
 8009796:	4b14      	ldr	r3, [pc, #80]	; (80097e8 <_fflush_r+0x6c>)
 8009798:	429c      	cmp	r4, r3
 800979a:	d11b      	bne.n	80097d4 <_fflush_r+0x58>
 800979c:	686c      	ldr	r4, [r5, #4]
 800979e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d0ef      	beq.n	8009786 <_fflush_r+0xa>
 80097a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097a8:	07d0      	lsls	r0, r2, #31
 80097aa:	d404      	bmi.n	80097b6 <_fflush_r+0x3a>
 80097ac:	0599      	lsls	r1, r3, #22
 80097ae:	d402      	bmi.n	80097b6 <_fflush_r+0x3a>
 80097b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097b2:	f000 f915 	bl	80099e0 <__retarget_lock_acquire_recursive>
 80097b6:	4628      	mov	r0, r5
 80097b8:	4621      	mov	r1, r4
 80097ba:	f7ff ff59 	bl	8009670 <__sflush_r>
 80097be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097c0:	07da      	lsls	r2, r3, #31
 80097c2:	4605      	mov	r5, r0
 80097c4:	d4e0      	bmi.n	8009788 <_fflush_r+0xc>
 80097c6:	89a3      	ldrh	r3, [r4, #12]
 80097c8:	059b      	lsls	r3, r3, #22
 80097ca:	d4dd      	bmi.n	8009788 <_fflush_r+0xc>
 80097cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ce:	f000 f908 	bl	80099e2 <__retarget_lock_release_recursive>
 80097d2:	e7d9      	b.n	8009788 <_fflush_r+0xc>
 80097d4:	4b05      	ldr	r3, [pc, #20]	; (80097ec <_fflush_r+0x70>)
 80097d6:	429c      	cmp	r4, r3
 80097d8:	d101      	bne.n	80097de <_fflush_r+0x62>
 80097da:	68ac      	ldr	r4, [r5, #8]
 80097dc:	e7df      	b.n	800979e <_fflush_r+0x22>
 80097de:	4b04      	ldr	r3, [pc, #16]	; (80097f0 <_fflush_r+0x74>)
 80097e0:	429c      	cmp	r4, r3
 80097e2:	bf08      	it	eq
 80097e4:	68ec      	ldreq	r4, [r5, #12]
 80097e6:	e7da      	b.n	800979e <_fflush_r+0x22>
 80097e8:	08009e88 	.word	0x08009e88
 80097ec:	08009ea8 	.word	0x08009ea8
 80097f0:	08009e68 	.word	0x08009e68

080097f4 <std>:
 80097f4:	2300      	movs	r3, #0
 80097f6:	b510      	push	{r4, lr}
 80097f8:	4604      	mov	r4, r0
 80097fa:	e9c0 3300 	strd	r3, r3, [r0]
 80097fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009802:	6083      	str	r3, [r0, #8]
 8009804:	8181      	strh	r1, [r0, #12]
 8009806:	6643      	str	r3, [r0, #100]	; 0x64
 8009808:	81c2      	strh	r2, [r0, #14]
 800980a:	6183      	str	r3, [r0, #24]
 800980c:	4619      	mov	r1, r3
 800980e:	2208      	movs	r2, #8
 8009810:	305c      	adds	r0, #92	; 0x5c
 8009812:	f7ff fdef 	bl	80093f4 <memset>
 8009816:	4b05      	ldr	r3, [pc, #20]	; (800982c <std+0x38>)
 8009818:	6263      	str	r3, [r4, #36]	; 0x24
 800981a:	4b05      	ldr	r3, [pc, #20]	; (8009830 <std+0x3c>)
 800981c:	62a3      	str	r3, [r4, #40]	; 0x28
 800981e:	4b05      	ldr	r3, [pc, #20]	; (8009834 <std+0x40>)
 8009820:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009822:	4b05      	ldr	r3, [pc, #20]	; (8009838 <std+0x44>)
 8009824:	6224      	str	r4, [r4, #32]
 8009826:	6323      	str	r3, [r4, #48]	; 0x30
 8009828:	bd10      	pop	{r4, pc}
 800982a:	bf00      	nop
 800982c:	08009c91 	.word	0x08009c91
 8009830:	08009cb3 	.word	0x08009cb3
 8009834:	08009ceb 	.word	0x08009ceb
 8009838:	08009d0f 	.word	0x08009d0f

0800983c <_cleanup_r>:
 800983c:	4901      	ldr	r1, [pc, #4]	; (8009844 <_cleanup_r+0x8>)
 800983e:	f000 b8af 	b.w	80099a0 <_fwalk_reent>
 8009842:	bf00      	nop
 8009844:	0800977d 	.word	0x0800977d

08009848 <__sfmoreglue>:
 8009848:	b570      	push	{r4, r5, r6, lr}
 800984a:	2268      	movs	r2, #104	; 0x68
 800984c:	1e4d      	subs	r5, r1, #1
 800984e:	4355      	muls	r5, r2
 8009850:	460e      	mov	r6, r1
 8009852:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009856:	f000 f997 	bl	8009b88 <_malloc_r>
 800985a:	4604      	mov	r4, r0
 800985c:	b140      	cbz	r0, 8009870 <__sfmoreglue+0x28>
 800985e:	2100      	movs	r1, #0
 8009860:	e9c0 1600 	strd	r1, r6, [r0]
 8009864:	300c      	adds	r0, #12
 8009866:	60a0      	str	r0, [r4, #8]
 8009868:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800986c:	f7ff fdc2 	bl	80093f4 <memset>
 8009870:	4620      	mov	r0, r4
 8009872:	bd70      	pop	{r4, r5, r6, pc}

08009874 <__sfp_lock_acquire>:
 8009874:	4801      	ldr	r0, [pc, #4]	; (800987c <__sfp_lock_acquire+0x8>)
 8009876:	f000 b8b3 	b.w	80099e0 <__retarget_lock_acquire_recursive>
 800987a:	bf00      	nop
 800987c:	24000249 	.word	0x24000249

08009880 <__sfp_lock_release>:
 8009880:	4801      	ldr	r0, [pc, #4]	; (8009888 <__sfp_lock_release+0x8>)
 8009882:	f000 b8ae 	b.w	80099e2 <__retarget_lock_release_recursive>
 8009886:	bf00      	nop
 8009888:	24000249 	.word	0x24000249

0800988c <__sinit_lock_acquire>:
 800988c:	4801      	ldr	r0, [pc, #4]	; (8009894 <__sinit_lock_acquire+0x8>)
 800988e:	f000 b8a7 	b.w	80099e0 <__retarget_lock_acquire_recursive>
 8009892:	bf00      	nop
 8009894:	2400024a 	.word	0x2400024a

08009898 <__sinit_lock_release>:
 8009898:	4801      	ldr	r0, [pc, #4]	; (80098a0 <__sinit_lock_release+0x8>)
 800989a:	f000 b8a2 	b.w	80099e2 <__retarget_lock_release_recursive>
 800989e:	bf00      	nop
 80098a0:	2400024a 	.word	0x2400024a

080098a4 <__sinit>:
 80098a4:	b510      	push	{r4, lr}
 80098a6:	4604      	mov	r4, r0
 80098a8:	f7ff fff0 	bl	800988c <__sinit_lock_acquire>
 80098ac:	69a3      	ldr	r3, [r4, #24]
 80098ae:	b11b      	cbz	r3, 80098b8 <__sinit+0x14>
 80098b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098b4:	f7ff bff0 	b.w	8009898 <__sinit_lock_release>
 80098b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098bc:	6523      	str	r3, [r4, #80]	; 0x50
 80098be:	4b13      	ldr	r3, [pc, #76]	; (800990c <__sinit+0x68>)
 80098c0:	4a13      	ldr	r2, [pc, #76]	; (8009910 <__sinit+0x6c>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80098c6:	42a3      	cmp	r3, r4
 80098c8:	bf04      	itt	eq
 80098ca:	2301      	moveq	r3, #1
 80098cc:	61a3      	streq	r3, [r4, #24]
 80098ce:	4620      	mov	r0, r4
 80098d0:	f000 f820 	bl	8009914 <__sfp>
 80098d4:	6060      	str	r0, [r4, #4]
 80098d6:	4620      	mov	r0, r4
 80098d8:	f000 f81c 	bl	8009914 <__sfp>
 80098dc:	60a0      	str	r0, [r4, #8]
 80098de:	4620      	mov	r0, r4
 80098e0:	f000 f818 	bl	8009914 <__sfp>
 80098e4:	2200      	movs	r2, #0
 80098e6:	60e0      	str	r0, [r4, #12]
 80098e8:	2104      	movs	r1, #4
 80098ea:	6860      	ldr	r0, [r4, #4]
 80098ec:	f7ff ff82 	bl	80097f4 <std>
 80098f0:	68a0      	ldr	r0, [r4, #8]
 80098f2:	2201      	movs	r2, #1
 80098f4:	2109      	movs	r1, #9
 80098f6:	f7ff ff7d 	bl	80097f4 <std>
 80098fa:	68e0      	ldr	r0, [r4, #12]
 80098fc:	2202      	movs	r2, #2
 80098fe:	2112      	movs	r1, #18
 8009900:	f7ff ff78 	bl	80097f4 <std>
 8009904:	2301      	movs	r3, #1
 8009906:	61a3      	str	r3, [r4, #24]
 8009908:	e7d2      	b.n	80098b0 <__sinit+0xc>
 800990a:	bf00      	nop
 800990c:	08009e64 	.word	0x08009e64
 8009910:	0800983d 	.word	0x0800983d

08009914 <__sfp>:
 8009914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009916:	4607      	mov	r7, r0
 8009918:	f7ff ffac 	bl	8009874 <__sfp_lock_acquire>
 800991c:	4b1e      	ldr	r3, [pc, #120]	; (8009998 <__sfp+0x84>)
 800991e:	681e      	ldr	r6, [r3, #0]
 8009920:	69b3      	ldr	r3, [r6, #24]
 8009922:	b913      	cbnz	r3, 800992a <__sfp+0x16>
 8009924:	4630      	mov	r0, r6
 8009926:	f7ff ffbd 	bl	80098a4 <__sinit>
 800992a:	3648      	adds	r6, #72	; 0x48
 800992c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009930:	3b01      	subs	r3, #1
 8009932:	d503      	bpl.n	800993c <__sfp+0x28>
 8009934:	6833      	ldr	r3, [r6, #0]
 8009936:	b30b      	cbz	r3, 800997c <__sfp+0x68>
 8009938:	6836      	ldr	r6, [r6, #0]
 800993a:	e7f7      	b.n	800992c <__sfp+0x18>
 800993c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009940:	b9d5      	cbnz	r5, 8009978 <__sfp+0x64>
 8009942:	4b16      	ldr	r3, [pc, #88]	; (800999c <__sfp+0x88>)
 8009944:	60e3      	str	r3, [r4, #12]
 8009946:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800994a:	6665      	str	r5, [r4, #100]	; 0x64
 800994c:	f000 f847 	bl	80099de <__retarget_lock_init_recursive>
 8009950:	f7ff ff96 	bl	8009880 <__sfp_lock_release>
 8009954:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009958:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800995c:	6025      	str	r5, [r4, #0]
 800995e:	61a5      	str	r5, [r4, #24]
 8009960:	2208      	movs	r2, #8
 8009962:	4629      	mov	r1, r5
 8009964:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009968:	f7ff fd44 	bl	80093f4 <memset>
 800996c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009970:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009974:	4620      	mov	r0, r4
 8009976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009978:	3468      	adds	r4, #104	; 0x68
 800997a:	e7d9      	b.n	8009930 <__sfp+0x1c>
 800997c:	2104      	movs	r1, #4
 800997e:	4638      	mov	r0, r7
 8009980:	f7ff ff62 	bl	8009848 <__sfmoreglue>
 8009984:	4604      	mov	r4, r0
 8009986:	6030      	str	r0, [r6, #0]
 8009988:	2800      	cmp	r0, #0
 800998a:	d1d5      	bne.n	8009938 <__sfp+0x24>
 800998c:	f7ff ff78 	bl	8009880 <__sfp_lock_release>
 8009990:	230c      	movs	r3, #12
 8009992:	603b      	str	r3, [r7, #0]
 8009994:	e7ee      	b.n	8009974 <__sfp+0x60>
 8009996:	bf00      	nop
 8009998:	08009e64 	.word	0x08009e64
 800999c:	ffff0001 	.word	0xffff0001

080099a0 <_fwalk_reent>:
 80099a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a4:	4606      	mov	r6, r0
 80099a6:	4688      	mov	r8, r1
 80099a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099ac:	2700      	movs	r7, #0
 80099ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099b2:	f1b9 0901 	subs.w	r9, r9, #1
 80099b6:	d505      	bpl.n	80099c4 <_fwalk_reent+0x24>
 80099b8:	6824      	ldr	r4, [r4, #0]
 80099ba:	2c00      	cmp	r4, #0
 80099bc:	d1f7      	bne.n	80099ae <_fwalk_reent+0xe>
 80099be:	4638      	mov	r0, r7
 80099c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099c4:	89ab      	ldrh	r3, [r5, #12]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d907      	bls.n	80099da <_fwalk_reent+0x3a>
 80099ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099ce:	3301      	adds	r3, #1
 80099d0:	d003      	beq.n	80099da <_fwalk_reent+0x3a>
 80099d2:	4629      	mov	r1, r5
 80099d4:	4630      	mov	r0, r6
 80099d6:	47c0      	blx	r8
 80099d8:	4307      	orrs	r7, r0
 80099da:	3568      	adds	r5, #104	; 0x68
 80099dc:	e7e9      	b.n	80099b2 <_fwalk_reent+0x12>

080099de <__retarget_lock_init_recursive>:
 80099de:	4770      	bx	lr

080099e0 <__retarget_lock_acquire_recursive>:
 80099e0:	4770      	bx	lr

080099e2 <__retarget_lock_release_recursive>:
 80099e2:	4770      	bx	lr

080099e4 <__swhatbuf_r>:
 80099e4:	b570      	push	{r4, r5, r6, lr}
 80099e6:	460e      	mov	r6, r1
 80099e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ec:	2900      	cmp	r1, #0
 80099ee:	b096      	sub	sp, #88	; 0x58
 80099f0:	4614      	mov	r4, r2
 80099f2:	461d      	mov	r5, r3
 80099f4:	da08      	bge.n	8009a08 <__swhatbuf_r+0x24>
 80099f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	602a      	str	r2, [r5, #0]
 80099fe:	061a      	lsls	r2, r3, #24
 8009a00:	d410      	bmi.n	8009a24 <__swhatbuf_r+0x40>
 8009a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a06:	e00e      	b.n	8009a26 <__swhatbuf_r+0x42>
 8009a08:	466a      	mov	r2, sp
 8009a0a:	f000 f9a7 	bl	8009d5c <_fstat_r>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	dbf1      	blt.n	80099f6 <__swhatbuf_r+0x12>
 8009a12:	9a01      	ldr	r2, [sp, #4]
 8009a14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a1c:	425a      	negs	r2, r3
 8009a1e:	415a      	adcs	r2, r3
 8009a20:	602a      	str	r2, [r5, #0]
 8009a22:	e7ee      	b.n	8009a02 <__swhatbuf_r+0x1e>
 8009a24:	2340      	movs	r3, #64	; 0x40
 8009a26:	2000      	movs	r0, #0
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	b016      	add	sp, #88	; 0x58
 8009a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a30 <__smakebuf_r>:
 8009a30:	898b      	ldrh	r3, [r1, #12]
 8009a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a34:	079d      	lsls	r5, r3, #30
 8009a36:	4606      	mov	r6, r0
 8009a38:	460c      	mov	r4, r1
 8009a3a:	d507      	bpl.n	8009a4c <__smakebuf_r+0x1c>
 8009a3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a40:	6023      	str	r3, [r4, #0]
 8009a42:	6123      	str	r3, [r4, #16]
 8009a44:	2301      	movs	r3, #1
 8009a46:	6163      	str	r3, [r4, #20]
 8009a48:	b002      	add	sp, #8
 8009a4a:	bd70      	pop	{r4, r5, r6, pc}
 8009a4c:	ab01      	add	r3, sp, #4
 8009a4e:	466a      	mov	r2, sp
 8009a50:	f7ff ffc8 	bl	80099e4 <__swhatbuf_r>
 8009a54:	9900      	ldr	r1, [sp, #0]
 8009a56:	4605      	mov	r5, r0
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f000 f895 	bl	8009b88 <_malloc_r>
 8009a5e:	b948      	cbnz	r0, 8009a74 <__smakebuf_r+0x44>
 8009a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a64:	059a      	lsls	r2, r3, #22
 8009a66:	d4ef      	bmi.n	8009a48 <__smakebuf_r+0x18>
 8009a68:	f023 0303 	bic.w	r3, r3, #3
 8009a6c:	f043 0302 	orr.w	r3, r3, #2
 8009a70:	81a3      	strh	r3, [r4, #12]
 8009a72:	e7e3      	b.n	8009a3c <__smakebuf_r+0xc>
 8009a74:	4b0d      	ldr	r3, [pc, #52]	; (8009aac <__smakebuf_r+0x7c>)
 8009a76:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	6020      	str	r0, [r4, #0]
 8009a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a80:	81a3      	strh	r3, [r4, #12]
 8009a82:	9b00      	ldr	r3, [sp, #0]
 8009a84:	6163      	str	r3, [r4, #20]
 8009a86:	9b01      	ldr	r3, [sp, #4]
 8009a88:	6120      	str	r0, [r4, #16]
 8009a8a:	b15b      	cbz	r3, 8009aa4 <__smakebuf_r+0x74>
 8009a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a90:	4630      	mov	r0, r6
 8009a92:	f000 f975 	bl	8009d80 <_isatty_r>
 8009a96:	b128      	cbz	r0, 8009aa4 <__smakebuf_r+0x74>
 8009a98:	89a3      	ldrh	r3, [r4, #12]
 8009a9a:	f023 0303 	bic.w	r3, r3, #3
 8009a9e:	f043 0301 	orr.w	r3, r3, #1
 8009aa2:	81a3      	strh	r3, [r4, #12]
 8009aa4:	89a0      	ldrh	r0, [r4, #12]
 8009aa6:	4305      	orrs	r5, r0
 8009aa8:	81a5      	strh	r5, [r4, #12]
 8009aaa:	e7cd      	b.n	8009a48 <__smakebuf_r+0x18>
 8009aac:	0800983d 	.word	0x0800983d

08009ab0 <_free_r>:
 8009ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ab2:	2900      	cmp	r1, #0
 8009ab4:	d044      	beq.n	8009b40 <_free_r+0x90>
 8009ab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aba:	9001      	str	r0, [sp, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f1a1 0404 	sub.w	r4, r1, #4
 8009ac2:	bfb8      	it	lt
 8009ac4:	18e4      	addlt	r4, r4, r3
 8009ac6:	f000 f97d 	bl	8009dc4 <__malloc_lock>
 8009aca:	4a1e      	ldr	r2, [pc, #120]	; (8009b44 <_free_r+0x94>)
 8009acc:	9801      	ldr	r0, [sp, #4]
 8009ace:	6813      	ldr	r3, [r2, #0]
 8009ad0:	b933      	cbnz	r3, 8009ae0 <_free_r+0x30>
 8009ad2:	6063      	str	r3, [r4, #4]
 8009ad4:	6014      	str	r4, [r2, #0]
 8009ad6:	b003      	add	sp, #12
 8009ad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009adc:	f000 b978 	b.w	8009dd0 <__malloc_unlock>
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	d908      	bls.n	8009af6 <_free_r+0x46>
 8009ae4:	6825      	ldr	r5, [r4, #0]
 8009ae6:	1961      	adds	r1, r4, r5
 8009ae8:	428b      	cmp	r3, r1
 8009aea:	bf01      	itttt	eq
 8009aec:	6819      	ldreq	r1, [r3, #0]
 8009aee:	685b      	ldreq	r3, [r3, #4]
 8009af0:	1949      	addeq	r1, r1, r5
 8009af2:	6021      	streq	r1, [r4, #0]
 8009af4:	e7ed      	b.n	8009ad2 <_free_r+0x22>
 8009af6:	461a      	mov	r2, r3
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	b10b      	cbz	r3, 8009b00 <_free_r+0x50>
 8009afc:	42a3      	cmp	r3, r4
 8009afe:	d9fa      	bls.n	8009af6 <_free_r+0x46>
 8009b00:	6811      	ldr	r1, [r2, #0]
 8009b02:	1855      	adds	r5, r2, r1
 8009b04:	42a5      	cmp	r5, r4
 8009b06:	d10b      	bne.n	8009b20 <_free_r+0x70>
 8009b08:	6824      	ldr	r4, [r4, #0]
 8009b0a:	4421      	add	r1, r4
 8009b0c:	1854      	adds	r4, r2, r1
 8009b0e:	42a3      	cmp	r3, r4
 8009b10:	6011      	str	r1, [r2, #0]
 8009b12:	d1e0      	bne.n	8009ad6 <_free_r+0x26>
 8009b14:	681c      	ldr	r4, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	6053      	str	r3, [r2, #4]
 8009b1a:	4421      	add	r1, r4
 8009b1c:	6011      	str	r1, [r2, #0]
 8009b1e:	e7da      	b.n	8009ad6 <_free_r+0x26>
 8009b20:	d902      	bls.n	8009b28 <_free_r+0x78>
 8009b22:	230c      	movs	r3, #12
 8009b24:	6003      	str	r3, [r0, #0]
 8009b26:	e7d6      	b.n	8009ad6 <_free_r+0x26>
 8009b28:	6825      	ldr	r5, [r4, #0]
 8009b2a:	1961      	adds	r1, r4, r5
 8009b2c:	428b      	cmp	r3, r1
 8009b2e:	bf04      	itt	eq
 8009b30:	6819      	ldreq	r1, [r3, #0]
 8009b32:	685b      	ldreq	r3, [r3, #4]
 8009b34:	6063      	str	r3, [r4, #4]
 8009b36:	bf04      	itt	eq
 8009b38:	1949      	addeq	r1, r1, r5
 8009b3a:	6021      	streq	r1, [r4, #0]
 8009b3c:	6054      	str	r4, [r2, #4]
 8009b3e:	e7ca      	b.n	8009ad6 <_free_r+0x26>
 8009b40:	b003      	add	sp, #12
 8009b42:	bd30      	pop	{r4, r5, pc}
 8009b44:	2400024c 	.word	0x2400024c

08009b48 <sbrk_aligned>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	4e0e      	ldr	r6, [pc, #56]	; (8009b84 <sbrk_aligned+0x3c>)
 8009b4c:	460c      	mov	r4, r1
 8009b4e:	6831      	ldr	r1, [r6, #0]
 8009b50:	4605      	mov	r5, r0
 8009b52:	b911      	cbnz	r1, 8009b5a <sbrk_aligned+0x12>
 8009b54:	f000 f88c 	bl	8009c70 <_sbrk_r>
 8009b58:	6030      	str	r0, [r6, #0]
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	f000 f887 	bl	8009c70 <_sbrk_r>
 8009b62:	1c43      	adds	r3, r0, #1
 8009b64:	d00a      	beq.n	8009b7c <sbrk_aligned+0x34>
 8009b66:	1cc4      	adds	r4, r0, #3
 8009b68:	f024 0403 	bic.w	r4, r4, #3
 8009b6c:	42a0      	cmp	r0, r4
 8009b6e:	d007      	beq.n	8009b80 <sbrk_aligned+0x38>
 8009b70:	1a21      	subs	r1, r4, r0
 8009b72:	4628      	mov	r0, r5
 8009b74:	f000 f87c 	bl	8009c70 <_sbrk_r>
 8009b78:	3001      	adds	r0, #1
 8009b7a:	d101      	bne.n	8009b80 <sbrk_aligned+0x38>
 8009b7c:	f04f 34ff 	mov.w	r4, #4294967295
 8009b80:	4620      	mov	r0, r4
 8009b82:	bd70      	pop	{r4, r5, r6, pc}
 8009b84:	24000250 	.word	0x24000250

08009b88 <_malloc_r>:
 8009b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b8c:	1ccd      	adds	r5, r1, #3
 8009b8e:	f025 0503 	bic.w	r5, r5, #3
 8009b92:	3508      	adds	r5, #8
 8009b94:	2d0c      	cmp	r5, #12
 8009b96:	bf38      	it	cc
 8009b98:	250c      	movcc	r5, #12
 8009b9a:	2d00      	cmp	r5, #0
 8009b9c:	4607      	mov	r7, r0
 8009b9e:	db01      	blt.n	8009ba4 <_malloc_r+0x1c>
 8009ba0:	42a9      	cmp	r1, r5
 8009ba2:	d905      	bls.n	8009bb0 <_malloc_r+0x28>
 8009ba4:	230c      	movs	r3, #12
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	2600      	movs	r6, #0
 8009baa:	4630      	mov	r0, r6
 8009bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bb0:	4e2e      	ldr	r6, [pc, #184]	; (8009c6c <_malloc_r+0xe4>)
 8009bb2:	f000 f907 	bl	8009dc4 <__malloc_lock>
 8009bb6:	6833      	ldr	r3, [r6, #0]
 8009bb8:	461c      	mov	r4, r3
 8009bba:	bb34      	cbnz	r4, 8009c0a <_malloc_r+0x82>
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	f7ff ffc2 	bl	8009b48 <sbrk_aligned>
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	d14d      	bne.n	8009c66 <_malloc_r+0xde>
 8009bca:	6834      	ldr	r4, [r6, #0]
 8009bcc:	4626      	mov	r6, r4
 8009bce:	2e00      	cmp	r6, #0
 8009bd0:	d140      	bne.n	8009c54 <_malloc_r+0xcc>
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	eb04 0803 	add.w	r8, r4, r3
 8009bdc:	f000 f848 	bl	8009c70 <_sbrk_r>
 8009be0:	4580      	cmp	r8, r0
 8009be2:	d13a      	bne.n	8009c5a <_malloc_r+0xd2>
 8009be4:	6821      	ldr	r1, [r4, #0]
 8009be6:	3503      	adds	r5, #3
 8009be8:	1a6d      	subs	r5, r5, r1
 8009bea:	f025 0503 	bic.w	r5, r5, #3
 8009bee:	3508      	adds	r5, #8
 8009bf0:	2d0c      	cmp	r5, #12
 8009bf2:	bf38      	it	cc
 8009bf4:	250c      	movcc	r5, #12
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	4638      	mov	r0, r7
 8009bfa:	f7ff ffa5 	bl	8009b48 <sbrk_aligned>
 8009bfe:	3001      	adds	r0, #1
 8009c00:	d02b      	beq.n	8009c5a <_malloc_r+0xd2>
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	442b      	add	r3, r5
 8009c06:	6023      	str	r3, [r4, #0]
 8009c08:	e00e      	b.n	8009c28 <_malloc_r+0xa0>
 8009c0a:	6822      	ldr	r2, [r4, #0]
 8009c0c:	1b52      	subs	r2, r2, r5
 8009c0e:	d41e      	bmi.n	8009c4e <_malloc_r+0xc6>
 8009c10:	2a0b      	cmp	r2, #11
 8009c12:	d916      	bls.n	8009c42 <_malloc_r+0xba>
 8009c14:	1961      	adds	r1, r4, r5
 8009c16:	42a3      	cmp	r3, r4
 8009c18:	6025      	str	r5, [r4, #0]
 8009c1a:	bf18      	it	ne
 8009c1c:	6059      	strne	r1, [r3, #4]
 8009c1e:	6863      	ldr	r3, [r4, #4]
 8009c20:	bf08      	it	eq
 8009c22:	6031      	streq	r1, [r6, #0]
 8009c24:	5162      	str	r2, [r4, r5]
 8009c26:	604b      	str	r3, [r1, #4]
 8009c28:	4638      	mov	r0, r7
 8009c2a:	f104 060b 	add.w	r6, r4, #11
 8009c2e:	f000 f8cf 	bl	8009dd0 <__malloc_unlock>
 8009c32:	f026 0607 	bic.w	r6, r6, #7
 8009c36:	1d23      	adds	r3, r4, #4
 8009c38:	1af2      	subs	r2, r6, r3
 8009c3a:	d0b6      	beq.n	8009baa <_malloc_r+0x22>
 8009c3c:	1b9b      	subs	r3, r3, r6
 8009c3e:	50a3      	str	r3, [r4, r2]
 8009c40:	e7b3      	b.n	8009baa <_malloc_r+0x22>
 8009c42:	6862      	ldr	r2, [r4, #4]
 8009c44:	42a3      	cmp	r3, r4
 8009c46:	bf0c      	ite	eq
 8009c48:	6032      	streq	r2, [r6, #0]
 8009c4a:	605a      	strne	r2, [r3, #4]
 8009c4c:	e7ec      	b.n	8009c28 <_malloc_r+0xa0>
 8009c4e:	4623      	mov	r3, r4
 8009c50:	6864      	ldr	r4, [r4, #4]
 8009c52:	e7b2      	b.n	8009bba <_malloc_r+0x32>
 8009c54:	4634      	mov	r4, r6
 8009c56:	6876      	ldr	r6, [r6, #4]
 8009c58:	e7b9      	b.n	8009bce <_malloc_r+0x46>
 8009c5a:	230c      	movs	r3, #12
 8009c5c:	603b      	str	r3, [r7, #0]
 8009c5e:	4638      	mov	r0, r7
 8009c60:	f000 f8b6 	bl	8009dd0 <__malloc_unlock>
 8009c64:	e7a1      	b.n	8009baa <_malloc_r+0x22>
 8009c66:	6025      	str	r5, [r4, #0]
 8009c68:	e7de      	b.n	8009c28 <_malloc_r+0xa0>
 8009c6a:	bf00      	nop
 8009c6c:	2400024c 	.word	0x2400024c

08009c70 <_sbrk_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	4d06      	ldr	r5, [pc, #24]	; (8009c8c <_sbrk_r+0x1c>)
 8009c74:	2300      	movs	r3, #0
 8009c76:	4604      	mov	r4, r0
 8009c78:	4608      	mov	r0, r1
 8009c7a:	602b      	str	r3, [r5, #0]
 8009c7c:	f7f7 f94a 	bl	8000f14 <_sbrk>
 8009c80:	1c43      	adds	r3, r0, #1
 8009c82:	d102      	bne.n	8009c8a <_sbrk_r+0x1a>
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	b103      	cbz	r3, 8009c8a <_sbrk_r+0x1a>
 8009c88:	6023      	str	r3, [r4, #0]
 8009c8a:	bd38      	pop	{r3, r4, r5, pc}
 8009c8c:	24000254 	.word	0x24000254

08009c90 <__sread>:
 8009c90:	b510      	push	{r4, lr}
 8009c92:	460c      	mov	r4, r1
 8009c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c98:	f000 f8a0 	bl	8009ddc <_read_r>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	bfab      	itete	ge
 8009ca0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ca4:	181b      	addge	r3, r3, r0
 8009ca6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009caa:	bfac      	ite	ge
 8009cac:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cae:	81a3      	strhlt	r3, [r4, #12]
 8009cb0:	bd10      	pop	{r4, pc}

08009cb2 <__swrite>:
 8009cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb6:	461f      	mov	r7, r3
 8009cb8:	898b      	ldrh	r3, [r1, #12]
 8009cba:	05db      	lsls	r3, r3, #23
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	460c      	mov	r4, r1
 8009cc0:	4616      	mov	r6, r2
 8009cc2:	d505      	bpl.n	8009cd0 <__swrite+0x1e>
 8009cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc8:	2302      	movs	r3, #2
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f000 f868 	bl	8009da0 <_lseek_r>
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cda:	81a3      	strh	r3, [r4, #12]
 8009cdc:	4632      	mov	r2, r6
 8009cde:	463b      	mov	r3, r7
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce6:	f000 b817 	b.w	8009d18 <_write_r>

08009cea <__sseek>:
 8009cea:	b510      	push	{r4, lr}
 8009cec:	460c      	mov	r4, r1
 8009cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf2:	f000 f855 	bl	8009da0 <_lseek_r>
 8009cf6:	1c43      	adds	r3, r0, #1
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	bf15      	itete	ne
 8009cfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009cfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d06:	81a3      	strheq	r3, [r4, #12]
 8009d08:	bf18      	it	ne
 8009d0a:	81a3      	strhne	r3, [r4, #12]
 8009d0c:	bd10      	pop	{r4, pc}

08009d0e <__sclose>:
 8009d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d12:	f000 b813 	b.w	8009d3c <_close_r>
	...

08009d18 <_write_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4d07      	ldr	r5, [pc, #28]	; (8009d38 <_write_r+0x20>)
 8009d1c:	4604      	mov	r4, r0
 8009d1e:	4608      	mov	r0, r1
 8009d20:	4611      	mov	r1, r2
 8009d22:	2200      	movs	r2, #0
 8009d24:	602a      	str	r2, [r5, #0]
 8009d26:	461a      	mov	r2, r3
 8009d28:	f7f7 f8a3 	bl	8000e72 <_write>
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	d102      	bne.n	8009d36 <_write_r+0x1e>
 8009d30:	682b      	ldr	r3, [r5, #0]
 8009d32:	b103      	cbz	r3, 8009d36 <_write_r+0x1e>
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	bd38      	pop	{r3, r4, r5, pc}
 8009d38:	24000254 	.word	0x24000254

08009d3c <_close_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	4d06      	ldr	r5, [pc, #24]	; (8009d58 <_close_r+0x1c>)
 8009d40:	2300      	movs	r3, #0
 8009d42:	4604      	mov	r4, r0
 8009d44:	4608      	mov	r0, r1
 8009d46:	602b      	str	r3, [r5, #0]
 8009d48:	f7f7 f8af 	bl	8000eaa <_close>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	d102      	bne.n	8009d56 <_close_r+0x1a>
 8009d50:	682b      	ldr	r3, [r5, #0]
 8009d52:	b103      	cbz	r3, 8009d56 <_close_r+0x1a>
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	bd38      	pop	{r3, r4, r5, pc}
 8009d58:	24000254 	.word	0x24000254

08009d5c <_fstat_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4d07      	ldr	r5, [pc, #28]	; (8009d7c <_fstat_r+0x20>)
 8009d60:	2300      	movs	r3, #0
 8009d62:	4604      	mov	r4, r0
 8009d64:	4608      	mov	r0, r1
 8009d66:	4611      	mov	r1, r2
 8009d68:	602b      	str	r3, [r5, #0]
 8009d6a:	f7f7 f8aa 	bl	8000ec2 <_fstat>
 8009d6e:	1c43      	adds	r3, r0, #1
 8009d70:	d102      	bne.n	8009d78 <_fstat_r+0x1c>
 8009d72:	682b      	ldr	r3, [r5, #0]
 8009d74:	b103      	cbz	r3, 8009d78 <_fstat_r+0x1c>
 8009d76:	6023      	str	r3, [r4, #0]
 8009d78:	bd38      	pop	{r3, r4, r5, pc}
 8009d7a:	bf00      	nop
 8009d7c:	24000254 	.word	0x24000254

08009d80 <_isatty_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d06      	ldr	r5, [pc, #24]	; (8009d9c <_isatty_r+0x1c>)
 8009d84:	2300      	movs	r3, #0
 8009d86:	4604      	mov	r4, r0
 8009d88:	4608      	mov	r0, r1
 8009d8a:	602b      	str	r3, [r5, #0]
 8009d8c:	f7f7 f8a9 	bl	8000ee2 <_isatty>
 8009d90:	1c43      	adds	r3, r0, #1
 8009d92:	d102      	bne.n	8009d9a <_isatty_r+0x1a>
 8009d94:	682b      	ldr	r3, [r5, #0]
 8009d96:	b103      	cbz	r3, 8009d9a <_isatty_r+0x1a>
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	24000254 	.word	0x24000254

08009da0 <_lseek_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	4d07      	ldr	r5, [pc, #28]	; (8009dc0 <_lseek_r+0x20>)
 8009da4:	4604      	mov	r4, r0
 8009da6:	4608      	mov	r0, r1
 8009da8:	4611      	mov	r1, r2
 8009daa:	2200      	movs	r2, #0
 8009dac:	602a      	str	r2, [r5, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	f7f7 f8a2 	bl	8000ef8 <_lseek>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d102      	bne.n	8009dbe <_lseek_r+0x1e>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	b103      	cbz	r3, 8009dbe <_lseek_r+0x1e>
 8009dbc:	6023      	str	r3, [r4, #0]
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	24000254 	.word	0x24000254

08009dc4 <__malloc_lock>:
 8009dc4:	4801      	ldr	r0, [pc, #4]	; (8009dcc <__malloc_lock+0x8>)
 8009dc6:	f7ff be0b 	b.w	80099e0 <__retarget_lock_acquire_recursive>
 8009dca:	bf00      	nop
 8009dcc:	24000248 	.word	0x24000248

08009dd0 <__malloc_unlock>:
 8009dd0:	4801      	ldr	r0, [pc, #4]	; (8009dd8 <__malloc_unlock+0x8>)
 8009dd2:	f7ff be06 	b.w	80099e2 <__retarget_lock_release_recursive>
 8009dd6:	bf00      	nop
 8009dd8:	24000248 	.word	0x24000248

08009ddc <_read_r>:
 8009ddc:	b538      	push	{r3, r4, r5, lr}
 8009dde:	4d07      	ldr	r5, [pc, #28]	; (8009dfc <_read_r+0x20>)
 8009de0:	4604      	mov	r4, r0
 8009de2:	4608      	mov	r0, r1
 8009de4:	4611      	mov	r1, r2
 8009de6:	2200      	movs	r2, #0
 8009de8:	602a      	str	r2, [r5, #0]
 8009dea:	461a      	mov	r2, r3
 8009dec:	f7f7 f824 	bl	8000e38 <_read>
 8009df0:	1c43      	adds	r3, r0, #1
 8009df2:	d102      	bne.n	8009dfa <_read_r+0x1e>
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	b103      	cbz	r3, 8009dfa <_read_r+0x1e>
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	bd38      	pop	{r3, r4, r5, pc}
 8009dfc:	24000254 	.word	0x24000254

08009e00 <_init>:
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e02:	bf00      	nop
 8009e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e06:	bc08      	pop	{r3}
 8009e08:	469e      	mov	lr, r3
 8009e0a:	4770      	bx	lr

08009e0c <_fini>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	bf00      	nop
 8009e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e12:	bc08      	pop	{r3}
 8009e14:	469e      	mov	lr, r3
 8009e16:	4770      	bx	lr

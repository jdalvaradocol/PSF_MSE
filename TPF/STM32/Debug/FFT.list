
FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce0  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a03c  0800a03c  0001a03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a044  0800a044  0001a044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a048  0800a048  0001a048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  24000000  0800a04c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000144  240001ec  0800a238  000201ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000330  0800a238  00020330  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   000164f5  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c2f  00000000  00000000  0003670f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000eb8  00000000  00000000  00039340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d80  00000000  00000000  0003a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000332d3  00000000  00000000  0003af78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000156e9  00000000  00000000  0006e24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014ac4f  00000000  00000000  00083934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ce583  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004250  00000000  00000000  001ce5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	240001ec 	.word	0x240001ec
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08009f74 	.word	0x08009f74

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	240001f0 	.word	0x240001f0
 80002e8:	08009f74 	.word	0x08009f74

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_ADC2_Init+0x74>)
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <MX_ADC2_Init+0x78>)
 80005f8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_ADC2_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_ADC2_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_ADC2_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_ADC2_Init+0x74>)
 800060e:	2204      	movs	r2, #4
 8000610:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_ADC2_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_ADC2_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_ADC2_Init+0x74>)
 8000620:	2201      	movs	r2, #1
 8000622:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_ADC2_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_ADC2_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_ADC2_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_ADC2_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_ADC2_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_ADC2_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_ADC2_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_ADC2_Init+0x74>)
 8000652:	f002 ff33 	bl	80034bc <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800065c:	f000 fc76 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	24000208 	.word	0x24000208
 8000668:	40022100 	.word	0x40022100

0800066c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b0b4      	sub	sp, #208	; 0xd0
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	22c0      	movs	r2, #192	; 0xc0
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f008 ff73 	bl	8009568 <memset>
  if(adcHandle->Instance==ADC2)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a27      	ldr	r2, [pc, #156]	; (8000724 <HAL_ADC_MspInit+0xb8>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d146      	bne.n	800071a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800068c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000690:	f04f 0300 	mov.w	r3, #0
 8000694:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80006ac:	23c0      	movs	r3, #192	; 0xc0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 f8b4 	bl	8005830 <HAL_RCCEx_PeriphCLKConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80006ce:	f000 fc3d 	bl	8000f4c <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006d4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80006d8:	4a13      	ldr	r2, [pc, #76]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80006e8:	f003 0320 	and.w	r3, r3, #32
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006f6:	4a0c      	ldr	r2, [pc, #48]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 8000702:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC2_C     ------> ADC2_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800070e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000712:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000716:	f002 fd79 	bl	800320c <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800071a:	bf00      	nop
 800071c:	37d0      	adds	r7, #208	; 0xd0
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40022100 	.word	0x40022100
 8000728:	58024400 	.word	0x58024400

0800072c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2224      	movs	r2, #36	; 0x24
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f008 ff15 	bl	8009568 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_DAC1_Init+0x5c>)
 8000740:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_DAC1_Init+0x60>)
 8000742:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000744:	4810      	ldr	r0, [pc, #64]	; (8000788 <MX_DAC1_Init+0x5c>)
 8000746:	f003 fd30 	bl	80041aa <HAL_DAC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000750:	f000 fbfc 	bl	8000f4c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <MX_DAC1_Init+0x5c>)
 8000770:	f003 fd3e 	bl	80041f0 <HAL_DAC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 fbe7 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2400026c 	.word	0x2400026c
 800078c:	40007400 	.word	0x40007400

08000790 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a18      	ldr	r2, [pc, #96]	; (8000810 <HAL_DAC_MspInit+0x80>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d129      	bne.n	8000806 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80007b8:	4a16      	ldr	r2, [pc, #88]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007be:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80007c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 80007ee:	2310      	movs	r3, #16
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f2:	2303      	movs	r3, #3
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <HAL_DAC_MspInit+0x88>)
 8000802:	f003 fe33 	bl	800446c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40007400 	.word	0x40007400
 8000814:	58024400 	.word	0x58024400
 8000818:	58020000 	.word	0x58020000

0800081c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b80      	ldr	r3, [pc, #512]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000834:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000838:	4a7e      	ldr	r2, [pc, #504]	; (8000a34 <MX_GPIO_Init+0x218>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000842:	4b7c      	ldr	r3, [pc, #496]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000844:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	623b      	str	r3, [r7, #32]
 800084e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000850:	4b78      	ldr	r3, [pc, #480]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000852:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000856:	4a77      	ldr	r2, [pc, #476]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000858:	f043 0320 	orr.w	r3, r3, #32
 800085c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000860:	4b74      	ldr	r3, [pc, #464]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000862:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	4b71      	ldr	r3, [pc, #452]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000870:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000874:	4a6f      	ldr	r2, [pc, #444]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800087e:	4b6d      	ldr	r3, [pc, #436]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000880:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b69      	ldr	r3, [pc, #420]	; (8000a34 <MX_GPIO_Init+0x218>)
 800088e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000892:	4a68      	ldr	r2, [pc, #416]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800089c:	4b65      	ldr	r3, [pc, #404]	; (8000a34 <MX_GPIO_Init+0x218>)
 800089e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b62      	ldr	r3, [pc, #392]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b0:	4a60      	ldr	r2, [pc, #384]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008b2:	f043 0302 	orr.w	r3, r3, #2
 80008b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ba:	4b5e      	ldr	r3, [pc, #376]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c8:	4b5a      	ldr	r3, [pc, #360]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ce:	4a59      	ldr	r2, [pc, #356]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008d8:	4b56      	ldr	r3, [pc, #344]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e6:	4b53      	ldr	r3, [pc, #332]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ec:	4a51      	ldr	r2, [pc, #324]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008f6:	4b4f      	ldr	r3, [pc, #316]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000904:	4b4b      	ldr	r3, [pc, #300]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000906:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090a:	4a4a      	ldr	r2, [pc, #296]	; (8000a34 <MX_GPIO_Init+0x218>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000914:	4b47      	ldr	r3, [pc, #284]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000916:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	4843      	ldr	r0, [pc, #268]	; (8000a38 <MX_GPIO_Init+0x21c>)
 800092a:	f003 ff4f 	bl	80047cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f244 0101 	movw	r1, #16385	; 0x4001
 8000934:	4841      	ldr	r0, [pc, #260]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000936:	f003 ff49 	bl	80047cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2102      	movs	r1, #2
 800093e:	4840      	ldr	r0, [pc, #256]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000940:	f003 ff44 	bl	80047cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	483a      	ldr	r0, [pc, #232]	; (8000a44 <MX_GPIO_Init+0x228>)
 800095a:	f003 fd87 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4830      	ldr	r0, [pc, #192]	; (8000a38 <MX_GPIO_Init+0x21c>)
 8000978:	f003 fd78 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800097c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	4829      	ldr	r0, [pc, #164]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000996:	f003 fd69 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ac:	4619      	mov	r1, r3
 80009ae:	4826      	ldr	r0, [pc, #152]	; (8000a48 <MX_GPIO_Init+0x22c>)
 80009b0:	f003 fd5c 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	4619      	mov	r1, r3
 80009c8:	4820      	ldr	r0, [pc, #128]	; (8000a4c <MX_GPIO_Init+0x230>)
 80009ca:	f003 fd4f 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009e0:	230a      	movs	r3, #10
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	4818      	ldr	r0, [pc, #96]	; (8000a4c <MX_GPIO_Init+0x230>)
 80009ec:	f003 fd3e 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	4810      	ldr	r0, [pc, #64]	; (8000a4c <MX_GPIO_Init+0x230>)
 8000a0a:	f003 fd2f 	bl	800446c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000a26:	f003 fd21 	bl	800446c <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3738      	adds	r7, #56	; 0x38
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	58024400 	.word	0x58024400
 8000a38:	58021400 	.word	0x58021400
 8000a3c:	58020400 	.word	0x58020400
 8000a40:	58021000 	.word	0x58021000
 8000a44:	58020800 	.word	0x58020800
 8000a48:	58021800 	.word	0x58021800
 8000a4c:	58020000 	.word	0x58020000

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a54:	b099      	sub	sp, #100	; 0x64
 8000a56:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  uint16_t 	adc_value = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  uint16_t 	sample = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
  int16_t 	adc[header.N];
 8000a64:	4bc0      	ldr	r3, [pc, #768]	; (8000d68 <main+0x318>)
 8000a66:	899e      	ldrh	r6, [r3, #12]
 8000a68:	4633      	mov	r3, r6
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	657b      	str	r3, [r7, #84]	; 0x54
 8000a6e:	b2b3      	uxth	r3, r6
 8000a70:	2200      	movs	r2, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	4611      	mov	r1, r2
 8000a76:	f04f 0200 	mov.w	r2, #0
 8000a7a:	f04f 0300 	mov.w	r3, #0
 8000a7e:	010b      	lsls	r3, r1, #4
 8000a80:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000a84:	0102      	lsls	r2, r0, #4
 8000a86:	b2b3      	uxth	r3, r6
 8000a88:	2200      	movs	r2, #0
 8000a8a:	461c      	mov	r4, r3
 8000a8c:	4615      	mov	r5, r2
 8000a8e:	f04f 0200 	mov.w	r2, #0
 8000a92:	f04f 0300 	mov.w	r3, #0
 8000a96:	012b      	lsls	r3, r5, #4
 8000a98:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000a9c:	0122      	lsls	r2, r4, #4
 8000a9e:	4633      	mov	r3, r6
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	3307      	adds	r3, #7
 8000aa4:	08db      	lsrs	r3, r3, #3
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	ebad 0d03 	sub.w	sp, sp, r3
 8000aac:	ab02      	add	r3, sp, #8
 8000aae:	3301      	adds	r3, #1
 8000ab0:	085b      	lsrs	r3, r3, #1
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	643b      	str	r3, [r7, #64]	; 0x40
  int16_t 	adcm[header.N];
 8000ab6:	4bac      	ldr	r3, [pc, #688]	; (8000d68 <main+0x318>)
 8000ab8:	8999      	ldrh	r1, [r3, #12]
 8000aba:	460b      	mov	r3, r1
 8000abc:	3b01      	subs	r3, #1
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ac0:	b28b      	uxth	r3, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4698      	mov	r8, r3
 8000ac6:	4691      	mov	r9, r2
 8000ac8:	f04f 0200 	mov.w	r2, #0
 8000acc:	f04f 0300 	mov.w	r3, #0
 8000ad0:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000ad4:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000ad8:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000adc:	b28b      	uxth	r3, r1
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
 8000ae2:	61fa      	str	r2, [r7, #28]
 8000ae4:	f04f 0200 	mov.w	r2, #0
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000af0:	4628      	mov	r0, r5
 8000af2:	0103      	lsls	r3, r0, #4
 8000af4:	4620      	mov	r0, r4
 8000af6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000afa:	4620      	mov	r0, r4
 8000afc:	0102      	lsls	r2, r0, #4
 8000afe:	460b      	mov	r3, r1
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	3307      	adds	r3, #7
 8000b04:	08db      	lsrs	r3, r3, #3
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	ebad 0d03 	sub.w	sp, sp, r3
 8000b0c:	ab02      	add	r3, sp, #8
 8000b0e:	3301      	adds	r3, #1
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	63bb      	str	r3, [r7, #56]	; 0x38
  int16_t 	y[h_LENGTH+header.N-1 ];
 8000b16:	4b94      	ldr	r3, [pc, #592]	; (8000d68 <main+0x318>)
 8000b18:	899b      	ldrh	r3, [r3, #12]
 8000b1a:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 8000b1e:	1e4b      	subs	r3, r1, #1
 8000b20:	637b      	str	r3, [r7, #52]	; 0x34
 8000b22:	460a      	mov	r2, r1
 8000b24:	2300      	movs	r3, #0
 8000b26:	613a      	str	r2, [r7, #16]
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	f04f 0200 	mov.w	r2, #0
 8000b2e:	f04f 0300 	mov.w	r3, #0
 8000b32:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000b36:	4628      	mov	r0, r5
 8000b38:	0103      	lsls	r3, r0, #4
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000b40:	4620      	mov	r0, r4
 8000b42:	0102      	lsls	r2, r0, #4
 8000b44:	460a      	mov	r2, r1
 8000b46:	2300      	movs	r3, #0
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	f04f 0200 	mov.w	r2, #0
 8000b50:	f04f 0300 	mov.w	r3, #0
 8000b54:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000b58:	4628      	mov	r0, r5
 8000b5a:	0103      	lsls	r3, r0, #4
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000b62:	4620      	mov	r0, r4
 8000b64:	0102      	lsls	r2, r0, #4
 8000b66:	460b      	mov	r3, r1
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	3307      	adds	r3, #7
 8000b6c:	08db      	lsrs	r3, r3, #3
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	ebad 0d03 	sub.w	sp, sp, r3
 8000b74:	ab02      	add	r3, sp, #8
 8000b76:	3301      	adds	r3, #1
 8000b78:	085b      	lsrs	r3, r3, #1
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
  int16_t 	ym[h_LENGTH+header.N-1 ];
 8000b7e:	4b7a      	ldr	r3, [pc, #488]	; (8000d68 <main+0x318>)
 8000b80:	899b      	ldrh	r3, [r3, #12]
 8000b82:	f103 018c 	add.w	r1, r3, #140	; 0x8c
 8000b86:	1e4b      	subs	r3, r1, #1
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b8a:	460a      	mov	r2, r1
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603a      	str	r2, [r7, #0]
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	f04f 0200 	mov.w	r2, #0
 8000b96:	f04f 0300 	mov.w	r3, #0
 8000b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000b9e:	4628      	mov	r0, r5
 8000ba0:	0103      	lsls	r3, r0, #4
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000ba8:	4620      	mov	r0, r4
 8000baa:	0102      	lsls	r2, r0, #4
 8000bac:	460a      	mov	r2, r1
 8000bae:	2300      	movs	r3, #0
 8000bb0:	4692      	mov	sl, r2
 8000bb2:	469b      	mov	fp, r3
 8000bb4:	f04f 0200 	mov.w	r2, #0
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000bc0:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000bc4:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000bc8:	460b      	mov	r3, r1
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	3307      	adds	r3, #7
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	ebad 0d03 	sub.w	sp, sp, r3
 8000bd6:	ab02      	add	r3, sp, #8
 8000bd8:	3301      	adds	r3, #1
 8000bda:	085b      	lsrs	r3, r3, #1
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be0:	f002 fa5e 	bl	80030a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be4:	f000 f914 	bl	8000e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be8:	f7ff fe18 	bl	800081c <MX_GPIO_Init>
  MX_USB_OTG_HS_USB_Init();
 8000bec:	f000 fbca 	bl	8001384 <MX_USB_OTG_HS_USB_Init>
  MX_ADC2_Init();
 8000bf0:	f7ff fcfe 	bl	80005f0 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000bf4:	f000 fb10 	bl	8001218 <MX_USART3_UART_Init>
  MX_DAC1_Init();
 8000bf8:	f7ff fd98 	bl	800072c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  CyclesCounterInit(CLOCK); // Enable the cycle counter
 8000bfc:	485b      	ldr	r0, [pc, #364]	; (8000d6c <main+0x31c>)
 8000bfe:	f000 f991 	bl	8000f24 <CyclesCounterInit>

  printf("Inicio ADC DAC \r\n");
 8000c02:	485b      	ldr	r0, [pc, #364]	; (8000d70 <main+0x320>)
 8000c04:	f008 fd26 	bl	8009654 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	CyclesCounterReset();
 8000c08:	4b5a      	ldr	r3, [pc, #360]	; (8000d74 <main+0x324>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]

	HAL_ADC_Start(&hadc2);
 8000c0e:	485a      	ldr	r0, [pc, #360]	; (8000d78 <main+0x328>)
 8000c10:	f002 fdae 	bl	8003770 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 8000c14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c18:	4857      	ldr	r0, [pc, #348]	; (8000d78 <main+0x328>)
 8000c1a:	f002 fe97 	bl	800394c <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc2);
 8000c1e:	4856      	ldr	r0, [pc, #344]	; (8000d78 <main+0x328>)
 8000c20:	f002 ff6c 	bl	8003afc <HAL_ADC_GetValue>
 8000c24:	4603      	mov	r3, r0
 8000c26:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	HAL_ADC_Stop(&hadc2);
 8000c2a:	4853      	ldr	r0, [pc, #332]	; (8000d78 <main+0x328>)
 8000c2c:	f002 fe5a 	bl	80038e4 <HAL_ADC_Stop>

	adc[sample] = ((((int16_t )adc_value - 32767 )>>(10 - BITS))<<(10 - BITS))*10;
 8000c30:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b51      	ldr	r3, [pc, #324]	; (8000d7c <main+0x32c>)
 8000c38:	4413      	add	r3, r2
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	0092      	lsls	r2, r2, #2
 8000c40:	4413      	add	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8000c4a:	b219      	sxth	r1, r3
 8000c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c4e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	// dacWrite(DAC, y[sample]); // will be 128 samples delayed from input.

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2101      	movs	r1, #1
 8000c56:	484a      	ldr	r0, [pc, #296]	; (8000d80 <main+0x330>)
 8000c58:	f003 fdb8 	bl	80047cc <HAL_GPIO_WritePin>

	if (++sample==header.N )
 8000c5c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000c60:	3301      	adds	r3, #1
 8000c62:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8000c66:	4b40      	ldr	r3, [pc, #256]	; (8000d68 <main+0x318>)
 8000c68:	899b      	ldrh	r3, [r3, #12]
 8000c6a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	f040 80b5 	bne.w	8000dde <main+0x38e>
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2101      	movs	r1, #1
 8000c78:	4841      	ldr	r0, [pc, #260]	; (8000d80 <main+0x330>)
 8000c7a:	f003 fda7 	bl	80047cc <HAL_GPIO_WritePin>
		sample = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

		// Moving average

		int k = 20 ; // Tamaño de la ventana
 8000c84:	2314      	movs	r3, #20
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24

		for (int i=0;i < k; i++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8000c8c:	e010      	b.n	8000cb0 <main+0x260>
		{
			adcm[0] =  adcm[0] + adc[i];
 8000c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000c9a:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	4413      	add	r3, r2
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ca8:	801a      	strh	r2, [r3, #0]
		for (int i=0;i < k; i++)
 8000caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cac:	3301      	adds	r3, #1
 8000cae:	647b      	str	r3, [r7, #68]	; 0x44
 8000cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbea      	blt.n	8000c8e <main+0x23e>
		}

		adcm[0] = (int16_t )(adcm[0] / (k));
 8000cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cca:	801a      	strh	r2, [r3, #0]

		for (int i=1; i<(header.N-1) ; i++)
 8000ccc:	2301      	movs	r3, #1
 8000cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cd0:	e020      	b.n	8000d14 <main+0x2c4>
		{
			adcm[i] = (int16_t )(adcm[i - 1] + ((adc[i + k] - adc[ i - 1 ])/ (k)));
 8000cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd4:	1e5a      	subs	r2, r3, #1
 8000cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cd8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	4419      	add	r1, r3
 8000ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ce6:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8000cea:	4618      	mov	r0, r3
 8000cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cee:	1e59      	subs	r1, r3, #1
 8000cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cf2:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8000cf6:	1ac1      	subs	r1, r0, r3
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	fb91 f3f3 	sdiv	r3, r1, r3
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	4413      	add	r3, r2
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b219      	sxth	r1, r3
 8000d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d0a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (int i=1; i<(header.N-1) ; i++)
 8000d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d10:	3301      	adds	r3, #1
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <main+0x318>)
 8000d16:	899b      	ldrh	r3, [r3, #12]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	dbd8      	blt.n	8000cd2 <main+0x282>
		}

		arm_conv_q15(adcm, header.N, h, h_LENGTH, y);
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <main+0x318>)
 8000d22:	899b      	ldrh	r3, [r3, #12]
 8000d24:	4619      	mov	r1, r3
 8000d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	238d      	movs	r3, #141	; 0x8d
 8000d2c:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <main+0x334>)
 8000d2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d30:	f000 fb59 	bl	80013e6 <arm_conv_q15>
		header.id++;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <main+0x318>)
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <main+0x318>)
 8000d3c:	6093      	str	r3, [r2, #8]

		HAL_UART_Transmit(&huart3,(uint8_t*)&header, sizeof(struct header_struct), 0xFFFF);
 8000d3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d42:	2216      	movs	r2, #22
 8000d44:	4908      	ldr	r1, [pc, #32]	; (8000d68 <main+0x318>)
 8000d46:	4810      	ldr	r0, [pc, #64]	; (8000d88 <main+0x338>)
 8000d48:	f007 f9cc 	bl	80080e4 <HAL_UART_Transmit>

	 for (int i=0;i<(header.N+h_LENGTH-1); i++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d50:	e03f      	b.n	8000dd2 <main+0x382>
	 {
		 HAL_UART_Transmit(&huart3,(uint8_t*)(i<header.N ? &adc[i] : &zero), sizeof(adc[0]), 0xFFFF);
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <main+0x318>)
 8000d54:	899b      	ldrh	r3, [r3, #12]
 8000d56:	461a      	mov	r2, r3
 8000d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	da16      	bge.n	8000d8c <main+0x33c>
 8000d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d64:	18d1      	adds	r1, r2, r3
 8000d66:	e012      	b.n	8000d8e <main+0x33e>
 8000d68:	24000160 	.word	0x24000160
 8000d6c:	10b07600 	.word	0x10b07600
 8000d70:	08009f8c 	.word	0x08009f8c
 8000d74:	e0001000 	.word	0xe0001000
 8000d78:	24000208 	.word	0x24000208
 8000d7c:	ffff8001 	.word	0xffff8001
 8000d80:	58020400 	.word	0x58020400
 8000d84:	24000000 	.word	0x24000000
 8000d88:	24000288 	.word	0x24000288
 8000d8c:	491a      	ldr	r1, [pc, #104]	; (8000df8 <main+0x3a8>)
 8000d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d92:	2202      	movs	r2, #2
 8000d94:	4819      	ldr	r0, [pc, #100]	; (8000dfc <main+0x3ac>)
 8000d96:	f007 f9a5 	bl	80080e4 <HAL_UART_Transmit>
		 HAL_UART_Transmit(&huart3,(uint8_t*)(i<h_LENGTH ? &  h[i] : &zero), sizeof(  h[0]), 0xFFFF);
 8000d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d9c:	2b8c      	cmp	r3, #140	; 0x8c
 8000d9e:	dc04      	bgt.n	8000daa <main+0x35a>
 8000da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <main+0x3b0>)
 8000da6:	1899      	adds	r1, r3, r2
 8000da8:	e000      	b.n	8000dac <main+0x35c>
 8000daa:	4913      	ldr	r1, [pc, #76]	; (8000df8 <main+0x3a8>)
 8000dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000db0:	2202      	movs	r2, #2
 8000db2:	4812      	ldr	r0, [pc, #72]	; (8000dfc <main+0x3ac>)
 8000db4:	f007 f996 	bl	80080e4 <HAL_UART_Transmit>
		 HAL_UART_Transmit(&huart3,(uint8_t*)(&y[i])                       , sizeof(  y[0]), 0xFFFF);
 8000db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dbe:	18d1      	adds	r1, r2, r3
 8000dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	480d      	ldr	r0, [pc, #52]	; (8000dfc <main+0x3ac>)
 8000dc8:	f007 f98c 	bl	80080e4 <HAL_UART_Transmit>
	 for (int i=0;i<(header.N+h_LENGTH-1); i++)
 8000dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dce:	3301      	adds	r3, #1
 8000dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <main+0x3b4>)
 8000dd4:	899b      	ldrh	r3, [r3, #12]
 8000dd6:	338b      	adds	r3, #139	; 0x8b
 8000dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	ddb9      	ble.n	8000d52 <main+0x302>
	 }
	 //adcRead(CH1);
	}

    while(CyclesCounterRead() < (CLOCK / header.fs))
 8000dde:	bf00      	nop
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <main+0x3b8>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <main+0x3b4>)
 8000de6:	89d2      	ldrh	r2, [r2, #14]
 8000de8:	4611      	mov	r1, r2
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <main+0x3bc>)
 8000dec:	fb92 f2f1 	sdiv	r2, r2, r1
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d3f5      	bcc.n	8000de0 <main+0x390>
	CyclesCounterReset();
 8000df4:	e708      	b.n	8000c08 <main+0x1b8>
 8000df6:	bf00      	nop
 8000df8:	24000280 	.word	0x24000280
 8000dfc:	24000288 	.word	0x24000288
 8000e00:	24000000 	.word	0x24000000
 8000e04:	24000160 	.word	0x24000160
 8000e08:	e0001000 	.word	0xe0001000
 8000e0c:	10b07600 	.word	0x10b07600

08000e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b09c      	sub	sp, #112	; 0x70
 8000e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	224c      	movs	r2, #76	; 0x4c
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f008 fba2 	bl	8009568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2220      	movs	r2, #32
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f008 fb9c 	bl	8009568 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000e30:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <SystemClock_Config+0xe8>)
 8000e32:	f04f 32ff 	mov.w	r2, #4294967295
 8000e36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e3a:	2004      	movs	r0, #4
 8000e3c:	f003 fce0 	bl	8004800 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e40:	2300      	movs	r3, #0
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <SystemClock_Config+0xec>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a2c      	ldr	r2, [pc, #176]	; (8000efc <SystemClock_Config+0xec>)
 8000e4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <SystemClock_Config+0xec>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e5c:	bf00      	nop
 8000e5e:	4b27      	ldr	r3, [pc, #156]	; (8000efc <SystemClock_Config+0xec>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e6a:	d1f8      	bne.n	8000e5e <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000e6c:	2329      	movs	r3, #41	; 0x29
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e76:	2301      	movs	r3, #1
 8000e78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e82:	2302      	movs	r3, #2
 8000e84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000e8a:	2346      	movs	r3, #70	; 0x46
 8000e8c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000e92:	2314      	movs	r3, #20
 8000e94:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 fd02 	bl	80048b4 <HAL_RCC_OscConfig>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000eb6:	f000 f849 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eba:	233f      	movs	r3, #63	; 0x3f
 8000ebc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000eca:	2340      	movs	r3, #64	; 0x40
 8000ecc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ece:	2340      	movs	r3, #64	; 0x40
 8000ed0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ed8:	2340      	movs	r3, #64	; 0x40
 8000eda:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2107      	movs	r1, #7
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f004 f919 	bl	8005118 <HAL_RCC_ClockConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000eec:	f000 f82e 	bl	8000f4c <Error_Handler>
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	3770      	adds	r7, #112	; 0x70
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	58024400 	.word	0x58024400
 8000efc:	58024800 	.word	0x58024800

08000f00 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000f08:	1d39      	adds	r1, r7, #4
 8000f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4803      	ldr	r0, [pc, #12]	; (8000f20 <__io_putchar+0x20>)
 8000f12:	f007 f8e7 	bl	80080e4 <HAL_UART_Transmit>

  return ch;
 8000f16:	687b      	ldr	r3, [r7, #4]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	24000288 	.word	0x24000288

08000f24 <CyclesCounterInit>:

int CyclesCounterInit( uint32_t clockSpeed )
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
   DWT->CTRL  |= 1; // *DWT_CTRL  |= 1;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <CyclesCounterInit+0x24>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <CyclesCounterInit+0x24>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6013      	str	r3, [r2, #0]
   return 1;
 8000f38:	2301      	movs	r3, #1
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e0001000 	.word	0xe0001000

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <Error_Handler+0x8>
	...

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_MspInit+0x30>)
 8000f60:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f64:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <HAL_MspInit+0x30>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_MspInit+0x30>)
 8000f70:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	58024400 	.word	0x58024400

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd8:	f002 f8d4 	bl	8003184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e00a      	b.n	8001008 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ff2:	f3af 8000 	nop.w
 8000ff6:	4601      	mov	r1, r0
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	60ba      	str	r2, [r7, #8]
 8000ffe:	b2ca      	uxtb	r2, r1
 8001000:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	dbf0      	blt.n	8000ff2 <_read+0x12>
  }

  return len;
 8001010:	687b      	ldr	r3, [r7, #4]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	e009      	b.n	8001040 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	60ba      	str	r2, [r7, #8]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff63 	bl	8000f00 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf1      	blt.n	800102c <_write+0x12>
  }
  return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_close>:

int _close(int file)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800107a:	605a      	str	r2, [r3, #4]
  return 0;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_isatty>:

int _isatty(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f008 fa12 	bl	8009514 <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	24100000 	.word	0x24100000
 800111c:	00000400 	.word	0x00000400
 8001120:	24000284 	.word	0x24000284
 8001124:	24000330 	.word	0x24000330

08001128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800112c:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <SystemInit+0xd0>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001132:	4a31      	ldr	r2, [pc, #196]	; (80011f8 <SystemInit+0xd0>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800113c:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <SystemInit+0xd4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	2b02      	cmp	r3, #2
 8001146:	d807      	bhi.n	8001158 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001148:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <SystemInit+0xd4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f023 030f 	bic.w	r3, r3, #15
 8001150:	4a2a      	ldr	r2, [pc, #168]	; (80011fc <SystemInit+0xd4>)
 8001152:	f043 0303 	orr.w	r3, r3, #3
 8001156:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <SystemInit+0xd8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a28      	ldr	r2, [pc, #160]	; (8001200 <SystemInit+0xd8>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <SystemInit+0xd8>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <SystemInit+0xd8>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4924      	ldr	r1, [pc, #144]	; (8001200 <SystemInit+0xd8>)
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <SystemInit+0xdc>)
 8001172:	4013      	ands	r3, r2
 8001174:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <SystemInit+0xd4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b00      	cmp	r3, #0
 8001180:	d007      	beq.n	8001192 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <SystemInit+0xd4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f023 030f 	bic.w	r3, r3, #15
 800118a:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <SystemInit+0xd4>)
 800118c:	f043 0303 	orr.w	r3, r3, #3
 8001190:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <SystemInit+0xd8>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <SystemInit+0xd8>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <SystemInit+0xd8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <SystemInit+0xd8>)
 80011a6:	4a18      	ldr	r2, [pc, #96]	; (8001208 <SystemInit+0xe0>)
 80011a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <SystemInit+0xd8>)
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <SystemInit+0xe4>)
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <SystemInit+0xd8>)
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <SystemInit+0xe8>)
 80011b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <SystemInit+0xd8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <SystemInit+0xd8>)
 80011be:	4a14      	ldr	r2, [pc, #80]	; (8001210 <SystemInit+0xe8>)
 80011c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <SystemInit+0xd8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <SystemInit+0xd8>)
 80011ca:	4a11      	ldr	r2, [pc, #68]	; (8001210 <SystemInit+0xe8>)
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <SystemInit+0xd8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <SystemInit+0xd8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a09      	ldr	r2, [pc, #36]	; (8001200 <SystemInit+0xd8>)
 80011da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <SystemInit+0xd8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <SystemInit+0xec>)
 80011e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00
 80011fc:	52002000 	.word	0x52002000
 8001200:	58024400 	.word	0x58024400
 8001204:	eaf6ed7f 	.word	0xeaf6ed7f
 8001208:	02020200 	.word	0x02020200
 800120c:	01ff0000 	.word	0x01ff0000
 8001210:	01010280 	.word	0x01010280
 8001214:	52004000 	.word	0x52004000

08001218 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 800121e:	4a23      	ldr	r2, [pc, #140]	; (80012ac <MX_USART3_UART_Init+0x94>)
 8001220:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 8001224:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001228:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001260:	4811      	ldr	r0, [pc, #68]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 8001262:	f006 feef 	bl	8008044 <HAL_UART_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800126c:	f7ff fe6e 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001270:	2100      	movs	r1, #0
 8001272:	480d      	ldr	r0, [pc, #52]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 8001274:	f008 f883 	bl	800937e <HAL_UARTEx_SetTxFifoThreshold>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800127e:	f7ff fe65 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001282:	2100      	movs	r1, #0
 8001284:	4808      	ldr	r0, [pc, #32]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 8001286:	f008 f8b8 	bl	80093fa <HAL_UARTEx_SetRxFifoThreshold>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001290:	f7ff fe5c 	bl	8000f4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_USART3_UART_Init+0x90>)
 8001296:	f008 f839 	bl	800930c <HAL_UARTEx_DisableFifoMode>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012a0:	f7ff fe54 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	24000288 	.word	0x24000288
 80012ac:	40004800 	.word	0x40004800

080012b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b0ba      	sub	sp, #232	; 0xe8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	22c0      	movs	r2, #192	; 0xc0
 80012ce:	2100      	movs	r1, #0
 80012d0:	4618      	mov	r0, r3
 80012d2:	f008 f949 	bl	8009568 <memset>
  if(uartHandle->Instance==USART3)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a27      	ldr	r2, [pc, #156]	; (8001378 <HAL_UART_MspInit+0xc8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d146      	bne.n	800136e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012e0:	f04f 0202 	mov.w	r2, #2
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f2:	f107 0310 	add.w	r3, r7, #16
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fa9a 	bl	8005830 <HAL_RCCEx_PeriphCLKConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001302:	f7ff fe23 	bl	8000f4c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001306:	4b1d      	ldr	r3, [pc, #116]	; (800137c <HAL_UART_MspInit+0xcc>)
 8001308:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800130c:	4a1b      	ldr	r2, [pc, #108]	; (800137c <HAL_UART_MspInit+0xcc>)
 800130e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001312:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <HAL_UART_MspInit+0xcc>)
 8001318:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800131c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001324:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_UART_MspInit+0xcc>)
 8001326:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800132a:	4a14      	ldr	r2, [pc, #80]	; (800137c <HAL_UART_MspInit+0xcc>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_UART_MspInit+0xcc>)
 8001336:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001342:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800135c:	2307      	movs	r3, #7
 800135e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001362:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <HAL_UART_MspInit+0xd0>)
 800136a:	f003 f87f 	bl	800446c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800136e:	bf00      	nop
 8001370:	37e8      	adds	r7, #232	; 0xe8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40004800 	.word	0x40004800
 800137c:	58024400 	.word	0x58024400
 8001380:	58020c00 	.word	0x58020c00

08001384 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001398:	f7ff fec6 	bl	8001128 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800139e:	490d      	ldr	r1, [pc, #52]	; (80013d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a0:	4a0d      	ldr	r2, [pc, #52]	; (80013d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b4:	4c0a      	ldr	r4, [pc, #40]	; (80013e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013c2:	f008 f8ad 	bl	8009520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013c6:	f7ff fb43 	bl	8000a50 <main>
  bx  lr
 80013ca:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80013cc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80013d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013d4:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 80013d8:	0800a04c 	.word	0x0800a04c
  ldr r2, =_sbss
 80013dc:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 80013e0:	24000330 	.word	0x24000330

080013e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e4:	e7fe      	b.n	80013e4 <ADC_IRQHandler>

080013e6 <arm_conv_q15>:
  q15_t * pSrcA,
  uint32_t srcALen,
  q15_t * pSrcB,
  uint32_t srcBLen,
  q15_t * pDst)
{
 80013e6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80013ea:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	f507 6484 	add.w	r4, r7, #1056	; 0x420
 80013f4:	f5a4 7473 	sub.w	r4, r4, #972	; 0x3cc
 80013f8:	6020      	str	r0, [r4, #0]
 80013fa:	f507 6084 	add.w	r0, r7, #1056	; 0x420
 80013fe:	f5a0 7074 	sub.w	r0, r0, #976	; 0x3d0
 8001402:	6001      	str	r1, [r0, #0]
 8001404:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8001408:	f5a1 7175 	sub.w	r1, r1, #980	; 0x3d4
 800140c:	600a      	str	r2, [r1, #0]
 800140e:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8001412:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8001416:	6013      	str	r3, [r2, #0]

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  q15_t *pIn1;                                   /* inputA pointer */
  q15_t *pIn2;                                   /* inputB pointer */
  q15_t *pOut = pDst;                            /* output pointer */
 8001418:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800141c:	f5a3 722f 	sub.w	r2, r3, #700	; 0x2bc
 8001420:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8001424:	6013      	str	r3, [r2, #0]
  uint32_t blockSize1, blockSize2, blockSize3, j, k, count, blkCnt;     /* loop counter */

  /* The algorithm implementation is based on the lengths of the inputs. */
  /* srcB is always made to slide across srcA. */
  /* So srcBLen is always considered as shorter or equal to srcALen */
  if (srcALen >= srcBLen)
 8001426:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800142a:	f5a3 7274 	sub.w	r2, r3, #976	; 0x3d0
 800142e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001432:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d30e      	bcc.n	800145c <arm_conv_q15+0x76>
  {
    /* Initialization of inputA pointer */
    pIn1 = pSrcA;
 800143e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001442:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c

    /* Initialization of inputB pointer */
    pIn2 = pSrcB;
 800144c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001450:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 800145a:	e025      	b.n	80014a8 <arm_conv_q15+0xc2>
  }
  else
  {
    /* Initialization of inputA pointer */
    pIn1 = pSrcB;
 800145c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001460:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c

    /* Initialization of inputB pointer */
    pIn2 = pSrcA;
 800146a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800146e:	f5a3 7373 	sub.w	r3, r3, #972	; 0x3cc
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

    /* srcBLen is always considered as shorter or equal to srcALen */
    j = srcBLen;
 8001478:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800147c:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
    srcBLen = srcALen;
 8001486:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800148a:	f5a3 7276 	sub.w	r2, r3, #984	; 0x3d8
 800148e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001492:	f5a3 7374 	sub.w	r3, r3, #976	; 0x3d0
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6013      	str	r3, [r2, #0]
    srcALen = j;
 800149a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800149e:	f5a3 7274 	sub.w	r2, r3, #976	; 0x3d0
 80014a2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80014a6:	6013      	str	r3, [r2, #0]
   * In the third stage of the algorithm, the multiplications decrease by one
   * for every iteration. */

  /* The algorithm is implemented in three stages.
     The loop counters of each stage is initiated here. */
  blockSize1 = srcBLen - 1U;
 80014a8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80014ac:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  blockSize2 = srcALen - (srcBLen - 1U);
 80014b8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80014bc:	f5a3 7274 	sub.w	r2, r3, #976	; 0x3d0
 80014c0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80014c4:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	3301      	adds	r3, #1
 80014d0:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
   * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]
   */

  /* In this stage the MAC operations are increased by 1 for every iteration.
     The count variable holds the number of MAC operations performed */
  count = 1U;
 80014d4:	2301      	movs	r3, #1
 80014d6:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0

  /* Working pointer of inputA */
  px = pIn1;
 80014da:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80014de:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 80014e2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80014e6:	6013      	str	r3, [r2, #0]

  /* Working pointer of inputB */
  py = pIn2;
 80014e8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80014ec:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 80014f0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80014f4:	6013      	str	r3, [r2, #0]
  /* For loop unrolling by 4, this stage is divided into two. */
  /* First part of this stage computes the MAC operations less than 4 */
  /* Second part of this stage computes the MAC operations greater than or equal to 4 */

  /* The first part of the stage starts here */
  while ((count < 4U) && (blockSize1 > 0U))
 80014f6:	e09f      	b.n	8001638 <arm_conv_q15+0x252>
  {
    /* Accumulator is made zero for every iteration */
    sum = 0;
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8001504:	e9c1 2300 	strd	r2, r3, [r1]

    /* Loop over number of MAC operations between
     * inputA samples and inputB samples */
    k = count;
 8001508:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800150c:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

    while (k > 0U)
 8001510:	e04e      	b.n	80015b0 <arm_conv_q15+0x1ca>
    {
      /* Perform the multiply-accumulates */
      sum = __SMLALD(*px++, *py--, sum);
 8001512:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001516:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	1c8a      	adds	r2, r1, #2
 800151e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001522:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	f9b1 3000 	ldrsh.w	r3, [r1]
 800152c:	4618      	mov	r0, r3
 800152e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001532:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001536:	6819      	ldr	r1, [r3, #0]
 8001538:	1e8a      	subs	r2, r1, #2
 800153a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800153e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	f9b1 3000 	ldrsh.w	r3, [r1]
 8001548:	4619      	mov	r1, r3
 800154a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f8c7 0364 	str.w	r0, [r7, #868]	; 0x364
 8001556:	f8c7 1360 	str.w	r1, [r7, #864]	; 0x360
 800155a:	e9c7 23d6 	strd	r2, r3, [r7, #856]	; 0x358
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;
 800155e:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8001562:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

#ifndef __ARMEB__   /* Little endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001566:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800156a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800156e:	6819      	ldr	r1, [r3, #0]
 8001570:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001574:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	f8d7 0364 	ldr.w	r0, [r7, #868]	; 0x364
 800157e:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001582:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8001586:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800158a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800158e:	6019      	str	r1, [r3, #0]
 8001590:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001594:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8001598:	605a      	str	r2, [r3, #4]
#else               /* Big endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[1]), "=r" (llr.w32[0]): "r" (op1), "r" (op2) , "0" (llr.w32[1]), "1" (llr.w32[0]) );
#endif

  return(llr.w64);
 800159a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800159e:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80015a2:	e9c1 2300 	strd	r2, r3, [r1]

      /* Decrement the loop counter */
      k--;
 80015a6:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80015aa:	3b01      	subs	r3, #1
 80015ac:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    while (k > 0U)
 80015b0:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1ac      	bne.n	8001512 <arm_conv_q15+0x12c>
    }

    /* Store the result in the accumulator in the destination buffer. */
    *pOut++ = (q15_t) (__SSAT((sum >> 15), 16));
 80015b8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f04f 0000 	mov.w	r0, #0
 80015c4:	f04f 0100 	mov.w	r1, #0
 80015c8:	0bd0      	lsrs	r0, r2, #15
 80015ca:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80015ce:	13d9      	asrs	r1, r3, #15
 80015d0:	4603      	mov	r3, r0
 80015d2:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 80015d6:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 80015da:	f303 030f 	ssat	r3, #16, r3
 80015de:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 80015e2:	f8d7 03c0 	ldr.w	r0, [r7, #960]	; 0x3c0
 80015e6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80015ea:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80015ee:	6819      	ldr	r1, [r3, #0]
 80015f0:	1c8a      	adds	r2, r1, #2
 80015f2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80015f6:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	b203      	sxth	r3, r0
 80015fe:	800b      	strh	r3, [r1, #0]

    /* Update the inputA and inputB pointers for next MAC calculation */
    py = pIn2 + count;
 8001600:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001604:	005a      	lsls	r2, r3, #1
 8001606:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800160a:	441a      	add	r2, r3
 800160c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001610:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001614:	601a      	str	r2, [r3, #0]
    px = pIn1;
 8001616:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800161a:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 800161e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001622:	6013      	str	r3, [r2, #0]

    /* Increment the MAC count */
    count++;
 8001624:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001628:	3301      	adds	r3, #1
 800162a:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0

    /* Decrement the loop counter */
    blockSize1--;
 800162e:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8001632:	3b01      	subs	r3, #1
 8001634:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  while ((count < 4U) && (blockSize1 > 0U))
 8001638:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800163c:	2b03      	cmp	r3, #3
 800163e:	d804      	bhi.n	800164a <arm_conv_q15+0x264>
 8001640:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8001644:	2b00      	cmp	r3, #0
 8001646:	f47f af57 	bne.w	80014f8 <arm_conv_q15+0x112>

  /* The second part of the stage starts here */
  /* The internal loop, over count, is unrolled by 4 */
  /* To, read the last two inputB samples using SIMD:
   * y[srcBLen] and y[srcBLen-1] coefficients, py is decremented by 1 */
  py = py - 1;
 800164a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800164e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	1e9a      	subs	r2, r3, #2
 8001656:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800165a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800165e:	601a      	str	r2, [r3, #0]

  while (blockSize1 > 0U)
 8001660:	e137      	b.n	80018d2 <arm_conv_q15+0x4ec>
  {
    /* Accumulator is made zero for every iteration */
    sum = 0;
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800166e:	e9c1 2300 	strd	r2, r3, [r1]

    /* Apply loop unrolling and compute 4 MACs simultaneously. */
    k = count >> 2U;
 8001672:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

    /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
     ** a second loop below computes MACs for the remaining 1 to 3 samples. */
    while (k > 0U)
 800167c:	e07c      	b.n	8001778 <arm_conv_q15+0x392>
    {
      /* Perform the multiply-accumulates */
      /* x[0], x[1] are multiplied with y[srcBLen - 1], y[srcBLen - 2] respectively */
      sum = __SMLALDX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 800167e:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8001682:	680a      	ldr	r2, [r1, #0]
 8001684:	1d13      	adds	r3, r2, #4
 8001686:	600b      	str	r3, [r1, #0]
 8001688:	6813      	ldr	r3, [r2, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8001690:	680a      	ldr	r2, [r1, #0]
 8001692:	1f13      	subs	r3, r2, #4
 8001694:	600b      	str	r3, [r1, #0]
 8001696:	6813      	ldr	r3, [r2, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f8c7 0344 	str.w	r0, [r7, #836]	; 0x344
 80016a6:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 80016aa:	e9c7 23ce 	strd	r2, r3, [r7, #824]	; 0x338
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;
 80016ae:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 80016b2:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

#ifndef __ARMEB__   /* Little endian */
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80016b6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80016ba:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80016be:	6819      	ldr	r1, [r3, #0]
 80016c0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80016c4:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	f8d7 0344 	ldr.w	r0, [r7, #836]	; 0x344
 80016ce:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80016d2:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 80016d6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80016da:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80016de:	6019      	str	r1, [r3, #0]
 80016e0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80016e4:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 80016e8:	605a      	str	r2, [r3, #4]
#else               /* Big endian */
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[1]), "=r" (llr.w32[0]): "r" (op1), "r" (op2) , "0" (llr.w32[1]), "1" (llr.w32[0]) );
#endif

  return(llr.w64);
 80016ea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80016ee:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80016f2:	e9c1 2300 	strd	r2, r3, [r1]
      /* x[2], x[3] are multiplied with y[srcBLen - 3], y[srcBLen - 4] respectively */
      sum = __SMLALDX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 80016f6:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80016fa:	680a      	ldr	r2, [r1, #0]
 80016fc:	1d13      	adds	r3, r2, #4
 80016fe:	600b      	str	r3, [r1, #0]
 8001700:	6813      	ldr	r3, [r2, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8001708:	680a      	ldr	r2, [r1, #0]
 800170a:	1f13      	subs	r3, r2, #4
 800170c:	600b      	str	r3, [r1, #0]
 800170e:	6813      	ldr	r3, [r2, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f8c7 0354 	str.w	r0, [r7, #852]	; 0x354
 800171e:	f8c7 1350 	str.w	r1, [r7, #848]	; 0x350
 8001722:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
  llr.w64 = acc;
 8001726:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 800172a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800172e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001732:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8001736:	6819      	ldr	r1, [r3, #0]
 8001738:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800173c:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	f8d7 0354 	ldr.w	r0, [r7, #852]	; 0x354
 8001746:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800174a:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 800174e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001752:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8001756:	6019      	str	r1, [r3, #0]
 8001758:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800175c:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8001760:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001762:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001766:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800176a:	e9c1 2300 	strd	r2, r3, [r1]

      /* Decrement the loop counter */
      k--;
 800176e:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8001772:	3b01      	subs	r3, #1
 8001774:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    while (k > 0U)
 8001778:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800177c:	2b00      	cmp	r3, #0
 800177e:	f47f af7e 	bne.w	800167e <arm_conv_q15+0x298>
    }

    /* For the next MAC operations, the pointer py is used without SIMD
     * So, py is incremented by 1 */
    py = py + 1U;
 8001782:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001786:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	1c9a      	adds	r2, r3, #2
 800178e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001792:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001796:	601a      	str	r2, [r3, #0]

    /* If the count is not a multiple of 4, compute any remaining MACs here.
     ** No loop unrolling is used. */
    k = count % 0x4U;
 8001798:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

    while (k > 0U)
 80017a4:	e04e      	b.n	8001844 <arm_conv_q15+0x45e>
    {
      /* Perform the multiply-accumulates */
      sum = __SMLALD(*px++, *py--, sum);
 80017a6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80017aa:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80017ae:	6819      	ldr	r1, [r3, #0]
 80017b0:	1c8a      	adds	r2, r1, #2
 80017b2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80017b6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	f9b1 3000 	ldrsh.w	r3, [r1]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80017c6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80017ca:	6819      	ldr	r1, [r3, #0]
 80017cc:	1e8a      	subs	r2, r1, #2
 80017ce:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80017d2:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80017dc:	4619      	mov	r1, r3
 80017de:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80017e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e6:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
 80017ea:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 80017ee:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
  llr.w64 = acc;
 80017f2:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80017f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80017fa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80017fe:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8001802:	6819      	ldr	r1, [r3, #0]
 8001804:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001808:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	f8d7 0334 	ldr.w	r0, [r7, #820]	; 0x334
 8001812:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8001816:	fbc0 12c3 	smlald	r1, r2, r0, r3
 800181a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800181e:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 8001822:	6019      	str	r1, [r3, #0]
 8001824:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001828:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800182c:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 800182e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001832:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8001836:	e9c1 2300 	strd	r2, r3, [r1]

      /* Decrement the loop counter */
      k--;
 800183a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800183e:	3b01      	subs	r3, #1
 8001840:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    while (k > 0U)
 8001844:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ac      	bne.n	80017a6 <arm_conv_q15+0x3c0>
    }

    /* Store the result in the accumulator in the destination buffer. */
    *pOut++ = (q15_t) (__SSAT((sum >> 15), 16));
 800184c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f04f 0000 	mov.w	r0, #0
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	0bd0      	lsrs	r0, r2, #15
 800185e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8001862:	13d9      	asrs	r1, r3, #15
 8001864:	4603      	mov	r3, r0
 8001866:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800186a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800186e:	f303 030f 	ssat	r3, #16, r3
 8001872:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8001876:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 800187a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800187e:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8001882:	6819      	ldr	r1, [r3, #0]
 8001884:	1c8a      	adds	r2, r1, #2
 8001886:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800188a:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	b203      	sxth	r3, r0
 8001892:	800b      	strh	r3, [r1, #0]

    /* Update the inputA and inputB pointers for next MAC calculation */
    py = pIn2 + (count - 1U);
 8001894:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8001898:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800189c:	4413      	add	r3, r2
 800189e:	005a      	lsls	r2, r3, #1
 80018a0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80018a4:	441a      	add	r2, r3
 80018a6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018aa:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80018ae:	601a      	str	r2, [r3, #0]
    px = pIn1;
 80018b0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018b4:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 80018b8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80018bc:	6013      	str	r3, [r2, #0]

    /* Increment the MAC count */
    count++;
 80018be:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80018c2:	3301      	adds	r3, #1
 80018c4:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0

    /* Decrement the loop counter */
    blockSize1--;
 80018c8:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 80018cc:	3b01      	subs	r3, #1
 80018ce:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  while (blockSize1 > 0U)
 80018d2:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f47f aec3 	bne.w	8001662 <arm_conv_q15+0x27c>
   * ....
   * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y[0]
   */

  /* Working pointer of inputA */
  px = pIn1;
 80018dc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018e0:	f5a3 7230 	sub.w	r2, r3, #704	; 0x2c0
 80018e4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80018e8:	6013      	str	r3, [r2, #0]

  /* Working pointer of inputB */
  pSrc2 = pIn2 + (srcBLen - 1U);
 80018ea:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80018ee:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80018f8:	4413      	add	r3, r2
 80018fa:	005a      	lsls	r2, r3, #1
 80018fc:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001900:	4413      	add	r3, r2
 8001902:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
  py = pSrc2;
 8001906:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800190a:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 800190e:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8001912:	6013      	str	r3, [r2, #0]

  /* count is the index by which the pointer pIn1 to be incremented */
  count = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
   * -------------------*/

  /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
   * So, to loop unroll over blockSize2,
   * srcBLen should be greater than or equal to 4 */
  if (srcBLen >= 4U)
 800191a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800191e:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b03      	cmp	r3, #3
 8001926:	f241 80c3 	bls.w	8002ab0 <arm_conv_q15+0x16ca>
  {
    /* Loop unroll over blockSize2, by 4 */
    blkCnt = blockSize2 >> 2U;
 800192a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

    while (blkCnt > 0U)
 8001934:	f000 bf46 	b.w	80027c4 <arm_conv_q15+0x13de>
    {
      py = py - 1U;
 8001938:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800193c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	1e9a      	subs	r2, r3, #2
 8001944:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001948:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800194c:	601a      	str	r2, [r3, #0]

      /* Set all accumulators to zero */
      acc0 = 0;
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800195a:	e9c1 2300 	strd	r2, r3, [r1]
      acc1 = 0;
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800196a:	e9c1 2300 	strd	r2, r3, [r1]
      acc2 = 0;
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
      acc3 = 0;
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0


      /* read x[0], x[1] samples */
      x0 = *__SIMD32(px);
 8001986:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
      /* read x[1], x[2] samples */
      x1 = _SIMD32_OFFSET(px+1);
 8001992:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001996:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80019a0:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
      px+= 2U;
 80019a4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80019a8:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	1d1a      	adds	r2, r3, #4
 80019b0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80019b4:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80019b8:	601a      	str	r2, [r3, #0]


      /* Apply loop unrolling and compute 4 MACs simultaneously. */
      k = srcBLen >> 2U;
 80019ba:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80019be:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
       ** a second loop below computes MACs for the remaining 1 to 3 samples. */
      do
      {
        /* Read the last two inputB samples using SIMD:
         * y[srcBLen - 1] and y[srcBLen - 2] */
        c0 = *__SIMD32(py)--;
 80019ca:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 80019ce:	680a      	ldr	r2, [r1, #0]
 80019d0:	1f13      	subs	r3, r2, #4
 80019d2:	600b      	str	r3, [r1, #0]
 80019d4:	6813      	ldr	r3, [r2, #0]
 80019d6:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8

        /* acc0 +=  x[0] * y[srcBLen - 1] + x[1] * y[srcBLen - 2] */
        acc0 = __SMLALDX(x0, c0, acc0);
 80019da:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80019de:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 80019e2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80019e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ea:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80019ee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80019f8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019fc:	601c      	str	r4, [r3, #0]
 80019fe:	e9c7 01aa 	strd	r0, r1, [r7, #680]	; 0x2a8
  llr.w64 = acc;
 8001a02:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8001a06:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001a0a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a0e:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8001a12:	6819      	ldr	r1, [r3, #0]
 8001a14:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a18:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a22:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a2c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001a36:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a3a:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8001a3e:	6019      	str	r1, [r3, #0]
 8001a40:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a44:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8001a48:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001a4a:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001a4e:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8001a52:	e9c1 2300 	strd	r2, r3, [r1]

        /* acc1 +=  x[1] * y[srcBLen - 1] + x[2] * y[srcBLen - 2] */
        acc1 = __SMLALDX(x1, c0, acc1);
 8001a56:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8001a5a:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001a5e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a66:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a6a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a74:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001a78:	601c      	str	r4, [r3, #0]
 8001a7a:	e9c7 01ae 	strd	r0, r1, [r7, #696]	; 0x2b8
  llr.w64 = acc;
 8001a7e:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8001a82:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001a86:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a8a:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a94:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001a9e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001aa8:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001ab2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ab6:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8001aba:	6019      	str	r1, [r3, #0]
 8001abc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ac0:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8001ac4:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001ac6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001aca:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8001ace:	e9c1 2300 	strd	r2, r3, [r1]

        /* Read x[2], x[3] */
        x2 = *__SIMD32(px);
 8001ad2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4

        /* Read x[3], x[4] */
        x3 = _SIMD32_OFFSET(px+1);
 8001ade:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ae2:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8001aec:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

        /* acc2 +=  x[2] * y[srcBLen - 1] + x[3] * y[srcBLen - 2] */
        acc2 = __SMLALDX(x2, c0, acc2);
 8001af0:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8001af4:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001af8:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8001afc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b00:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b0a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b0e:	601c      	str	r4, [r3, #0]
 8001b10:	e9c7 01b2 	strd	r0, r1, [r7, #712]	; 0x2c8
  llr.w64 = acc;
 8001b14:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8001b18:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001b1c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b20:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b2a:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b34:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b3e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001b48:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b4c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001b50:	6019      	str	r1, [r3, #0]
 8001b52:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b56:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8001b5a:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001b5c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001b60:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8

        /* acc3 +=  x[3] * y[srcBLen - 1] + x[4] * y[srcBLen - 2] */
        acc3 = __SMLALDX(x3, c0, acc3);
 8001b64:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001b68:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001b6c:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 8001b70:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b74:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b7e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001b82:	601c      	str	r4, [r3, #0]
 8001b84:	e9c7 01b6 	strd	r0, r1, [r7, #728]	; 0x2d8
  llr.w64 = acc;
 8001b88:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8001b8c:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001b90:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b94:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001b9e:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ba8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001bb2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001bbc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001bc0:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8001bc4:	6019      	str	r1, [r3, #0]
 8001bc6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001bca:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8001bce:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001bd0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001bd4:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0

        /* Read y[srcBLen - 3] and y[srcBLen - 4] */
        c0 = *__SIMD32(py)--;
 8001bd8:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 8001bdc:	680a      	ldr	r2, [r1, #0]
 8001bde:	1f13      	subs	r3, r2, #4
 8001be0:	600b      	str	r3, [r1, #0]
 8001be2:	6813      	ldr	r3, [r2, #0]
 8001be4:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8

        /* acc0 +=  x[2] * y[srcBLen - 3] + x[3] * y[srcBLen - 4] */
        acc0 = __SMLALDX(x2, c0, acc0);
 8001be8:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8001bec:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001bf0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001bf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bf8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c0a:	601c      	str	r4, [r3, #0]
 8001c0c:	e9c7 01ba 	strd	r0, r1, [r7, #744]	; 0x2e8
  llr.w64 = acc;
 8001c10:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8001c14:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001c18:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c1c:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c26:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001c44:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c48:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001c4c:	6019      	str	r1, [r3, #0]
 8001c4e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c52:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 8001c56:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001c58:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001c5c:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8001c60:	e9c1 2300 	strd	r2, r3, [r1]

        /* acc1 +=  x[3] * y[srcBLen - 3] + x[4] * y[srcBLen - 4] */
        acc1 = __SMLALDX(x3, c0, acc1);
 8001c64:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001c68:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001c6c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001c70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c74:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c82:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c86:	601c      	str	r4, [r3, #0]
 8001c88:	e9c7 01be 	strd	r0, r1, [r7, #760]	; 0x2f8
  llr.w64 = acc;
 8001c8c:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8001c90:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001c94:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001c98:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8001c9c:	6819      	ldr	r1, [r3, #0]
 8001c9e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ca2:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001cac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001cb6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001cc0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001cc4:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8001cc8:	6019      	str	r1, [r3, #0]
 8001cca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001cce:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8001cd2:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001cd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001cd8:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8001cdc:	e9c1 2300 	strd	r2, r3, [r1]

        /* Read x[4], x[5] */
        x0 = _SIMD32_OFFSET(px+2);
 8001ce0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ce4:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

        /* Read x[5], x[6] */
        x1 = _SIMD32_OFFSET(px+3);
 8001cf0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001cf4:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8001cfe:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
        px += 4U;
 8001d02:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d06:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f103 0208 	add.w	r2, r3, #8
 8001d10:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d14:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001d18:	601a      	str	r2, [r3, #0]

        /* acc2 +=  x[4] * y[srcBLen - 3] + x[5] * y[srcBLen - 4] */
        acc2 = __SMLALDX(x0, c0, acc2);
 8001d1a:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8001d1e:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001d22:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8001d26:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d38:	601c      	str	r4, [r3, #0]
 8001d3a:	e9c7 01c2 	strd	r0, r1, [r7, #776]	; 0x308
  llr.w64 = acc;
 8001d3e:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8001d42:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001d46:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d4a:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001d4e:	6819      	ldr	r1, [r3, #0]
 8001d50:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d54:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001d72:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d76:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001d7a:	6019      	str	r1, [r3, #0]
 8001d7c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001d80:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001d84:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001d86:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001d8a:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8

        /* acc3 +=  x[5] * y[srcBLen - 3] + x[6] * y[srcBLen - 4] */
        acc3 = __SMLALDX(x1, c0, acc3);
 8001d8e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001d92:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 8001d96:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 8001d9a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8001d9e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001da2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e9c7 01c6 	strd	r0, r1, [r7, #792]	; 0x318
  llr.w64 = acc;
 8001dac:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8001db0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001db4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001db8:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001dbc:	6819      	ldr	r1, [r3, #0]
 8001dbe:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001dc2:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	f8d7 0324 	ldr.w	r0, [r7, #804]	; 0x324
 8001dcc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001dd0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001dda:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001dde:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001de2:	6019      	str	r1, [r3, #0]
 8001de4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001de8:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001dec:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001dee:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001df2:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0

      } while (--k);
 8001df6:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8001e00:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f47f ade0 	bne.w	80019ca <arm_conv_q15+0x5e4>
      /* For the next MAC operations, SIMD is not used
       * So, the 16 bit pointer if inputB, py is updated */

      /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
       ** No loop unrolling is used. */
      k = srcBLen % 0x4U;
 8001e0a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e0e:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

      if (k == 1U)
 8001e1c:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	f040 8110 	bne.w	8002046 <arm_conv_q15+0xc60>
      {
        /* Read y[srcBLen - 5] */
        c0 = *(py+1);
 8001e26:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e2a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3302      	adds	r3, #2
 8001e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e36:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8

        c0 = c0 << 16U;

#else

        c0 = c0 & 0x0000FFFF;
 8001e3a:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8

#endif /*      #ifdef  ARM_MATH_BIG_ENDIAN     */
        /* Read x[7] */
        x3 = *__SIMD32(px);
 8001e44:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
        px++;
 8001e50:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e54:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	1c9a      	adds	r2, r3, #2
 8001e5c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e60:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001e64:	601a      	str	r2, [r3, #0]

        /* Perform the multiply-accumulates */
        acc0 = __SMLALD(x0, c0, acc0);
 8001e66:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8001e6a:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001e6e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001e72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e76:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e7a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e84:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e88:	601c      	str	r4, [r3, #0]
 8001e8a:	e9c7 019a 	strd	r0, r1, [r7, #616]	; 0x268
  llr.w64 = acc;
 8001e8e:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8001e92:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001e96:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001e9a:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001e9e:	6819      	ldr	r1, [r3, #0]
 8001ea0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ea4:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001eae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001eb8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8001ec2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ec6:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001eca:	6019      	str	r1, [r3, #0]
 8001ecc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ed0:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8001ed4:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001ed6:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001eda:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8001ede:	e9c1 2300 	strd	r2, r3, [r1]
        acc1 = __SMLALD(x1, c0, acc1);
 8001ee2:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8001ee6:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001eea:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ef2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001ef6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f00:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001f04:	601c      	str	r4, [r3, #0]
 8001f06:	e9c7 019e 	strd	r0, r1, [r7, #632]	; 0x278
  llr.w64 = acc;
 8001f0a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8001f0e:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001f12:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f16:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8001f1a:	6819      	ldr	r1, [r3, #0]
 8001f1c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f20:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f2a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f34:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	fbc0 12c3 	smlald	r1, r2, r0, r3
 8001f3e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f42:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8001f46:	6019      	str	r1, [r3, #0]
 8001f48:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f4c:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8001f50:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001f52:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001f56:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8001f5a:	e9c1 2300 	strd	r2, r3, [r1]
        acc2 = __SMLALDX(x1, c0, acc2);
 8001f5e:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8001f62:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001f66:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8001f6a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f6e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f78:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001f7c:	601c      	str	r4, [r3, #0]
 8001f7e:	e9c7 01a2 	strd	r0, r1, [r7, #648]	; 0x288
  llr.w64 = acc;
 8001f82:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8001f86:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001f8a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f8e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001f92:	6819      	ldr	r1, [r3, #0]
 8001f94:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001f98:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001fa2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001fac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8001fb6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001fba:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001fbe:	6019      	str	r1, [r3, #0]
 8001fc0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001fc4:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001fc8:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8001fca:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001fce:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
        acc3 = __SMLALDX(x3, c0, acc3);
 8001fd2:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001fd6:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8001fda:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 8001fde:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001fe2:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8001fec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ff0:	601c      	str	r4, [r3, #0]
 8001ff2:	e9c7 01a6 	strd	r0, r1, [r7, #664]	; 0x298
  llr.w64 = acc;
 8001ff6:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8001ffa:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001ffe:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002002:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8002006:	6819      	ldr	r1, [r3, #0]
 8002008:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800200c:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002016:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002020:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 800202a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800202e:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 8002032:	6019      	str	r1, [r3, #0]
 8002034:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002038:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 800203c:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 800203e:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002042:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
      }

      if (k == 2U)
 8002046:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800204a:	2b02      	cmp	r3, #2
 800204c:	f040 8112 	bne.w	8002274 <arm_conv_q15+0xe8e>
      {
        /* Read y[srcBLen - 5], y[srcBLen - 6] */
        c0 = _SIMD32_OFFSET(py);
 8002050:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002054:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8

        /* Read x[7], x[8] */
        x3 = *__SIMD32(px);
 8002060:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

        /* Read x[9] */
        x2 = _SIMD32_OFFSET(px+1);
 800206c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002070:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800207a:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
        px += 2U;
 800207e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002082:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	1d1a      	adds	r2, r3, #4
 800208a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800208e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002092:	601a      	str	r2, [r3, #0]

        /* Perform the multiply-accumulates */
        acc0 = __SMLALDX(x0, c0, acc0);
 8002094:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8002098:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 800209c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80020a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020a4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80020a8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80020b2:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80020b6:	601c      	str	r4, [r3, #0]
 80020b8:	e9c7 018a 	strd	r0, r1, [r7, #552]	; 0x228
  llr.w64 = acc;
 80020bc:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 80020c0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80020c4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80020c8:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80020cc:	6819      	ldr	r1, [r3, #0]
 80020ce:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80020d2:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80020dc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80020e6:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 80020f0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80020f4:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80020f8:	6019      	str	r1, [r3, #0]
 80020fa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80020fe:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8002102:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8002104:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8002108:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800210c:	e9c1 2300 	strd	r2, r3, [r1]
        acc1 = __SMLALDX(x1, c0, acc1);
 8002110:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8002114:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8002118:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800211c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002120:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002124:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800212e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002132:	601c      	str	r4, [r3, #0]
 8002134:	e9c7 018e 	strd	r0, r1, [r7, #568]	; 0x238
  llr.w64 = acc;
 8002138:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 800213c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002140:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002144:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8002148:	6819      	ldr	r1, [r3, #0]
 800214a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800214e:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002158:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002162:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 800216c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002170:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8002174:	6019      	str	r1, [r3, #0]
 8002176:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800217a:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800217e:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8002180:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8002184:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8002188:	e9c1 2300 	strd	r2, r3, [r1]
        acc2 = __SMLALDX(x3, c0, acc2);
 800218c:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8002190:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8002194:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 8002198:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800219c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021a6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021aa:	601c      	str	r4, [r3, #0]
 80021ac:	e9c7 0192 	strd	r0, r1, [r7, #584]	; 0x248
  llr.w64 = acc;
 80021b0:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80021b4:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80021b8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021bc:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021c6:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021d0:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021da:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 80021e4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021e8:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80021ec:	6019      	str	r1, [r3, #0]
 80021ee:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80021f2:	f5a3 7350 	sub.w	r3, r3, #832	; 0x340
 80021f6:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 80021f8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80021fc:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
        acc3 = __SMLALDX(x2, c0, acc3);
 8002200:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8002204:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8002208:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 800220c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002210:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800221a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800221e:	601c      	str	r4, [r3, #0]
 8002220:	e9c7 0196 	strd	r0, r1, [r7, #600]	; 0x258
  llr.w64 = acc;
 8002224:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8002228:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800222c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002230:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800223a:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002244:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800224e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8002258:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800225c:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8002260:	6019      	str	r1, [r3, #0]
 8002262:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002266:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800226a:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 800226c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8002270:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
      }

      if (k == 3U)
 8002274:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002278:	2b03      	cmp	r3, #3
 800227a:	f040 8219 	bne.w	80026b0 <arm_conv_q15+0x12ca>
      {
        /* Read y[srcBLen - 5], y[srcBLen - 6] */
        c0 = _SIMD32_OFFSET(py);
 800227e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002282:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8

        /* Read x[7], x[8] */
        x3 = *__SIMD32(px);
 800228e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

        /* Read x[9] */
        x2 = _SIMD32_OFFSET(px+1);
 800229a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800229e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80022a8:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4

        /* Perform the multiply-accumulates */
        acc0 = __SMLALDX(x0, c0, acc0);
 80022ac:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80022b0:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 80022b4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80022b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022bc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022c0:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022ca:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 80022ce:	601c      	str	r4, [r3, #0]
 80022d0:	e9c7 016a 	strd	r0, r1, [r7, #424]	; 0x1a8
  llr.w64 = acc;
 80022d4:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 80022d8:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80022dc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022e0:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80022e4:	6819      	ldr	r1, [r3, #0]
 80022e6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022ea:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022f4:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80022fe:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8002308:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800230c:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8002310:	6019      	str	r1, [r3, #0]
 8002312:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002316:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 800231a:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 800231c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002320:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8002324:	e9c1 2300 	strd	r2, r3, [r1]
        acc1 = __SMLALDX(x1, c0, acc1);
 8002328:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 800232c:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8002330:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002338:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800233c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002346:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800234a:	601c      	str	r4, [r3, #0]
 800234c:	e9c7 016e 	strd	r0, r1, [r7, #440]	; 0x1b8
  llr.w64 = acc;
 8002350:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8002354:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002358:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800235c:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8002360:	6819      	ldr	r1, [r3, #0]
 8002362:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002366:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002370:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800237a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8002384:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002388:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 800238c:	6019      	str	r1, [r3, #0]
 800238e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002392:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8002396:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8002398:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800239c:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80023a0:	e9c1 2300 	strd	r2, r3, [r1]
        acc2 = __SMLALDX(x3, c0, acc2);
 80023a4:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 80023a8:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 80023ac:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 80023b0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80023b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80023be:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80023c2:	601c      	str	r4, [r3, #0]
 80023c4:	e9c7 0172 	strd	r0, r1, [r7, #456]	; 0x1c8
  llr.w64 = acc;
 80023c8:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 80023cc:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80023d0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80023d4:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80023d8:	6819      	ldr	r1, [r3, #0]
 80023da:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80023de:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80023e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80023f2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 80023fc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002400:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8002404:	6019      	str	r1, [r3, #0]
 8002406:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800240a:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800240e:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8002410:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002414:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
        acc3 = __SMLALDX(x2, c0, acc3);
 8002418:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 800241c:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8002420:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 8002424:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002428:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002432:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8002436:	601c      	str	r4, [r3, #0]
 8002438:	e9c7 0176 	strd	r0, r1, [r7, #472]	; 0x1d8
  llr.w64 = acc;
 800243c:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8002440:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002444:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002448:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800244c:	6819      	ldr	r1, [r3, #0]
 800244e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002452:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800245c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002466:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8002470:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002474:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8002478:	6019      	str	r1, [r3, #0]
 800247a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800247e:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8002482:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8002484:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002488:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0

        c0 = *(py-1);
 800248c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002490:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3b02      	subs	r3, #2
 8002498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800249c:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
#ifdef  ARM_MATH_BIG_ENDIAN

        c0 = c0 << 16U;
#else

        c0 = c0 & 0x0000FFFF;
 80024a0:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
#endif /*      #ifdef  ARM_MATH_BIG_ENDIAN     */
        /* Read x[10] */
        x3 =  _SIMD32_OFFSET(px+2);
 80024aa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024ae:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
        px += 3U;
 80024ba:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024be:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	1d9a      	adds	r2, r3, #6
 80024c6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024ca:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80024ce:	601a      	str	r2, [r3, #0]

        /* Perform the multiply-accumulates */
        acc0 = __SMLALDX(x1, c0, acc0);
 80024d0:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 80024d4:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 80024d8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80024dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024e4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80024ee:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80024f2:	601c      	str	r4, [r3, #0]
 80024f4:	e9c7 017a 	strd	r0, r1, [r7, #488]	; 0x1e8
  llr.w64 = acc;
 80024f8:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80024fc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002500:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002504:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800250e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002518:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002522:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 800252c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002530:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8002534:	6019      	str	r1, [r3, #0]
 8002536:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800253a:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 800253e:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8002540:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002544:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8002548:	e9c1 2300 	strd	r2, r3, [r1]
        acc1 = __SMLALD(x2, c0, acc1);
 800254c:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8002550:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8002554:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800255c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002560:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800256a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800256e:	601c      	str	r4, [r3, #0]
 8002570:	e9c7 017e 	strd	r0, r1, [r7, #504]	; 0x1f8
  llr.w64 = acc;
 8002574:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 8002578:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800257c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002580:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800258a:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002594:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800259e:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	fbc0 12c3 	smlald	r1, r2, r0, r3
 80025a8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80025ac:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80025b0:	6019      	str	r1, [r3, #0]
 80025b2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80025b6:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 80025ba:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 80025bc:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80025c0:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80025c4:	e9c1 2300 	strd	r2, r3, [r1]
        acc2 = __SMLALDX(x2, c0, acc2);
 80025c8:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 80025cc:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 80025d0:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	; 0x3f8
 80025d4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80025d8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80025e2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80025e6:	601c      	str	r4, [r3, #0]
 80025e8:	e9c7 0182 	strd	r0, r1, [r7, #520]	; 0x208
  llr.w64 = acc;
 80025ec:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 80025f0:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80025f4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80025f8:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002602:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800260c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002616:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8002620:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002624:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8002628:	6019      	str	r1, [r3, #0]
 800262a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800262e:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8002632:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 8002634:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8002638:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
        acc3 = __SMLALDX(x3, c0, acc3);
 800263c:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8002640:	f8d7 43a8 	ldr.w	r4, [r7, #936]	; 0x3a8
 8002644:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 8002648:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800264c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002656:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800265a:	601c      	str	r4, [r3, #0]
 800265c:	e9c7 0186 	strd	r0, r1, [r7, #536]	; 0x218
  llr.w64 = acc;
 8002660:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8002664:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002668:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800266c:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8002670:	6819      	ldr	r1, [r3, #0]
 8002672:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002676:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002680:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800268a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	fbc0 12d3 	smlaldx	r1, r2, r0, r3
 8002694:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002698:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800269c:	6019      	str	r1, [r3, #0]
 800269e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80026a2:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80026a6:	605a      	str	r2, [r3, #4]
  return(llr.w64);
 80026a8:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80026ac:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
      /* Store the results in the accumulators in the destination buffer. */

#ifndef  ARM_MATH_BIG_ENDIAN

      *__SIMD32(pOut)++ =
        __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 80026b0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	f04f 0000 	mov.w	r0, #0
 80026bc:	f04f 0100 	mov.w	r1, #0
 80026c0:	0bd0      	lsrs	r0, r2, #15
 80026c2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80026c6:	13d9      	asrs	r1, r3, #15
 80026c8:	4603      	mov	r3, r0
 80026ca:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 80026ce:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80026d2:	f303 030f 	ssat	r3, #16, r3
 80026d6:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 80026da:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 80026de:	b29c      	uxth	r4, r3
 80026e0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	f04f 0000 	mov.w	r0, #0
 80026ec:	f04f 0100 	mov.w	r1, #0
 80026f0:	0bd0      	lsrs	r0, r2, #15
 80026f2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 80026f6:	13d9      	asrs	r1, r3, #15
 80026f8:	4603      	mov	r3, r0
 80026fa:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 80026fe:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8002702:	f303 030f 	ssat	r3, #16, r3
 8002706:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 800270a:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800270e:	041b      	lsls	r3, r3, #16
 8002710:	ea44 0003 	orr.w	r0, r4, r3
      *__SIMD32(pOut)++ =
 8002714:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002718:	6811      	ldr	r1, [r2, #0]
 800271a:	1d0b      	adds	r3, r1, #4
 800271c:	6013      	str	r3, [r2, #0]
        __PKHBT(__SSAT((acc0 >> 15), 16), __SSAT((acc1 >> 15), 16), 16);
 800271e:	4603      	mov	r3, r0
      *__SIMD32(pOut)++ =
 8002720:	600b      	str	r3, [r1, #0]
      *__SIMD32(pOut)++ =
        __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 8002722:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 8002726:	f04f 0000 	mov.w	r0, #0
 800272a:	f04f 0100 	mov.w	r1, #0
 800272e:	0bd0      	lsrs	r0, r2, #15
 8002730:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8002734:	13d9      	asrs	r1, r3, #15
 8002736:	4603      	mov	r3, r0
 8002738:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 800273c:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8002740:	f303 030f 	ssat	r3, #16, r3
 8002744:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8002748:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800274c:	b29c      	uxth	r4, r3
 800274e:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8002752:	f04f 0000 	mov.w	r0, #0
 8002756:	f04f 0100 	mov.w	r1, #0
 800275a:	0bd0      	lsrs	r0, r2, #15
 800275c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8002760:	13d9      	asrs	r1, r3, #15
 8002762:	4603      	mov	r3, r0
 8002764:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8002768:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800276c:	f303 030f 	ssat	r3, #16, r3
 8002770:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8002774:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	ea44 0003 	orr.w	r0, r4, r3
      *__SIMD32(pOut)++ =
 800277e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8002782:	6811      	ldr	r1, [r2, #0]
 8002784:	1d0b      	adds	r3, r1, #4
 8002786:	6013      	str	r3, [r2, #0]
        __PKHBT(__SSAT((acc2 >> 15), 16), __SSAT((acc3 >> 15), 16), 16);
 8002788:	4603      	mov	r3, r0
      *__SIMD32(pOut)++ =
 800278a:	600b      	str	r3, [r1, #0]
        __PKHBT(__SSAT((acc3 >> 15), 16), __SSAT((acc2 >> 15), 16), 16);

#endif /*      #ifndef  ARM_MATH_BIG_ENDIAN    */

      /* Increment the pointer pIn1 index, count by 4 */
      count += 4U;
 800278c:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002790:	3304      	adds	r3, #4
 8002792:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0

      /* Update the inputA and inputB pointers for next MAC calculation */
      px = pIn1 + count;
 8002796:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 800279a:	005a      	lsls	r2, r3, #1
 800279c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80027a0:	441a      	add	r2, r3
 80027a2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80027a6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80027aa:	601a      	str	r2, [r3, #0]
      py = pSrc2;
 80027ac:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80027b0:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 80027b4:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 80027b8:	6013      	str	r3, [r2, #0]

       /* Decrement the loop counter */
      blkCnt--;
 80027ba:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80027be:	3b01      	subs	r3, #1
 80027c0:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
    while (blkCnt > 0U)
 80027c4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f47f a8b5 	bne.w	8001938 <arm_conv_q15+0x552>
    }

    /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = blockSize2 % 0x4U;
 80027ce:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

    while (blkCnt > 0U)
 80027da:	e163      	b.n	8002aa4 <arm_conv_q15+0x16be>
    {
      /* Accumulator is made zero for every iteration */
      sum = 0;
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80027e8:	e9c1 2300 	strd	r2, r3, [r1]

      /* Apply loop unrolling and compute 4 MACs simultaneously. */
      k = srcBLen >> 2U;
 80027ec:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80027f0:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

      /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
       ** a second loop below computes MACs for the remaining 1 to 3 samples. */
      while (k > 0U)
 80027fc:	e0cc      	b.n	8002998 <arm_conv_q15+0x15b2>
      {
        /* Perform the multiply-accumulates */
        sum += (q63_t) ((q31_t) * px++ * *py--);
 80027fe:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002802:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002806:	6819      	ldr	r1, [r3, #0]
 8002808:	1c8a      	adds	r2, r1, #2
 800280a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800280e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002818:	4618      	mov	r0, r3
 800281a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800281e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002822:	6819      	ldr	r1, [r3, #0]
 8002824:	1e8a      	subs	r2, r1, #2
 8002826:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800282a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002834:	fb00 f303 	mul.w	r3, r0, r3
 8002838:	17da      	asrs	r2, r3, #31
 800283a:	643b      	str	r3, [r7, #64]	; 0x40
 800283c:	647a      	str	r2, [r7, #68]	; 0x44
 800283e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800284a:	4641      	mov	r1, r8
 800284c:	1851      	adds	r1, r2, r1
 800284e:	6239      	str	r1, [r7, #32]
 8002850:	4649      	mov	r1, r9
 8002852:	414b      	adcs	r3, r1
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
 8002856:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800285a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800285e:	e9c2 3400 	strd	r3, r4, [r2]
        sum += (q63_t) ((q31_t) * px++ * *py--);
 8002862:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002866:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800286a:	6819      	ldr	r1, [r3, #0]
 800286c:	1c8a      	adds	r2, r1, #2
 800286e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002872:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	f9b1 3000 	ldrsh.w	r3, [r1]
 800287c:	4618      	mov	r0, r3
 800287e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002882:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	1e8a      	subs	r2, r1, #2
 800288a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800288e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002898:	fb00 f303 	mul.w	r3, r0, r3
 800289c:	17da      	asrs	r2, r3, #31
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028a2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80028ae:	4641      	mov	r1, r8
 80028b0:	1851      	adds	r1, r2, r1
 80028b2:	61b9      	str	r1, [r7, #24]
 80028b4:	4649      	mov	r1, r9
 80028b6:	414b      	adcs	r3, r1
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80028be:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80028c2:	e9c2 3400 	strd	r3, r4, [r2]
        sum += (q63_t) ((q31_t) * px++ * *py--);
 80028c6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80028ca:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	1c8a      	adds	r2, r1, #2
 80028d2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80028d6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	f9b1 3000 	ldrsh.w	r3, [r1]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80028e6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80028ea:	6819      	ldr	r1, [r3, #0]
 80028ec:	1e8a      	subs	r2, r1, #2
 80028ee:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80028f2:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80028fc:	fb00 f303 	mul.w	r3, r0, r3
 8002900:	17da      	asrs	r2, r3, #31
 8002902:	633b      	str	r3, [r7, #48]	; 0x30
 8002904:	637a      	str	r2, [r7, #52]	; 0x34
 8002906:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8002912:	4641      	mov	r1, r8
 8002914:	1851      	adds	r1, r2, r1
 8002916:	6139      	str	r1, [r7, #16]
 8002918:	4649      	mov	r1, r9
 800291a:	414b      	adcs	r3, r1
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002922:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002926:	e9c2 3400 	strd	r3, r4, [r2]
        sum += (q63_t) ((q31_t) * px++ * *py--);
 800292a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800292e:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002932:	6819      	ldr	r1, [r3, #0]
 8002934:	1c8a      	adds	r2, r1, #2
 8002936:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800293a:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002944:	4618      	mov	r0, r3
 8002946:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800294a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	1e8a      	subs	r2, r1, #2
 8002952:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002956:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8002960:	fb00 f303 	mul.w	r3, r0, r3
 8002964:	17da      	asrs	r2, r3, #31
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
 8002968:	62fa      	str	r2, [r7, #44]	; 0x2c
 800296a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002976:	4641      	mov	r1, r8
 8002978:	1851      	adds	r1, r2, r1
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	4649      	mov	r1, r9
 800297e:	414b      	adcs	r3, r1
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002986:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800298a:	e9c2 3400 	strd	r3, r4, [r2]

        /* Decrement the loop counter */
        k--;
 800298e:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002992:	3b01      	subs	r3, #1
 8002994:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
      while (k > 0U)
 8002998:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f af2e 	bne.w	80027fe <arm_conv_q15+0x1418>
      }

      /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
       ** No loop unrolling is used. */
      k = srcBLen % 0x4U;
 80029a2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80029a6:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

      while (k > 0U)
 80029b4:	e032      	b.n	8002a1c <arm_conv_q15+0x1636>
      {
        /* Perform the multiply-accumulates */
        sum += (q63_t) ((q31_t) * px++ * *py--);
 80029b6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80029ba:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	1c8a      	adds	r2, r1, #2
 80029c2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80029c6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f9b1 3000 	ldrsh.w	r3, [r1]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80029d6:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80029da:	6819      	ldr	r1, [r3, #0]
 80029dc:	1e8a      	subs	r2, r1, #2
 80029de:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80029e2:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80029ec:	fb00 f303 	mul.w	r3, r0, r3
 80029f0:	17da      	asrs	r2, r3, #31
 80029f2:	461d      	mov	r5, r3
 80029f4:	4616      	mov	r6, r2
 80029f6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	1951      	adds	r1, r2, r5
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	4173      	adcs	r3, r6
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002a0a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002a0e:	e9c2 3400 	strd	r3, r4, [r2]

        /* Decrement the loop counter */
        k--;
 8002a12:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002a16:	3b01      	subs	r3, #1
 8002a18:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
      while (k > 0U)
 8002a1c:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1c8      	bne.n	80029b6 <arm_conv_q15+0x15d0>
      }

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = (q15_t) (__SSAT(sum >> 15, 16));
 8002a24:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f04f 0000 	mov.w	r0, #0
 8002a30:	f04f 0100 	mov.w	r1, #0
 8002a34:	0bd0      	lsrs	r0, r2, #15
 8002a36:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8002a3a:	13d9      	asrs	r1, r3, #15
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8002a42:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8002a46:	f303 030f 	ssat	r3, #16, r3
 8002a4a:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8002a4e:	f8d7 03ac 	ldr.w	r0, [r7, #940]	; 0x3ac
 8002a52:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002a56:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8002a5a:	6819      	ldr	r1, [r3, #0]
 8002a5c:	1c8a      	adds	r2, r1, #2
 8002a5e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002a62:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	b203      	sxth	r3, r0
 8002a6a:	800b      	strh	r3, [r1, #0]

      /* Increment the pointer pIn1 index, count by 1 */
      count++;
 8002a6c:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002a70:	3301      	adds	r3, #1
 8002a72:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0

      /* Update the inputA and inputB pointers for next MAC calculation */
      px = pIn1 + count;
 8002a76:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002a7a:	005a      	lsls	r2, r3, #1
 8002a7c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002a80:	441a      	add	r2, r3
 8002a82:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002a86:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002a8a:	601a      	str	r2, [r3, #0]
      py = pSrc2;
 8002a8c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002a90:	f5a3 7231 	sub.w	r2, r3, #708	; 0x2c4
 8002a94:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8002a98:	6013      	str	r3, [r2, #0]

      /* Decrement the loop counter */
      blkCnt--;
 8002a9a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
    while (blkCnt > 0U)
 8002aa4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f47f ae97 	bne.w	80027dc <arm_conv_q15+0x13f6>
 8002aae:	e08e      	b.n	8002bce <arm_conv_q15+0x17e8>
  }
  else
  {
    /* If the srcBLen is not a multiple of 4,
     * the blockSize2 loop cannot be unrolled by 4 */
    blkCnt = blockSize2;
 8002ab0:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8002ab4:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

    while (blkCnt > 0U)
 8002ab8:	e084      	b.n	8002bc4 <arm_conv_q15+0x17de>
    {
      /* Accumulator is made zero for every iteration */
      sum = 0;
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002ac6:	e9c1 2300 	strd	r2, r3, [r1]

      /* srcBLen number of MACS should be performed */
      k = srcBLen;
 8002aca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002ace:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

      while (k > 0U)
 8002ad8:	e030      	b.n	8002b3c <arm_conv_q15+0x1756>
      {
        /* Perform the multiply-accumulate */
        sum += (q63_t) ((q31_t) * px++ * *py--);
 8002ada:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002ade:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	1c99      	adds	r1, r3, #2
 8002ae6:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002aea:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8002aee:	6011      	str	r1, [r2, #0]
 8002af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002afa:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	1e99      	subs	r1, r3, #2
 8002b02:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002b06:	f5a2 7231 	sub.w	r2, r2, #708	; 0x2c4
 8002b0a:	6011      	str	r1, [r2, #0]
 8002b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b10:	fb00 f303 	mul.w	r3, r0, r3
 8002b14:	17da      	asrs	r2, r3, #31
 8002b16:	4698      	mov	r8, r3
 8002b18:	4691      	mov	r9, r2
 8002b1a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	eb12 0a08 	adds.w	sl, r2, r8
 8002b26:	eb43 0b09 	adc.w	fp, r3, r9
 8002b2a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002b2e:	e9c3 ab00 	strd	sl, fp, [r3]

        /* Decrement the loop counter */
        k--;
 8002b32:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002b36:	3b01      	subs	r3, #1
 8002b38:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
      while (k > 0U)
 8002b3c:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1ca      	bne.n	8002ada <arm_conv_q15+0x16f4>
      }

      /* Store the result in the accumulator in the destination buffer. */
      *pOut++ = (q15_t) (__SSAT(sum >> 15, 16));
 8002b44:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	0bc2      	lsrs	r2, r0, #15
 8002b56:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8002b5a:	13cb      	asrs	r3, r1, #15
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8002b62:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 8002b66:	f303 030f 	ssat	r3, #16, r3
 8002b6a:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8002b6e:	f8d7 03b4 	ldr.w	r0, [r7, #948]	; 0x3b4
 8002b72:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002b76:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1c99      	adds	r1, r3, #2
 8002b7e:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002b82:	f5a2 722f 	sub.w	r2, r2, #700	; 0x2bc
 8002b86:	6011      	str	r1, [r2, #0]
 8002b88:	b202      	sxth	r2, r0
 8002b8a:	801a      	strh	r2, [r3, #0]

      /* Increment the MAC count */
      count++;
 8002b8c:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002b90:	3301      	adds	r3, #1
 8002b92:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0

      /* Update the inputA and inputB pointers for next MAC calculation */
      px = pIn1 + count;
 8002b96:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8002ba0:	441a      	add	r2, r3
 8002ba2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002ba6:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002baa:	601a      	str	r2, [r3, #0]
      py = pSrc2;
 8002bac:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002bb0:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002bb4:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 8002bb8:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      blkCnt--;
 8002bba:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
    while (blkCnt > 0U)
 8002bc4:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f47f af76 	bne.w	8002aba <arm_conv_q15+0x16d4>
   */

  /* In this stage the MAC operations are decreased by 1 for every iteration.
     The blockSize3 variable holds the number of MAC operations performed */

  blockSize3 = srcBLen - 1U;
 8002bce:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002bd2:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

  /* Working pointer of inputA */
  pSrc1 = (pIn1 + srcALen) - (srcBLen - 1U);
 8002bde:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002be2:	f5a3 7274 	sub.w	r2, r3, #976	; 0x3d0
 8002be6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002bea:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
  px = pSrc1;
 8002c02:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002c06:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002c0a:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Working pointer of inputB */
  pSrc2 = pIn2 + (srcBLen - 1U);
 8002c10:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002c14:	f5a3 7376 	sub.w	r3, r3, #984	; 0x3d8
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002c1e:	4413      	add	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8002c26:	4413      	add	r3, r2
 8002c28:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
  pIn2 = pSrc2 - 1U;
 8002c2c:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8002c30:	3b02      	subs	r3, #2
 8002c32:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
  py = pIn2;
 8002c36:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002c3a:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002c3e:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8002c42:	601a      	str	r2, [r3, #0]
  /* For loop unrolling by 4, this stage is divided into two. */
  /* First part of this stage computes the MAC operations greater than 4 */
  /* Second part of this stage computes the MAC operations less than or equal to 4 */

  /* The first part of the stage starts here */
  j = blockSize3 >> 2U;
 8002c44:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8

  while ((j > 0U) && (blockSize3 > 0U))
 8002c4e:	e15c      	b.n	8002f0a <arm_conv_q15+0x1b24>
  {
    /* Accumulator is made zero for every iteration */
    sum = 0;
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002c5c:	e9c1 2300 	strd	r2, r3, [r1]

    /* Apply loop unrolling and compute 4 MACs simultaneously. */
    k = blockSize3 >> 2U;
 8002c60:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

    /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
     ** a second loop below computes MACs for the remaining 1 to 3 samples. */
    while (k > 0U)
 8002c6a:	e096      	b.n	8002d9a <arm_conv_q15+0x19b4>
    {
      /* x[srcALen - srcBLen + 1], x[srcALen - srcBLen + 2] are multiplied
       * with y[srcBLen - 1], y[srcBLen - 2] respectively */
      sum = __SMLALDX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 8002c6c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002c70:	6813      	ldr	r3, [r2, #0]
 8002c72:	1d19      	adds	r1, r3, #4
 8002c74:	6011      	str	r1, [r2, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	461c      	mov	r4, r3
 8002c7a:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8002c7e:	6813      	ldr	r3, [r2, #0]
 8002c80:	1f19      	subs	r1, r3, #4
 8002c82:	6011      	str	r1, [r2, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c90:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002c94:	f5a1 7123 	sub.w	r1, r1, #652	; 0x28c
 8002c98:	600c      	str	r4, [r1, #0]
 8002c9a:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002c9e:	f5a1 7124 	sub.w	r1, r1, #656	; 0x290
 8002ca2:	6008      	str	r0, [r1, #0]
 8002ca4:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
  llr.w64 = acc;
 8002ca8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002cac:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002cb0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002cb4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002cbe:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8002cc2:	685c      	ldr	r4, [r3, #4]
 8002cc4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002cc8:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 8002ccc:	6819      	ldr	r1, [r3, #0]
 8002cce:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002cd2:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	4623      	mov	r3, r4
 8002cda:	fbc1 23d0 	smlaldx	r2, r3, r1, r0
 8002cde:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002ce2:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 8002ce6:	600a      	str	r2, [r1, #0]
 8002ce8:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002cec:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8002cf0:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8002cf2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002cf6:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002cfa:	e9c1 2300 	strd	r2, r3, [r1]
      /* x[srcALen - srcBLen + 3], x[srcALen - srcBLen + 4] are multiplied
       * with y[srcBLen - 3], y[srcBLen - 4] respectively */
      sum = __SMLALDX(*__SIMD32(px)++, *__SIMD32(py)--, sum);
 8002cfe:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8002d02:	6813      	ldr	r3, [r2, #0]
 8002d04:	1d19      	adds	r1, r3, #4
 8002d06:	6011      	str	r1, [r2, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461c      	mov	r4, r3
 8002d0c:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8002d10:	6813      	ldr	r3, [r2, #0]
 8002d12:	1f19      	subs	r1, r3, #4
 8002d14:	6011      	str	r1, [r2, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002d26:	f5a1 711f 	sub.w	r1, r1, #636	; 0x27c
 8002d2a:	600c      	str	r4, [r1, #0]
 8002d2c:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002d30:	f5a1 7120 	sub.w	r1, r1, #640	; 0x280
 8002d34:	6008      	str	r0, [r1, #0]
 8002d36:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
  llr.w64 = acc;
 8002d3a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8002d3e:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
  __ASM volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002d42:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002d46:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002d50:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8002d54:	685c      	ldr	r4, [r3, #4]
 8002d56:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002d5a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002d5e:	6819      	ldr	r1, [r3, #0]
 8002d60:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002d64:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	4623      	mov	r3, r4
 8002d6c:	fbc1 23d0 	smlaldx	r2, r3, r1, r0
 8002d70:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002d74:	f5a1 713a 	sub.w	r1, r1, #744	; 0x2e8
 8002d78:	600a      	str	r2, [r1, #0]
 8002d7a:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002d7e:	f5a2 723a 	sub.w	r2, r2, #744	; 0x2e8
 8002d82:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8002d84:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002d88:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002d8c:	e9c1 2300 	strd	r2, r3, [r1]

      /* Decrement the loop counter */
      k--;
 8002d90:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002d94:	3b01      	subs	r3, #1
 8002d96:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    while (k > 0U)
 8002d9a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f47f af64 	bne.w	8002c6c <arm_conv_q15+0x1886>
    }

    /* For the next MAC operations, the pointer py is used without SIMD
     * So, py is incremented by 1 */
    py = py + 1U;
 8002da4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002da8:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	1c9a      	adds	r2, r3, #2
 8002db0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002db4:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002db8:	601a      	str	r2, [r3, #0]

    /* If the blockSize3 is not a multiple of 4, compute any remaining MACs here.
     ** No loop unrolling is used. */
    k = blockSize3 % 0x4U;
 8002dba:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

    while (k > 0U)
 8002dc6:	e05b      	b.n	8002e80 <arm_conv_q15+0x1a9a>
    {
      /* sum += x[srcALen - srcBLen + 5] * y[srcBLen - 5] */
      sum = __SMLALD(*px++, *py--, sum);
 8002dc8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002dcc:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	1c99      	adds	r1, r3, #2
 8002dd4:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002dd8:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8002ddc:	6011      	str	r1, [r2, #0]
 8002dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de2:	461c      	mov	r4, r3
 8002de4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002de8:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	1e99      	subs	r1, r3, #2
 8002df0:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002df4:	f5a2 7231 	sub.w	r2, r2, #708	; 0x2c4
 8002df8:	6011      	str	r1, [r2, #0]
 8002dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002e0c:	f5a1 7127 	sub.w	r1, r1, #668	; 0x29c
 8002e10:	600c      	str	r4, [r1, #0]
 8002e12:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002e16:	f5a1 7128 	sub.w	r1, r1, #672	; 0x2a0
 8002e1a:	6008      	str	r0, [r1, #0]
 8002e1c:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
  llr.w64 = acc;
 8002e20:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002e24:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002e28:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002e2c:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002e36:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 8002e3a:	685c      	ldr	r4, [r3, #4]
 8002e3c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002e40:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002e4a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	4623      	mov	r3, r4
 8002e52:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8002e56:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002e5a:	f5a1 7136 	sub.w	r1, r1, #728	; 0x2d8
 8002e5e:	600a      	str	r2, [r1, #0]
 8002e60:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002e64:	f5a2 7236 	sub.w	r2, r2, #728	; 0x2d8
 8002e68:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8002e6a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8002e6e:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002e72:	e9c1 2300 	strd	r2, r3, [r1]

      /* Decrement the loop counter */
      k--;
 8002e76:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    while (k > 0U)
 8002e80:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d19f      	bne.n	8002dc8 <arm_conv_q15+0x19e2>
    }

    /* Store the result in the accumulator in the destination buffer. */
    *pOut++ = (q15_t) (__SSAT((sum >> 15), 16));
 8002e88:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002e8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	0bc2      	lsrs	r2, r0, #15
 8002e9a:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8002e9e:	13cb      	asrs	r3, r1, #15
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8002ea6:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8002eaa:	f303 030f 	ssat	r3, #16, r3
 8002eae:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8002eb2:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 8002eb6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002eba:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	1c99      	adds	r1, r3, #2
 8002ec2:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002ec6:	f5a2 722f 	sub.w	r2, r2, #700	; 0x2bc
 8002eca:	6011      	str	r1, [r2, #0]
 8002ecc:	b202      	sxth	r2, r0
 8002ece:	801a      	strh	r2, [r3, #0]

    /* Update the inputA and inputB pointers for next MAC calculation */
    px = ++pSrc1;
 8002ed0:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8002eda:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002ede:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002ee2:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8002ee6:	601a      	str	r2, [r3, #0]
    py = pIn2;
 8002ee8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002eec:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002ef0:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8002ef4:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blockSize3--;
 8002ef6:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002efa:	3b01      	subs	r3, #1
 8002efc:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

    j--;
 8002f00:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8002f04:	3b01      	subs	r3, #1
 8002f06:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
  while ((j > 0U) && (blockSize3 > 0U))
 8002f0a:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <arm_conv_q15+0x1b36>
 8002f12:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f47f ae9a 	bne.w	8002c50 <arm_conv_q15+0x186a>
  }

  /* The second part of the stage starts here */
  /* SIMD is not used for the next MAC operations,
   * so pointer py is updated to read only one sample at a time */
  py = py + 1U;
 8002f1c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002f20:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	1c9a      	adds	r2, r3, #2
 8002f28:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002f2c:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002f30:	601a      	str	r2, [r3, #0]

  while (blockSize3 > 0U)
 8002f32:	e0a8      	b.n	8003086 <arm_conv_q15+0x1ca0>
  {
    /* Accumulator is made zero for every iteration */
    sum = 0;
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002f40:	e9c1 2300 	strd	r2, r3, [r1]

    /* Apply loop unrolling and compute 4 MACs simultaneously. */
    k = blockSize3;
 8002f44:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8002f48:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

    while (k > 0U)
 8002f4c:	e05b      	b.n	8003006 <arm_conv_q15+0x1c20>
    {
      /* Perform the multiply-accumulates */
      /* sum +=  x[srcALen-1] * y[srcBLen-1] */
      sum = __SMLALD(*px++, *py--, sum);
 8002f4e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002f52:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	1c99      	adds	r1, r3, #2
 8002f5a:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002f5e:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 8002f62:	6011      	str	r1, [r2, #0]
 8002f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f68:	461c      	mov	r4, r3
 8002f6a:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002f6e:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	1e99      	subs	r1, r3, #2
 8002f76:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002f7a:	f5a2 7231 	sub.w	r2, r2, #708	; 0x2c4
 8002f7e:	6011      	str	r1, [r2, #0]
 8002f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002f92:	f5a1 712b 	sub.w	r1, r1, #684	; 0x2ac
 8002f96:	600c      	str	r4, [r1, #0]
 8002f98:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002f9c:	f5a1 712c 	sub.w	r1, r1, #688	; 0x2b0
 8002fa0:	6008      	str	r0, [r1, #0]
 8002fa2:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  llr.w64 = acc;
 8002fa6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8002faa:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002fae:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002fb2:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002fbc:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8002fc0:	685c      	ldr	r4, [r3, #4]
 8002fc2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002fc6:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8002fca:	6819      	ldr	r1, [r3, #0]
 8002fcc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002fd0:	f5a3 732c 	sub.w	r3, r3, #688	; 0x2b0
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8002fdc:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8002fe0:	f5a1 7134 	sub.w	r1, r1, #720	; 0x2d0
 8002fe4:	600a      	str	r2, [r1, #0]
 8002fe6:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002fea:	f5a2 7234 	sub.w	r2, r2, #720	; 0x2d0
 8002fee:	6053      	str	r3, [r2, #4]
  return(llr.w64);
 8002ff0:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8002ff4:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002ff8:	e9c1 2300 	strd	r2, r3, [r1]

      /* Decrement the loop counter */
      k--;
 8002ffc:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8003000:	3b01      	subs	r3, #1
 8003002:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
    while (k > 0U)
 8003006:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 800300a:	2b00      	cmp	r3, #0
 800300c:	d19f      	bne.n	8002f4e <arm_conv_q15+0x1b68>
    }

    /* Store the result in the accumulator in the destination buffer. */
    *pOut++ = (q15_t) (__SSAT((sum >> 15), 16));
 800300e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8003012:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	0bc2      	lsrs	r2, r0, #15
 8003020:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8003024:	13cb      	asrs	r3, r1, #15
 8003026:	4613      	mov	r3, r2
 8003028:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800302c:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8003030:	f303 030f 	ssat	r3, #16, r3
 8003034:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 8003038:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 800303c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003040:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	1c99      	adds	r1, r3, #2
 8003048:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800304c:	f5a2 722f 	sub.w	r2, r2, #700	; 0x2bc
 8003050:	6011      	str	r1, [r2, #0]
 8003052:	b202      	sxth	r2, r0
 8003054:	801a      	strh	r2, [r3, #0]

    /* Update the inputA and inputB pointers for next MAC calculation */
    px = ++pSrc1;
 8003056:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800305a:	3302      	adds	r3, #2
 800305c:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8003060:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003064:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8003068:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 800306c:	601a      	str	r2, [r3, #0]
    py = pSrc2;
 800306e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003072:	f5a3 7331 	sub.w	r3, r3, #708	; 0x2c4
 8003076:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 800307a:	601a      	str	r2, [r3, #0]

    /* Decrement the loop counter */
    blockSize3--;
 800307c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8003080:	3b01      	subs	r3, #1
 8003082:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
  while (blockSize3 > 0U)
 8003086:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 800308a:	2b00      	cmp	r3, #0
 800308c:	f47f af52 	bne.w	8002f34 <arm_conv_q15+0x1b4e>
    pDst[i] = (q15_t) __SSAT((sum >> 15U), 16U);
  }

#endif /* #if (defined(ARM_MATH_CM7) || defined(ARM_MATH_CM4) || defined(ARM_MATH_CM3)) && !defined(UNALIGNED_SUPPORT_DISABLE) */

}
 8003090:	bf00      	nop
 8003092:	bf00      	nop
 8003094:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 8003098:	46bd      	mov	sp, r7
 800309a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800309e:	4770      	bx	lr

080030a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a6:	2003      	movs	r0, #3
 80030a8:	f001 f84e 	bl	8004148 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80030ac:	f002 f9ea 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_Init+0x68>)
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	0a1b      	lsrs	r3, r3, #8
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	4913      	ldr	r1, [pc, #76]	; (800310c <HAL_Init+0x6c>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	fa22 f303 	lsr.w	r3, r2, r3
 80030c8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80030ca:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <HAL_Init+0x68>)
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	4a0e      	ldr	r2, [pc, #56]	; (800310c <HAL_Init+0x6c>)
 80030d4:	5cd3      	ldrb	r3, [r2, r3]
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	4a0b      	ldr	r2, [pc, #44]	; (8003110 <HAL_Init+0x70>)
 80030e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030e4:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <HAL_Init+0x74>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030ea:	2000      	movs	r0, #0
 80030ec:	f000 f814 	bl	8003118 <HAL_InitTick>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e002      	b.n	8003100 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80030fa:	f7fd ff2d 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	58024400 	.word	0x58024400
 800310c:	08009fa0 	.word	0x08009fa0
 8003110:	2400017c 	.word	0x2400017c
 8003114:	24000178 	.word	0x24000178

08003118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003120:	4b15      	ldr	r3, [pc, #84]	; (8003178 <HAL_InitTick+0x60>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e021      	b.n	8003170 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800312c:	4b13      	ldr	r3, [pc, #76]	; (800317c <HAL_InitTick+0x64>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_InitTick+0x60>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	4619      	mov	r1, r3
 8003136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800313a:	fbb3 f3f1 	udiv	r3, r3, r1
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	4618      	mov	r0, r3
 8003144:	f001 f825 	bl	8004192 <HAL_SYSTICK_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e00e      	b.n	8003170 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b0f      	cmp	r3, #15
 8003156:	d80a      	bhi.n	800316e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003158:	2200      	movs	r2, #0
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	f000 fffd 	bl	800415e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003164:	4a06      	ldr	r2, [pc, #24]	; (8003180 <HAL_InitTick+0x68>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	24000184 	.word	0x24000184
 800317c:	24000178 	.word	0x24000178
 8003180:	24000180 	.word	0x24000180

08003184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_IncTick+0x20>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_IncTick+0x24>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4413      	add	r3, r2
 8003194:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <HAL_IncTick+0x24>)
 8003196:	6013      	str	r3, [r2, #0]
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	24000184 	.word	0x24000184
 80031a8:	2400031c 	.word	0x2400031c

080031ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return uwTick;
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <HAL_GetTick+0x14>)
 80031b2:	681b      	ldr	r3, [r3, #0]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	2400031c 	.word	0x2400031c

080031c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031cc:	f7ff ffee 	bl	80031ac <HAL_GetTick>
 80031d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d005      	beq.n	80031ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_Delay+0x44>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031ea:	bf00      	nop
 80031ec:	f7ff ffde 	bl	80031ac <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d8f7      	bhi.n	80031ec <HAL_Delay+0x28>
  {
  }
}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	24000184 	.word	0x24000184

0800320c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	43db      	mvns	r3, r3
 800321e:	401a      	ands	r2, r3
 8003220:	4904      	ldr	r1, [pc, #16]	; (8003234 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	58000400 	.word	0x58000400

08003238 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	609a      	str	r2, [r3, #8]
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 031f 	and.w	r3, r3, #31
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	4b04      	ldr	r3, [pc, #16]	; (80032dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6093      	str	r3, [r2, #8]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	5fffffc0 	.word	0x5fffffc0

080032e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f4:	d101      	bne.n	80032fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	4b05      	ldr	r3, [pc, #20]	; (800332c <LL_ADC_EnableInternalRegulator+0x24>)
 8003316:	4013      	ands	r3, r2
 8003318:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	6fffffc0 	.word	0x6fffffc0

08003330 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003344:	d101      	bne.n	800334a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <LL_ADC_Enable+0x24>)
 8003366:	4013      	ands	r3, r2
 8003368:	f043 0201 	orr.w	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	7fffffc0 	.word	0x7fffffc0

08003380 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <LL_ADC_Disable+0x24>)
 800338e:	4013      	ands	r3, r2
 8003390:	f043 0202 	orr.w	r2, r3, #2
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	7fffffc0 	.word	0x7fffffc0

080033a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <LL_ADC_IsEnabled+0x18>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <LL_ADC_IsEnabled+0x1a>
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d101      	bne.n	80033e6 <LL_ADC_IsDisableOngoing+0x18>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <LL_ADC_IsDisableOngoing+0x1a>
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	4b05      	ldr	r3, [pc, #20]	; (8003418 <LL_ADC_REG_StartConversion+0x24>)
 8003402:	4013      	ands	r3, r2
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	7fffffc0 	.word	0x7fffffc0

0800341c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	4b05      	ldr	r3, [pc, #20]	; (8003440 <LL_ADC_REG_StopConversion+0x24>)
 800342a:	4013      	ands	r3, r2
 800342c:	f043 0210 	orr.w	r2, r3, #16
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	7fffffc0 	.word	0x7fffffc0

08003444 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b04      	cmp	r3, #4
 8003456:	d101      	bne.n	800345c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <LL_ADC_INJ_StopConversion+0x24>)
 800347a:	4013      	ands	r3, r2
 800347c:	f043 0220 	orr.w	r2, r3, #32
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	7fffffc0 	.word	0x7fffffc0

08003494 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d101      	bne.n	80034ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034bc:	b590      	push	{r4, r7, lr}
 80034be:	b089      	sub	sp, #36	; 0x24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e138      	b.n	8003748 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7fd f8c1 	bl	800066c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff feef 	bl	80032e0 <LL_ADC_IsDeepPowerDownEnabled>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d004      	beq.n	8003512 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fed5 	bl	80032bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff ff0a 	bl	8003330 <LL_ADC_IsInternalRegulatorEnabled>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d114      	bne.n	800354c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff feee 	bl	8003308 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800352c:	4b88      	ldr	r3, [pc, #544]	; (8003750 <HAL_ADC_Init+0x294>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	099b      	lsrs	r3, r3, #6
 8003532:	4a88      	ldr	r2, [pc, #544]	; (8003754 <HAL_ADC_Init+0x298>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	099b      	lsrs	r3, r3, #6
 800353a:	3301      	adds	r3, #1
 800353c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800353e:	e002      	b.n	8003546 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	3b01      	subs	r3, #1
 8003544:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f9      	bne.n	8003540 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff feed 	bl	8003330 <LL_ADC_IsInternalRegulatorEnabled>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10d      	bne.n	8003578 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	f043 0210 	orr.w	r2, r3, #16
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff61 	bl	8003444 <LL_ADC_REG_IsConversionOngoing>
 8003582:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	f040 80d2 	bne.w	8003736 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f040 80ce 	bne.w	8003736 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80035a2:	f043 0202 	orr.w	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fefa 	bl	80033a8 <LL_ADC_IsEnabled>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d110      	bne.n	80035dc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035ba:	4867      	ldr	r0, [pc, #412]	; (8003758 <HAL_ADC_Init+0x29c>)
 80035bc:	f7ff fef4 	bl	80033a8 <LL_ADC_IsEnabled>
 80035c0:	4604      	mov	r4, r0
 80035c2:	4866      	ldr	r0, [pc, #408]	; (800375c <HAL_ADC_Init+0x2a0>)
 80035c4:	f7ff fef0 	bl	80033a8 <LL_ADC_IsEnabled>
 80035c8:	4603      	mov	r3, r0
 80035ca:	4323      	orrs	r3, r4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4619      	mov	r1, r3
 80035d6:	4862      	ldr	r0, [pc, #392]	; (8003760 <HAL_ADC_Init+0x2a4>)
 80035d8:	f7ff fe2e 	bl	8003238 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	7d5b      	ldrb	r3, [r3, #21]
 80035e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035e6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80035ec:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7f1b      	ldrb	r3, [r3, #28]
 80035f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	7f1b      	ldrb	r3, [r3, #28]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d106      	bne.n	800360e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	3b01      	subs	r3, #1
 8003606:	045b      	lsls	r3, r3, #17
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003622:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	4b4c      	ldr	r3, [pc, #304]	; (8003764 <HAL_ADC_Init+0x2a8>)
 8003632:	4013      	ands	r3, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	69b9      	ldr	r1, [r7, #24]
 800363a:	430b      	orrs	r3, r1
 800363c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fefe 	bl	8003444 <LL_ADC_REG_IsConversionOngoing>
 8003648:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff ff20 	bl	8003494 <LL_ADC_INJ_IsConversionOngoing>
 8003654:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d14a      	bne.n	80036f2 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d147      	bne.n	80036f2 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	7d1b      	ldrb	r3, [r3, #20]
 8003666:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	4b3c      	ldr	r3, [pc, #240]	; (8003768 <HAL_ADC_Init+0x2ac>)
 8003678:	4013      	ands	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	69b9      	ldr	r1, [r7, #24]
 8003680:	430b      	orrs	r3, r1
 8003682:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800368a:	2b01      	cmp	r3, #1
 800368c:	d11b      	bne.n	80036c6 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	4b34      	ldr	r3, [pc, #208]	; (800376c <HAL_ADC_Init+0x2b0>)
 800369c:	4013      	ands	r3, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036a2:	3a01      	subs	r2, #1
 80036a4:	0411      	lsls	r1, r2, #16
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036aa:	4311      	orrs	r1, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80036b0:	4311      	orrs	r1, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036b6:	430a      	orrs	r2, r1
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	611a      	str	r2, [r3, #16]
 80036c4:	e007      	b.n	80036d6 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fbab 	bl	8003e48 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10c      	bne.n	8003714 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	f023 010f 	bic.w	r1, r3, #15
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	1e5a      	subs	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
 8003712:	e007      	b.n	8003724 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 020f 	bic.w	r2, r2, #15
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	f023 0303 	bic.w	r3, r3, #3
 800372c:	f043 0201 	orr.w	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
 8003734:	e007      	b.n	8003746 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	f043 0210 	orr.w	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003746:	7ffb      	ldrb	r3, [r7, #31]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3724      	adds	r7, #36	; 0x24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd90      	pop	{r4, r7, pc}
 8003750:	24000178 	.word	0x24000178
 8003754:	053e2d63 	.word	0x053e2d63
 8003758:	40022000 	.word	0x40022000
 800375c:	40022100 	.word	0x40022100
 8003760:	40022300 	.word	0x40022300
 8003764:	fff0c003 	.word	0xfff0c003
 8003768:	ffffbffc 	.word	0xffffbffc
 800376c:	fc00f81e 	.word	0xfc00f81e

08003770 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003778:	4856      	ldr	r0, [pc, #344]	; (80038d4 <HAL_ADC_Start+0x164>)
 800377a:	f7ff fd83 	bl	8003284 <LL_ADC_GetMultimode>
 800377e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fe5d 	bl	8003444 <LL_ADC_REG_IsConversionOngoing>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	f040 809a 	bne.w	80038c6 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_ADC_Start+0x30>
 800379c:	2302      	movs	r3, #2
 800379e:	e095      	b.n	80038cc <HAL_ADC_Start+0x15c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fa71 	bl	8003c90 <ADC_Enable>
 80037ae:	4603      	mov	r3, r0
 80037b0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f040 8081 	bne.w	80038bc <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037be:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <HAL_ADC_Start+0x168>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a43      	ldr	r2, [pc, #268]	; (80038dc <HAL_ADC_Start+0x16c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d002      	beq.n	80037da <HAL_ADC_Start+0x6a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	e000      	b.n	80037dc <HAL_ADC_Start+0x6c>
 80037da:	4b41      	ldr	r3, [pc, #260]	; (80038e0 <HAL_ADC_Start+0x170>)
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d002      	beq.n	80037ea <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d105      	bne.n	80037f6 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003802:	d106      	bne.n	8003812 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	f023 0206 	bic.w	r2, r3, #6
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	659a      	str	r2, [r3, #88]	; 0x58
 8003810:	e002      	b.n	8003818 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	221c      	movs	r2, #28
 800381e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a2b      	ldr	r2, [pc, #172]	; (80038dc <HAL_ADC_Start+0x16c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d002      	beq.n	8003838 <HAL_ADC_Start+0xc8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	e000      	b.n	800383a <HAL_ADC_Start+0xca>
 8003838:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <HAL_ADC_Start+0x170>)
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	4293      	cmp	r3, r2
 8003840:	d008      	beq.n	8003854 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b05      	cmp	r3, #5
 800384c:	d002      	beq.n	8003854 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b09      	cmp	r3, #9
 8003852:	d114      	bne.n	800387e <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800386a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fdbc 	bl	80033f4 <LL_ADC_REG_StartConversion>
 800387c:	e025      	b.n	80038ca <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a13      	ldr	r2, [pc, #76]	; (80038dc <HAL_ADC_Start+0x16c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d002      	beq.n	800389a <HAL_ADC_Start+0x12a>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	e000      	b.n	800389c <HAL_ADC_Start+0x12c>
 800389a:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_ADC_Start+0x170>)
 800389c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00f      	beq.n	80038ca <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
 80038ba:	e006      	b.n	80038ca <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80038c4:	e001      	b.n	80038ca <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
 80038c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40022300 	.word	0x40022300
 80038d8:	fffff0fe 	.word	0xfffff0fe
 80038dc:	40022100 	.word	0x40022100
 80038e0:	40022000 	.word	0x40022000

080038e4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_Stop+0x16>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e021      	b.n	800393e <HAL_ADC_Stop+0x5a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003902:	2103      	movs	r1, #3
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f907 	bl	8003b18 <ADC_ConversionStop>
 800390a:	4603      	mov	r3, r0
 800390c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10f      	bne.n	8003934 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fa37 	bl	8003d88 <ADC_Disable>
 800391a:	4603      	mov	r3, r0
 800391c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d107      	bne.n	8003934 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <HAL_ADC_Stop+0x64>)
 800392a:	4013      	ands	r3, r2
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	ffffeefe 	.word	0xffffeefe

0800394c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003956:	4866      	ldr	r0, [pc, #408]	; (8003af0 <HAL_ADC_PollForConversion+0x1a4>)
 8003958:	f7ff fc94 	bl	8003284 <LL_ADC_GetMultimode>
 800395c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b08      	cmp	r3, #8
 8003964:	d102      	bne.n	800396c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003966:	2308      	movs	r3, #8
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	e02a      	b.n	80039c2 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b05      	cmp	r3, #5
 8003976:	d002      	beq.n	800397e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2b09      	cmp	r3, #9
 800397c:	d111      	bne.n	80039a2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d007      	beq.n	800399c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003990:	f043 0220 	orr.w	r2, r3, #32
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0a4      	b.n	8003ae6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800399c:	2304      	movs	r3, #4
 800399e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80039a0:	e00f      	b.n	80039c2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80039a2:	4853      	ldr	r0, [pc, #332]	; (8003af0 <HAL_ADC_PollForConversion+0x1a4>)
 80039a4:	f7ff fc7c 	bl	80032a0 <LL_ADC_GetMultiDMATransfer>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e093      	b.n	8003ae6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80039be:	2304      	movs	r3, #4
 80039c0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80039c2:	f7ff fbf3 	bl	80031ac <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039c8:	e021      	b.n	8003a0e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d0:	d01d      	beq.n	8003a0e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80039d2:	f7ff fbeb 	bl	80031ac <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d302      	bcc.n	80039e8 <HAL_ADC_PollForConversion+0x9c>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d112      	bne.n	8003a0e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10b      	bne.n	8003a0e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f043 0204 	orr.w	r2, r3, #4
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e06b      	b.n	8003ae6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0d6      	beq.n	80039ca <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff fc16 	bl	800325e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01c      	beq.n	8003a72 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	7d5b      	ldrb	r3, [r3, #21]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d118      	bne.n	8003a72 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d111      	bne.n	8003a72 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d105      	bne.n	8003a72 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	f043 0201 	orr.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <HAL_ADC_PollForConversion+0x1a8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d002      	beq.n	8003a82 <HAL_ADC_PollForConversion+0x136>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	e000      	b.n	8003a84 <HAL_ADC_PollForConversion+0x138>
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <HAL_ADC_PollForConversion+0x1ac>)
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d008      	beq.n	8003a9e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	d002      	beq.n	8003a9e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b09      	cmp	r3, #9
 8003a9c:	d104      	bne.n	8003aa8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	e00c      	b.n	8003ac2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a11      	ldr	r2, [pc, #68]	; (8003af4 <HAL_ADC_PollForConversion+0x1a8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d002      	beq.n	8003ab8 <HAL_ADC_PollForConversion+0x16c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	e000      	b.n	8003aba <HAL_ADC_PollForConversion+0x16e>
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <HAL_ADC_PollForConversion+0x1ac>)
 8003aba:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d104      	bne.n	8003ad2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2208      	movs	r2, #8
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e008      	b.n	8003ae4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d103      	bne.n	8003ae4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	220c      	movs	r2, #12
 8003ae2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40022300 	.word	0x40022300
 8003af4:	40022100 	.word	0x40022100
 8003af8:	40022000 	.word	0x40022000

08003afc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fc88 	bl	8003444 <LL_ADC_REG_IsConversionOngoing>
 8003b34:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fcaa 	bl	8003494 <LL_ADC_INJ_IsConversionOngoing>
 8003b40:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d103      	bne.n	8003b50 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8098 	beq.w	8003c80 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d02a      	beq.n	8003bb4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	7d5b      	ldrb	r3, [r3, #21]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d126      	bne.n	8003bb4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	7d1b      	ldrb	r3, [r3, #20]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d122      	bne.n	8003bb4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003b72:	e014      	b.n	8003b9e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	4a45      	ldr	r2, [pc, #276]	; (8003c8c <ADC_ConversionStop+0x174>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d90d      	bls.n	8003b98 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	f043 0210 	orr.w	r2, r3, #16
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e074      	b.n	8003c82 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	d1e3      	bne.n	8003b74 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2240      	movs	r2, #64	; 0x40
 8003bb2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d014      	beq.n	8003be4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff fc40 	bl	8003444 <LL_ADC_REG_IsConversionOngoing>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00c      	beq.n	8003be4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fbfd 	bl	80033ce <LL_ADC_IsDisableOngoing>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d104      	bne.n	8003be4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff fc1c 	bl	800341c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d014      	beq.n	8003c14 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff fc50 	bl	8003494 <LL_ADC_INJ_IsConversionOngoing>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00c      	beq.n	8003c14 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fbe5 	bl	80033ce <LL_ADC_IsDisableOngoing>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d104      	bne.n	8003c14 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff fc2c 	bl	800346c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d005      	beq.n	8003c26 <ADC_ConversionStop+0x10e>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d105      	bne.n	8003c2c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003c20:	230c      	movs	r3, #12
 8003c22:	617b      	str	r3, [r7, #20]
        break;
 8003c24:	e005      	b.n	8003c32 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003c26:	2308      	movs	r3, #8
 8003c28:	617b      	str	r3, [r7, #20]
        break;
 8003c2a:	e002      	b.n	8003c32 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	617b      	str	r3, [r7, #20]
        break;
 8003c30:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003c32:	f7ff fabb 	bl	80031ac <HAL_GetTick>
 8003c36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c38:	e01b      	b.n	8003c72 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c3a:	f7ff fab7 	bl	80031ac <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d914      	bls.n	8003c72 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	4013      	ands	r3, r2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00d      	beq.n	8003c72 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	f043 0210 	orr.w	r2, r3, #16
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e007      	b.n	8003c82 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1dc      	bne.n	8003c3a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	000cdbff 	.word	0x000cdbff

08003c90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fb83 	bl	80033a8 <LL_ADC_IsEnabled>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d161      	bne.n	8003d6c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	4b32      	ldr	r3, [pc, #200]	; (8003d78 <ADC_Enable+0xe8>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00d      	beq.n	8003cd2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cba:	f043 0210 	orr.w	r2, r3, #16
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc6:	f043 0201 	orr.w	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e04d      	b.n	8003d6e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fb3e 	bl	8003358 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003cdc:	f7ff fa66 	bl	80031ac <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ce2:	4826      	ldr	r0, [pc, #152]	; (8003d7c <ADC_Enable+0xec>)
 8003ce4:	f7ff face 	bl	8003284 <LL_ADC_GetMultimode>
 8003ce8:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a24      	ldr	r2, [pc, #144]	; (8003d80 <ADC_Enable+0xf0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d002      	beq.n	8003cfa <ADC_Enable+0x6a>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	e000      	b.n	8003cfc <ADC_Enable+0x6c>
 8003cfa:	4b22      	ldr	r3, [pc, #136]	; (8003d84 <ADC_Enable+0xf4>)
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d02c      	beq.n	8003d5e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d130      	bne.n	8003d6c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d0a:	e028      	b.n	8003d5e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fb49 	bl	80033a8 <LL_ADC_IsEnabled>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fb19 	bl	8003358 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d26:	f7ff fa41 	bl	80031ac <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d914      	bls.n	8003d5e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d00d      	beq.n	8003d5e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	f043 0210 	orr.w	r2, r3, #16
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d52:	f043 0201 	orr.w	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e007      	b.n	8003d6e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d1cf      	bne.n	8003d0c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	8000003f 	.word	0x8000003f
 8003d7c:	40022300 	.word	0x40022300
 8003d80:	40022100 	.word	0x40022100
 8003d84:	40022000 	.word	0x40022000

08003d88 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fb1a 	bl	80033ce <LL_ADC_IsDisableOngoing>
 8003d9a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fb01 	bl	80033a8 <LL_ADC_IsEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d047      	beq.n	8003e3c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d144      	bne.n	8003e3c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 030d 	and.w	r3, r3, #13
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d10c      	bne.n	8003dda <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fadb 	bl	8003380 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2203      	movs	r2, #3
 8003dd0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003dd2:	f7ff f9eb 	bl	80031ac <HAL_GetTick>
 8003dd6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dd8:	e029      	b.n	8003e2e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	f043 0210 	orr.w	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	f043 0201 	orr.w	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e023      	b.n	8003e3e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003df6:	f7ff f9d9 	bl	80031ac <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d914      	bls.n	8003e2e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00d      	beq.n	8003e2e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	f043 0210 	orr.w	r2, r3, #16
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	f043 0201 	orr.w	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e007      	b.n	8003e3e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1dc      	bne.n	8003df6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e50:	4b60      	ldr	r3, [pc, #384]	; (8003fd4 <ADC_ConfigureBoostMode+0x18c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01c      	beq.n	8003e96 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003e5c:	f001 fc8c 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 8003e60:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e6a:	d010      	beq.n	8003e8e <ADC_ConfigureBoostMode+0x46>
 8003e6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e70:	d873      	bhi.n	8003f5a <ADC_ConfigureBoostMode+0x112>
 8003e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e76:	d002      	beq.n	8003e7e <ADC_ConfigureBoostMode+0x36>
 8003e78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e7c:	d16d      	bne.n	8003f5a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	0c1b      	lsrs	r3, r3, #16
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8a:	60fb      	str	r3, [r7, #12]
        break;
 8003e8c:	e068      	b.n	8003f60 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	60fb      	str	r3, [r7, #12]
        break;
 8003e94:	e064      	b.n	8003f60 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003e96:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003e9a:	f04f 0100 	mov.w	r1, #0
 8003e9e:	f002 fe85 	bl	8006bac <HAL_RCCEx_GetPeriphCLKFreq>
 8003ea2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003eac:	d051      	beq.n	8003f52 <ADC_ConfigureBoostMode+0x10a>
 8003eae:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003eb2:	d854      	bhi.n	8003f5e <ADC_ConfigureBoostMode+0x116>
 8003eb4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003eb8:	d047      	beq.n	8003f4a <ADC_ConfigureBoostMode+0x102>
 8003eba:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ebe:	d84e      	bhi.n	8003f5e <ADC_ConfigureBoostMode+0x116>
 8003ec0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ec4:	d03d      	beq.n	8003f42 <ADC_ConfigureBoostMode+0xfa>
 8003ec6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003eca:	d848      	bhi.n	8003f5e <ADC_ConfigureBoostMode+0x116>
 8003ecc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ed0:	d033      	beq.n	8003f3a <ADC_ConfigureBoostMode+0xf2>
 8003ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ed6:	d842      	bhi.n	8003f5e <ADC_ConfigureBoostMode+0x116>
 8003ed8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003edc:	d029      	beq.n	8003f32 <ADC_ConfigureBoostMode+0xea>
 8003ede:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003ee2:	d83c      	bhi.n	8003f5e <ADC_ConfigureBoostMode+0x116>
 8003ee4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003ee8:	d01a      	beq.n	8003f20 <ADC_ConfigureBoostMode+0xd8>
 8003eea:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003eee:	d836      	bhi.n	8003f5e <ADC_ConfigureBoostMode+0x116>
 8003ef0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003ef4:	d014      	beq.n	8003f20 <ADC_ConfigureBoostMode+0xd8>
 8003ef6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003efa:	d830      	bhi.n	8003f5e <ADC_ConfigureBoostMode+0x116>
 8003efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f00:	d00e      	beq.n	8003f20 <ADC_ConfigureBoostMode+0xd8>
 8003f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f06:	d82a      	bhi.n	8003f5e <ADC_ConfigureBoostMode+0x116>
 8003f08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f0c:	d008      	beq.n	8003f20 <ADC_ConfigureBoostMode+0xd8>
 8003f0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f12:	d824      	bhi.n	8003f5e <ADC_ConfigureBoostMode+0x116>
 8003f14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f18:	d002      	beq.n	8003f20 <ADC_ConfigureBoostMode+0xd8>
 8003f1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f1e:	d11e      	bne.n	8003f5e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	0c9b      	lsrs	r3, r3, #18
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	60fb      	str	r3, [r7, #12]
        break;
 8003f30:	e016      	b.n	8003f60 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	60fb      	str	r3, [r7, #12]
        break;
 8003f38:	e012      	b.n	8003f60 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	60fb      	str	r3, [r7, #12]
        break;
 8003f40:	e00e      	b.n	8003f60 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	099b      	lsrs	r3, r3, #6
 8003f46:	60fb      	str	r3, [r7, #12]
        break;
 8003f48:	e00a      	b.n	8003f60 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	09db      	lsrs	r3, r3, #7
 8003f4e:	60fb      	str	r3, [r7, #12]
        break;
 8003f50:	e006      	b.n	8003f60 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	60fb      	str	r3, [r7, #12]
        break;
 8003f58:	e002      	b.n	8003f60 <ADC_ConfigureBoostMode+0x118>
        break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8003f5e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4a1b      	ldr	r2, [pc, #108]	; (8003fd8 <ADC_ConfigureBoostMode+0x190>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d808      	bhi.n	8003f80 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f7c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003f7e:	e025      	b.n	8003fcc <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a16      	ldr	r2, [pc, #88]	; (8003fdc <ADC_ConfigureBoostMode+0x194>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d80a      	bhi.n	8003f9e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f9a:	609a      	str	r2, [r3, #8]
}
 8003f9c:	e016      	b.n	8003fcc <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4a0f      	ldr	r2, [pc, #60]	; (8003fe0 <ADC_ConfigureBoostMode+0x198>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d80a      	bhi.n	8003fbc <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb8:	609a      	str	r2, [r3, #8]
}
 8003fba:	e007      	b.n	8003fcc <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003fca:	609a      	str	r2, [r3, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40022300 	.word	0x40022300
 8003fd8:	005f5e10 	.word	0x005f5e10
 8003fdc:	00bebc20 	.word	0x00bebc20
 8003fe0:	017d7840 	.word	0x017d7840

08003fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <__NVIC_SetPriorityGrouping+0x40>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004000:	4013      	ands	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <__NVIC_SetPriorityGrouping+0x44>)
 800400e:	4313      	orrs	r3, r2
 8004010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004012:	4a04      	ldr	r2, [pc, #16]	; (8004024 <__NVIC_SetPriorityGrouping+0x40>)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	60d3      	str	r3, [r2, #12]
}
 8004018:	bf00      	nop
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	e000ed00 	.word	0xe000ed00
 8004028:	05fa0000 	.word	0x05fa0000

0800402c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <__NVIC_GetPriorityGrouping+0x18>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	0a1b      	lsrs	r3, r3, #8
 8004036:	f003 0307 	and.w	r3, r3, #7
}
 800403a:	4618      	mov	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000ed00 	.word	0xe000ed00

08004048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	6039      	str	r1, [r7, #0]
 8004052:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004058:	2b00      	cmp	r3, #0
 800405a:	db0a      	blt.n	8004072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	b2da      	uxtb	r2, r3
 8004060:	490c      	ldr	r1, [pc, #48]	; (8004094 <__NVIC_SetPriority+0x4c>)
 8004062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004066:	0112      	lsls	r2, r2, #4
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	440b      	add	r3, r1
 800406c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004070:	e00a      	b.n	8004088 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	b2da      	uxtb	r2, r3
 8004076:	4908      	ldr	r1, [pc, #32]	; (8004098 <__NVIC_SetPriority+0x50>)
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	3b04      	subs	r3, #4
 8004080:	0112      	lsls	r2, r2, #4
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	440b      	add	r3, r1
 8004086:	761a      	strb	r2, [r3, #24]
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	e000e100 	.word	0xe000e100
 8004098:	e000ed00 	.word	0xe000ed00

0800409c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800409c:	b480      	push	{r7}
 800409e:	b089      	sub	sp, #36	; 0x24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f1c3 0307 	rsb	r3, r3, #7
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	bf28      	it	cs
 80040ba:	2304      	movcs	r3, #4
 80040bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	3304      	adds	r3, #4
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d902      	bls.n	80040cc <NVIC_EncodePriority+0x30>
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	3b03      	subs	r3, #3
 80040ca:	e000      	b.n	80040ce <NVIC_EncodePriority+0x32>
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d0:	f04f 32ff 	mov.w	r2, #4294967295
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43da      	mvns	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	401a      	ands	r2, r3
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040e4:	f04f 31ff 	mov.w	r1, #4294967295
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	fa01 f303 	lsl.w	r3, r1, r3
 80040ee:	43d9      	mvns	r1, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f4:	4313      	orrs	r3, r2
         );
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3724      	adds	r7, #36	; 0x24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3b01      	subs	r3, #1
 8004110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004114:	d301      	bcc.n	800411a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004116:	2301      	movs	r3, #1
 8004118:	e00f      	b.n	800413a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800411a:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <SysTick_Config+0x40>)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3b01      	subs	r3, #1
 8004120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004122:	210f      	movs	r1, #15
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	f7ff ff8e 	bl	8004048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <SysTick_Config+0x40>)
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004132:	4b04      	ldr	r3, [pc, #16]	; (8004144 <SysTick_Config+0x40>)
 8004134:	2207      	movs	r2, #7
 8004136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	e000e010 	.word	0xe000e010

08004148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff ff47 	bl	8003fe4 <__NVIC_SetPriorityGrouping>
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b086      	sub	sp, #24
 8004162:	af00      	add	r7, sp, #0
 8004164:	4603      	mov	r3, r0
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800416c:	f7ff ff5e 	bl	800402c <__NVIC_GetPriorityGrouping>
 8004170:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	6978      	ldr	r0, [r7, #20]
 8004178:	f7ff ff90 	bl	800409c <NVIC_EncodePriority>
 800417c:	4602      	mov	r2, r0
 800417e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff ff5f 	bl	8004048 <__NVIC_SetPriority>
}
 800418a:	bf00      	nop
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff ffb2 	bl	8004104 <SysTick_Config>
 80041a0:	4603      	mov	r3, r0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e014      	b.n	80041e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	791b      	ldrb	r3, [r3, #4]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d105      	bne.n	80041d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7fc fadf 	bl	8000790 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2202      	movs	r2, #2
 80041d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	795b      	ldrb	r3, [r3, #5]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_DAC_ConfigChannel+0x18>
 8004204:	2302      	movs	r3, #2
 8004206:	e12a      	b.n	800445e <HAL_DAC_ConfigChannel+0x26e>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2202      	movs	r2, #2
 8004212:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b04      	cmp	r3, #4
 800421a:	f040 8081 	bne.w	8004320 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800421e:	f7fe ffc5 	bl	80031ac <HAL_GetTick>
 8004222:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d140      	bne.n	80042ac <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800422a:	e018      	b.n	800425e <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800422c:	f7fe ffbe 	bl	80031ac <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d911      	bls.n	800425e <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004240:	4b89      	ldr	r3, [pc, #548]	; (8004468 <HAL_DAC_ConfigChannel+0x278>)
 8004242:	4013      	ands	r3, r2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f043 0208 	orr.w	r2, r3, #8
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2203      	movs	r2, #3
 8004258:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e0ff      	b.n	800445e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004264:	4b80      	ldr	r3, [pc, #512]	; (8004468 <HAL_DAC_ConfigChannel+0x278>)
 8004266:	4013      	ands	r3, r2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1df      	bne.n	800422c <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 800426c:	2001      	movs	r0, #1
 800426e:	f7fe ffa9 	bl	80031c4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	6992      	ldr	r2, [r2, #24]
 800427a:	641a      	str	r2, [r3, #64]	; 0x40
 800427c:	e023      	b.n	80042c6 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800427e:	f7fe ff95 	bl	80031ac <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	d90f      	bls.n	80042ac <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004292:	2b00      	cmp	r3, #0
 8004294:	da0a      	bge.n	80042ac <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f043 0208 	orr.w	r2, r3, #8
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2203      	movs	r2, #3
 80042a6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e0d8      	b.n	800445e <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	dbe3      	blt.n	800427e <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80042b6:	2001      	movs	r0, #1
 80042b8:	f7fe ff84 	bl	80031c4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	6992      	ldr	r2, [r2, #24]
 80042c4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80042d6:	fa01 f303 	lsl.w	r3, r1, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	ea02 0103 	and.w	r1, r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	409a      	lsls	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	21ff      	movs	r1, #255	; 0xff
 8004302:	fa01 f303 	lsl.w	r3, r1, r3
 8004306:	43db      	mvns	r3, r3
 8004308:	ea02 0103 	and.w	r1, r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	409a      	lsls	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d11d      	bne.n	8004364 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	221f      	movs	r2, #31
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4013      	ands	r3, r2
 8004342:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2207      	movs	r2, #7
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	43db      	mvns	r3, r3
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4013      	ands	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d102      	bne.n	800438e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	e00f      	b.n	80043ae <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d102      	bne.n	800439c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004396:	2301      	movs	r3, #1
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	e008      	b.n	80043ae <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d102      	bne.n	80043aa <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80043a4:	2301      	movs	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	e001      	b.n	80043ae <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	69fa      	ldr	r2, [r7, #28]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6819      	ldr	r1, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43da      	mvns	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	400a      	ands	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4013      	ands	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6819      	ldr	r1, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f003 0310 	and.w	r3, r3, #16
 8004440:	22c0      	movs	r2, #192	; 0xc0
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43da      	mvns	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	400a      	ands	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2201      	movs	r2, #1
 8004454:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3720      	adds	r7, #32
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20008000 	.word	0x20008000

0800446c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800446c:	b480      	push	{r7}
 800446e:	b089      	sub	sp, #36	; 0x24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800447a:	4b89      	ldr	r3, [pc, #548]	; (80046a0 <HAL_GPIO_Init+0x234>)
 800447c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800447e:	e194      	b.n	80047aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	2101      	movs	r1, #1
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	fa01 f303 	lsl.w	r3, r1, r3
 800448c:	4013      	ands	r3, r2
 800448e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 8186 	beq.w	80047a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d005      	beq.n	80044b0 <HAL_GPIO_Init+0x44>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d130      	bne.n	8004512 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	2203      	movs	r2, #3
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	43db      	mvns	r3, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044e6:	2201      	movs	r2, #1
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	f003 0201 	and.w	r2, r3, #1
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4313      	orrs	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	2b03      	cmp	r3, #3
 800451c:	d017      	beq.n	800454e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	2203      	movs	r2, #3
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43db      	mvns	r3, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4013      	ands	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4313      	orrs	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d123      	bne.n	80045a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	08da      	lsrs	r2, r3, #3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3208      	adds	r2, #8
 8004562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	220f      	movs	r2, #15
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4313      	orrs	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	08da      	lsrs	r2, r3, #3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3208      	adds	r2, #8
 800459c:	69b9      	ldr	r1, [r7, #24]
 800459e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	2203      	movs	r2, #3
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f003 0203 	and.w	r2, r3, #3
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80e0 	beq.w	80047a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045e4:	4b2f      	ldr	r3, [pc, #188]	; (80046a4 <HAL_GPIO_Init+0x238>)
 80045e6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80045ea:	4a2e      	ldr	r2, [pc, #184]	; (80046a4 <HAL_GPIO_Init+0x238>)
 80045ec:	f043 0302 	orr.w	r3, r3, #2
 80045f0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80045f4:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_GPIO_Init+0x238>)
 80045f6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004602:	4a29      	ldr	r2, [pc, #164]	; (80046a8 <HAL_GPIO_Init+0x23c>)
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	089b      	lsrs	r3, r3, #2
 8004608:	3302      	adds	r3, #2
 800460a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800460e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	220f      	movs	r2, #15
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43db      	mvns	r3, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4013      	ands	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a20      	ldr	r2, [pc, #128]	; (80046ac <HAL_GPIO_Init+0x240>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d052      	beq.n	80046d4 <HAL_GPIO_Init+0x268>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1f      	ldr	r2, [pc, #124]	; (80046b0 <HAL_GPIO_Init+0x244>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d031      	beq.n	800469a <HAL_GPIO_Init+0x22e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <HAL_GPIO_Init+0x248>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d02b      	beq.n	8004696 <HAL_GPIO_Init+0x22a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <HAL_GPIO_Init+0x24c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d025      	beq.n	8004692 <HAL_GPIO_Init+0x226>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <HAL_GPIO_Init+0x250>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d01f      	beq.n	800468e <HAL_GPIO_Init+0x222>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1b      	ldr	r2, [pc, #108]	; (80046c0 <HAL_GPIO_Init+0x254>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d019      	beq.n	800468a <HAL_GPIO_Init+0x21e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a1a      	ldr	r2, [pc, #104]	; (80046c4 <HAL_GPIO_Init+0x258>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <HAL_GPIO_Init+0x21a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a19      	ldr	r2, [pc, #100]	; (80046c8 <HAL_GPIO_Init+0x25c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00d      	beq.n	8004682 <HAL_GPIO_Init+0x216>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a18      	ldr	r2, [pc, #96]	; (80046cc <HAL_GPIO_Init+0x260>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d007      	beq.n	800467e <HAL_GPIO_Init+0x212>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <HAL_GPIO_Init+0x264>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d101      	bne.n	800467a <HAL_GPIO_Init+0x20e>
 8004676:	2309      	movs	r3, #9
 8004678:	e02d      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 800467a:	230a      	movs	r3, #10
 800467c:	e02b      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 800467e:	2308      	movs	r3, #8
 8004680:	e029      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 8004682:	2307      	movs	r3, #7
 8004684:	e027      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 8004686:	2306      	movs	r3, #6
 8004688:	e025      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 800468a:	2305      	movs	r3, #5
 800468c:	e023      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 800468e:	2304      	movs	r3, #4
 8004690:	e021      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 8004692:	2303      	movs	r3, #3
 8004694:	e01f      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 8004696:	2302      	movs	r3, #2
 8004698:	e01d      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 800469a:	2301      	movs	r3, #1
 800469c:	e01b      	b.n	80046d6 <HAL_GPIO_Init+0x26a>
 800469e:	bf00      	nop
 80046a0:	58000080 	.word	0x58000080
 80046a4:	58024400 	.word	0x58024400
 80046a8:	58000400 	.word	0x58000400
 80046ac:	58020000 	.word	0x58020000
 80046b0:	58020400 	.word	0x58020400
 80046b4:	58020800 	.word	0x58020800
 80046b8:	58020c00 	.word	0x58020c00
 80046bc:	58021000 	.word	0x58021000
 80046c0:	58021400 	.word	0x58021400
 80046c4:	58021800 	.word	0x58021800
 80046c8:	58021c00 	.word	0x58021c00
 80046cc:	58022000 	.word	0x58022000
 80046d0:	58022400 	.word	0x58022400
 80046d4:	2300      	movs	r3, #0
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	f002 0203 	and.w	r2, r2, #3
 80046dc:	0092      	lsls	r2, r2, #2
 80046de:	4093      	lsls	r3, r2
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046e6:	4938      	ldr	r1, [pc, #224]	; (80047c8 <HAL_GPIO_Init+0x35c>)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	089b      	lsrs	r3, r3, #2
 80046ec:	3302      	adds	r3, #2
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	43db      	mvns	r3, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4013      	ands	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800471a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	43db      	mvns	r3, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4013      	ands	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	43db      	mvns	r3, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4013      	ands	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	3301      	adds	r3, #1
 80047a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f47f ae63 	bne.w	8004480 <HAL_GPIO_Init+0x14>
  }
}
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	3724      	adds	r7, #36	; 0x24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	58000400 	.word	0x58000400

080047cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	807b      	strh	r3, [r7, #2]
 80047d8:	4613      	mov	r3, r2
 80047da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047dc:	787b      	ldrb	r3, [r7, #1]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047e2:	887a      	ldrh	r2, [r7, #2]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80047e8:	e003      	b.n	80047f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80047ea:	887b      	ldrh	r3, [r7, #2]
 80047ec:	041a      	lsls	r2, r3, #16
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	619a      	str	r2, [r3, #24]
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004808:	4b29      	ldr	r3, [pc, #164]	; (80048b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	2b06      	cmp	r3, #6
 8004812:	d00a      	beq.n	800482a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004814:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	429a      	cmp	r2, r3
 8004820:	d001      	beq.n	8004826 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e040      	b.n	80048a8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	e03e      	b.n	80048a8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800482a:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004832:	491f      	ldr	r1, [pc, #124]	; (80048b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4313      	orrs	r3, r2
 8004838:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800483a:	f7fe fcb7 	bl	80031ac <HAL_GetTick>
 800483e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004840:	e009      	b.n	8004856 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004842:	f7fe fcb3 	bl	80031ac <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004850:	d901      	bls.n	8004856 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e028      	b.n	80048a8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004856:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800485e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004862:	d1ee      	bne.n	8004842 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b1e      	cmp	r3, #30
 8004868:	d008      	beq.n	800487c <HAL_PWREx_ConfigSupply+0x7c>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b2e      	cmp	r3, #46	; 0x2e
 800486e:	d005      	beq.n	800487c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b1d      	cmp	r3, #29
 8004874:	d002      	beq.n	800487c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b2d      	cmp	r3, #45	; 0x2d
 800487a:	d114      	bne.n	80048a6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800487c:	f7fe fc96 	bl	80031ac <HAL_GetTick>
 8004880:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004882:	e009      	b.n	8004898 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004884:	f7fe fc92 	bl	80031ac <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004892:	d901      	bls.n	8004898 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e007      	b.n	80048a8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a4:	d1ee      	bne.n	8004884 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	58024800 	.word	0x58024800

080048b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08c      	sub	sp, #48	; 0x30
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f000 bc1f 	b.w	8005106 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80b3 	beq.w	8004a3c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d6:	4b95      	ldr	r3, [pc, #596]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048e0:	4b92      	ldr	r3, [pc, #584]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d007      	beq.n	80048fc <HAL_RCC_OscConfig+0x48>
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ee:	2b18      	cmp	r3, #24
 80048f0:	d112      	bne.n	8004918 <HAL_RCC_OscConfig+0x64>
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d10d      	bne.n	8004918 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fc:	4b8b      	ldr	r3, [pc, #556]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8098 	beq.w	8004a3a <HAL_RCC_OscConfig+0x186>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f040 8093 	bne.w	8004a3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e3f6      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004920:	d106      	bne.n	8004930 <HAL_RCC_OscConfig+0x7c>
 8004922:	4b82      	ldr	r3, [pc, #520]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a81      	ldr	r2, [pc, #516]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e058      	b.n	80049e2 <HAL_RCC_OscConfig+0x12e>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d112      	bne.n	800495e <HAL_RCC_OscConfig+0xaa>
 8004938:	4b7c      	ldr	r3, [pc, #496]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a7b      	ldr	r2, [pc, #492]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 800493e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	4b79      	ldr	r3, [pc, #484]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a78      	ldr	r2, [pc, #480]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 800494a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	4b76      	ldr	r3, [pc, #472]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a75      	ldr	r2, [pc, #468]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800495a:	6013      	str	r3, [r2, #0]
 800495c:	e041      	b.n	80049e2 <HAL_RCC_OscConfig+0x12e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004966:	d112      	bne.n	800498e <HAL_RCC_OscConfig+0xda>
 8004968:	4b70      	ldr	r3, [pc, #448]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a6f      	ldr	r2, [pc, #444]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 800496e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4b6d      	ldr	r3, [pc, #436]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a6c      	ldr	r2, [pc, #432]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 800497a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	4b6a      	ldr	r3, [pc, #424]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a69      	ldr	r2, [pc, #420]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	e029      	b.n	80049e2 <HAL_RCC_OscConfig+0x12e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004996:	d112      	bne.n	80049be <HAL_RCC_OscConfig+0x10a>
 8004998:	4b64      	ldr	r3, [pc, #400]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a63      	ldr	r2, [pc, #396]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 800499e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	4b61      	ldr	r3, [pc, #388]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a60      	ldr	r2, [pc, #384]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 80049aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4b5e      	ldr	r3, [pc, #376]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a5d      	ldr	r2, [pc, #372]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 80049b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	e011      	b.n	80049e2 <HAL_RCC_OscConfig+0x12e>
 80049be:	4b5b      	ldr	r3, [pc, #364]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a5a      	ldr	r2, [pc, #360]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 80049c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	4b58      	ldr	r3, [pc, #352]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a57      	ldr	r2, [pc, #348]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 80049d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	4b55      	ldr	r3, [pc, #340]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a54      	ldr	r2, [pc, #336]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 80049dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80049e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d013      	beq.n	8004a12 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ea:	f7fe fbdf 	bl	80031ac <HAL_GetTick>
 80049ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f2:	f7fe fbdb 	bl	80031ac <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b64      	cmp	r3, #100	; 0x64
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e380      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a04:	4b49      	ldr	r3, [pc, #292]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0f0      	beq.n	80049f2 <HAL_RCC_OscConfig+0x13e>
 8004a10:	e014      	b.n	8004a3c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fe fbcb 	bl	80031ac <HAL_GetTick>
 8004a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a1a:	f7fe fbc7 	bl	80031ac <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b64      	cmp	r3, #100	; 0x64
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e36c      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a2c:	4b3f      	ldr	r3, [pc, #252]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f0      	bne.n	8004a1a <HAL_RCC_OscConfig+0x166>
 8004a38:	e000      	b.n	8004a3c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 808c 	beq.w	8004b62 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a4a:	4b38      	ldr	r3, [pc, #224]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a52:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a54:	4b35      	ldr	r3, [pc, #212]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a58:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_RCC_OscConfig+0x1bc>
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	2b18      	cmp	r3, #24
 8004a64:	d137      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x222>
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f003 0303 	and.w	r3, r3, #3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d132      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a70:	4b2e      	ldr	r3, [pc, #184]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_OscConfig+0x1d4>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e33e      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a88:	4b28      	ldr	r3, [pc, #160]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f023 0219 	bic.w	r2, r3, #25
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	4925      	ldr	r1, [pc, #148]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9a:	f7fe fb87 	bl	80031ac <HAL_GetTick>
 8004a9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa2:	f7fe fb83 	bl	80031ac <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e328      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ab4:	4b1d      	ldr	r3, [pc, #116]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	4b1a      	ldr	r3, [pc, #104]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	4917      	ldr	r1, [pc, #92]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ad4:	e045      	b.n	8004b62 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d028      	beq.n	8004b30 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ade:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f023 0219 	bic.w	r2, r3, #25
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	4910      	ldr	r1, [pc, #64]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fe fb5c 	bl	80031ac <HAL_GetTick>
 8004af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af8:	f7fe fb58 	bl	80031ac <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e2fd      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b0a:	4b08      	ldr	r3, [pc, #32]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b16:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	061b      	lsls	r3, r3, #24
 8004b24:	4901      	ldr	r1, [pc, #4]	; (8004b2c <HAL_RCC_OscConfig+0x278>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	604b      	str	r3, [r1, #4]
 8004b2a:	e01a      	b.n	8004b62 <HAL_RCC_OscConfig+0x2ae>
 8004b2c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b30:	4b97      	ldr	r3, [pc, #604]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a96      	ldr	r2, [pc, #600]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004b36:	f023 0301 	bic.w	r3, r3, #1
 8004b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3c:	f7fe fb36 	bl	80031ac <HAL_GetTick>
 8004b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b44:	f7fe fb32 	bl	80031ac <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e2d7      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b56:	4b8e      	ldr	r3, [pc, #568]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d06a      	beq.n	8004c44 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b6e:	4b88      	ldr	r3, [pc, #544]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b76:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b78:	4b85      	ldr	r3, [pc, #532]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d007      	beq.n	8004b94 <HAL_RCC_OscConfig+0x2e0>
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	2b18      	cmp	r3, #24
 8004b88:	d11b      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x30e>
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d116      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b94:	4b7e      	ldr	r3, [pc, #504]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_RCC_OscConfig+0x2f8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	2b80      	cmp	r3, #128	; 0x80
 8004ba6:	d001      	beq.n	8004bac <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e2ac      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bac:	4b78      	ldr	r3, [pc, #480]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	061b      	lsls	r3, r3, #24
 8004bba:	4975      	ldr	r1, [pc, #468]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bc0:	e040      	b.n	8004c44 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d023      	beq.n	8004c12 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004bca:	4b71      	ldr	r3, [pc, #452]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a70      	ldr	r2, [pc, #448]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd6:	f7fe fae9 	bl	80031ac <HAL_GetTick>
 8004bda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004bde:	f7fe fae5 	bl	80031ac <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e28a      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bf0:	4b67      	ldr	r3, [pc, #412]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bfc:	4b64      	ldr	r3, [pc, #400]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	061b      	lsls	r3, r3, #24
 8004c0a:	4961      	ldr	r1, [pc, #388]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60cb      	str	r3, [r1, #12]
 8004c10:	e018      	b.n	8004c44 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c12:	4b5f      	ldr	r3, [pc, #380]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a5e      	ldr	r2, [pc, #376]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1e:	f7fe fac5 	bl	80031ac <HAL_GetTick>
 8004c22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c26:	f7fe fac1 	bl	80031ac <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e266      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c38:	4b55      	ldr	r3, [pc, #340]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1f0      	bne.n	8004c26 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d036      	beq.n	8004cbe <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d019      	beq.n	8004c8c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c58:	4b4d      	ldr	r3, [pc, #308]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5c:	4a4c      	ldr	r2, [pc, #304]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c64:	f7fe faa2 	bl	80031ac <HAL_GetTick>
 8004c68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6c:	f7fe fa9e 	bl	80031ac <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e243      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c7e:	4b44      	ldr	r3, [pc, #272]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0f0      	beq.n	8004c6c <HAL_RCC_OscConfig+0x3b8>
 8004c8a:	e018      	b.n	8004cbe <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c8c:	4b40      	ldr	r3, [pc, #256]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c90:	4a3f      	ldr	r2, [pc, #252]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004c92:	f023 0301 	bic.w	r3, r3, #1
 8004c96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c98:	f7fe fa88 	bl	80031ac <HAL_GetTick>
 8004c9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca0:	f7fe fa84 	bl	80031ac <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e229      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cb2:	4b37      	ldr	r3, [pc, #220]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d036      	beq.n	8004d38 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d019      	beq.n	8004d06 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cd2:	4b2f      	ldr	r3, [pc, #188]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a2e      	ldr	r2, [pc, #184]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cde:	f7fe fa65 	bl	80031ac <HAL_GetTick>
 8004ce2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ce4:	e008      	b.n	8004cf8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ce6:	f7fe fa61 	bl	80031ac <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e206      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cf8:	4b25      	ldr	r3, [pc, #148]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x432>
 8004d04:	e018      	b.n	8004d38 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d06:	4b22      	ldr	r3, [pc, #136]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a21      	ldr	r2, [pc, #132]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d12:	f7fe fa4b 	bl	80031ac <HAL_GetTick>
 8004d16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d1a:	f7fe fa47 	bl	80031ac <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e1ec      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d2c:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f0      	bne.n	8004d1a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80af 	beq.w	8004ea4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d46:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <HAL_RCC_OscConfig+0x4e0>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a12      	ldr	r2, [pc, #72]	; (8004d94 <HAL_RCC_OscConfig+0x4e0>)
 8004d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d52:	f7fe fa2b 	bl	80031ac <HAL_GetTick>
 8004d56:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5a:	f7fe fa27 	bl	80031ac <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b64      	cmp	r3, #100	; 0x64
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e1cc      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d6c:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <HAL_RCC_OscConfig+0x4e0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d10b      	bne.n	8004d98 <HAL_RCC_OscConfig+0x4e4>
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d84:	4a02      	ldr	r2, [pc, #8]	; (8004d90 <HAL_RCC_OscConfig+0x4dc>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d8c:	e05b      	b.n	8004e46 <HAL_RCC_OscConfig+0x592>
 8004d8e:	bf00      	nop
 8004d90:	58024400 	.word	0x58024400
 8004d94:	58024800 	.word	0x58024800
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d112      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x512>
 8004da0:	4b9d      	ldr	r3, [pc, #628]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	4a9c      	ldr	r2, [pc, #624]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004da6:	f023 0301 	bic.w	r3, r3, #1
 8004daa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dac:	4b9a      	ldr	r3, [pc, #616]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	4a99      	ldr	r2, [pc, #612]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004db6:	6713      	str	r3, [r2, #112]	; 0x70
 8004db8:	4b97      	ldr	r3, [pc, #604]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbc:	4a96      	ldr	r2, [pc, #600]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004dbe:	f023 0304 	bic.w	r3, r3, #4
 8004dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc4:	e03f      	b.n	8004e46 <HAL_RCC_OscConfig+0x592>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b05      	cmp	r3, #5
 8004dcc:	d112      	bne.n	8004df4 <HAL_RCC_OscConfig+0x540>
 8004dce:	4b92      	ldr	r3, [pc, #584]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a91      	ldr	r2, [pc, #580]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004dd4:	f043 0304 	orr.w	r3, r3, #4
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	4b8f      	ldr	r3, [pc, #572]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a8e      	ldr	r2, [pc, #568]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
 8004de6:	4b8c      	ldr	r3, [pc, #560]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	4a8b      	ldr	r2, [pc, #556]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004dec:	f043 0301 	orr.w	r3, r3, #1
 8004df0:	6713      	str	r3, [r2, #112]	; 0x70
 8004df2:	e028      	b.n	8004e46 <HAL_RCC_OscConfig+0x592>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b85      	cmp	r3, #133	; 0x85
 8004dfa:	d112      	bne.n	8004e22 <HAL_RCC_OscConfig+0x56e>
 8004dfc:	4b86      	ldr	r3, [pc, #536]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4a85      	ldr	r2, [pc, #532]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004e02:	f043 0304 	orr.w	r3, r3, #4
 8004e06:	6713      	str	r3, [r2, #112]	; 0x70
 8004e08:	4b83      	ldr	r3, [pc, #524]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	4a82      	ldr	r2, [pc, #520]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e12:	6713      	str	r3, [r2, #112]	; 0x70
 8004e14:	4b80      	ldr	r3, [pc, #512]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	4a7f      	ldr	r2, [pc, #508]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e20:	e011      	b.n	8004e46 <HAL_RCC_OscConfig+0x592>
 8004e22:	4b7d      	ldr	r3, [pc, #500]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	4a7c      	ldr	r2, [pc, #496]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004e28:	f023 0301 	bic.w	r3, r3, #1
 8004e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e2e:	4b7a      	ldr	r3, [pc, #488]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	4a79      	ldr	r2, [pc, #484]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004e34:	f023 0304 	bic.w	r3, r3, #4
 8004e38:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3a:	4b77      	ldr	r3, [pc, #476]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3e:	4a76      	ldr	r2, [pc, #472]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d015      	beq.n	8004e7a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4e:	f7fe f9ad 	bl	80031ac <HAL_GetTick>
 8004e52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e54:	e00a      	b.n	8004e6c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e56:	f7fe f9a9 	bl	80031ac <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e14c      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e6c:	4b6a      	ldr	r3, [pc, #424]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0ee      	beq.n	8004e56 <HAL_RCC_OscConfig+0x5a2>
 8004e78:	e014      	b.n	8004ea4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7a:	f7fe f997 	bl	80031ac <HAL_GetTick>
 8004e7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e80:	e00a      	b.n	8004e98 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e82:	f7fe f993 	bl	80031ac <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e136      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e98:	4b5f      	ldr	r3, [pc, #380]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1ee      	bne.n	8004e82 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 812b 	beq.w	8005104 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004eae:	4b5a      	ldr	r3, [pc, #360]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eb6:	2b18      	cmp	r3, #24
 8004eb8:	f000 80bb 	beq.w	8005032 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	f040 8095 	bne.w	8004ff0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec6:	4b54      	ldr	r3, [pc, #336]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a53      	ldr	r2, [pc, #332]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004ecc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed2:	f7fe f96b 	bl	80031ac <HAL_GetTick>
 8004ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eda:	f7fe f967 	bl	80031ac <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e10c      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eec:	4b4a      	ldr	r3, [pc, #296]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1f0      	bne.n	8004eda <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ef8:	4b47      	ldr	r3, [pc, #284]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004efa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004efc:	4b47      	ldr	r3, [pc, #284]	; (800501c <HAL_RCC_OscConfig+0x768>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f08:	0112      	lsls	r2, r2, #4
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	4942      	ldr	r1, [pc, #264]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	628b      	str	r3, [r1, #40]	; 0x28
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	3b01      	subs	r3, #1
 8004f18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f20:	3b01      	subs	r3, #1
 8004f22:	025b      	lsls	r3, r3, #9
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	431a      	orrs	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	041b      	lsls	r3, r3, #16
 8004f30:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	061b      	lsls	r3, r3, #24
 8004f3e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f42:	4935      	ldr	r1, [pc, #212]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004f48:	4b33      	ldr	r3, [pc, #204]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	4a32      	ldr	r2, [pc, #200]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004f4e:	f023 0301 	bic.w	r3, r3, #1
 8004f52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f54:	4b30      	ldr	r3, [pc, #192]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f58:	4b31      	ldr	r3, [pc, #196]	; (8005020 <HAL_RCC_OscConfig+0x76c>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f60:	00d2      	lsls	r2, r2, #3
 8004f62:	492d      	ldr	r1, [pc, #180]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f68:	4b2b      	ldr	r3, [pc, #172]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	f023 020c 	bic.w	r2, r3, #12
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	4928      	ldr	r1, [pc, #160]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f7a:	4b27      	ldr	r3, [pc, #156]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	f023 0202 	bic.w	r2, r3, #2
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	4924      	ldr	r1, [pc, #144]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f8c:	4b22      	ldr	r3, [pc, #136]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	4a21      	ldr	r2, [pc, #132]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f98:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	4a1e      	ldr	r2, [pc, #120]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004fa4:	4b1c      	ldr	r3, [pc, #112]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004faa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004fb0:	4b19      	ldr	r3, [pc, #100]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	4a18      	ldr	r2, [pc, #96]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fbc:	4b16      	ldr	r3, [pc, #88]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a15      	ldr	r2, [pc, #84]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fe f8f0 	bl	80031ac <HAL_GetTick>
 8004fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd0:	f7fe f8ec 	bl	80031ac <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e091      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x71c>
 8004fee:	e089      	b.n	8005104 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff0:	4b09      	ldr	r3, [pc, #36]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a08      	ldr	r2, [pc, #32]	; (8005018 <HAL_RCC_OscConfig+0x764>)
 8004ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7fe f8d6 	bl	80031ac <HAL_GetTick>
 8005000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005002:	e00f      	b.n	8005024 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005004:	f7fe f8d2 	bl	80031ac <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d908      	bls.n	8005024 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e077      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
 8005016:	bf00      	nop
 8005018:	58024400 	.word	0x58024400
 800501c:	fffffc0c 	.word	0xfffffc0c
 8005020:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005024:	4b3a      	ldr	r3, [pc, #232]	; (8005110 <HAL_RCC_OscConfig+0x85c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e9      	bne.n	8005004 <HAL_RCC_OscConfig+0x750>
 8005030:	e068      	b.n	8005104 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005032:	4b37      	ldr	r3, [pc, #220]	; (8005110 <HAL_RCC_OscConfig+0x85c>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005038:	4b35      	ldr	r3, [pc, #212]	; (8005110 <HAL_RCC_OscConfig+0x85c>)
 800503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	2b01      	cmp	r3, #1
 8005044:	d031      	beq.n	80050aa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f003 0203 	and.w	r2, r3, #3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d12a      	bne.n	80050aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	091b      	lsrs	r3, r3, #4
 8005058:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d122      	bne.n	80050aa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d11a      	bne.n	80050aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	0a5b      	lsrs	r3, r3, #9
 8005078:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005080:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005082:	429a      	cmp	r2, r3
 8005084:	d111      	bne.n	80050aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	0c1b      	lsrs	r3, r3, #16
 800508a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d108      	bne.n	80050aa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	0e1b      	lsrs	r3, r3, #24
 800509c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d001      	beq.n	80050ae <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e02b      	b.n	8005106 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80050ae:	4b18      	ldr	r3, [pc, #96]	; (8005110 <HAL_RCC_OscConfig+0x85c>)
 80050b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b2:	08db      	lsrs	r3, r3, #3
 80050b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050b8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d01f      	beq.n	8005104 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80050c4:	4b12      	ldr	r3, [pc, #72]	; (8005110 <HAL_RCC_OscConfig+0x85c>)
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	4a11      	ldr	r2, [pc, #68]	; (8005110 <HAL_RCC_OscConfig+0x85c>)
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050d0:	f7fe f86c 	bl	80031ac <HAL_GetTick>
 80050d4:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80050d6:	bf00      	nop
 80050d8:	f7fe f868 	bl	80031ac <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d0f9      	beq.n	80050d8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050e4:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <HAL_RCC_OscConfig+0x85c>)
 80050e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050e8:	4b0a      	ldr	r3, [pc, #40]	; (8005114 <HAL_RCC_OscConfig+0x860>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80050f0:	00d2      	lsls	r2, r2, #3
 80050f2:	4907      	ldr	r1, [pc, #28]	; (8005110 <HAL_RCC_OscConfig+0x85c>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80050f8:	4b05      	ldr	r3, [pc, #20]	; (8005110 <HAL_RCC_OscConfig+0x85c>)
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	4a04      	ldr	r2, [pc, #16]	; (8005110 <HAL_RCC_OscConfig+0x85c>)
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3730      	adds	r7, #48	; 0x30
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	58024400 	.word	0x58024400
 8005114:	ffff0007 	.word	0xffff0007

08005118 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e19c      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800512c:	4b8a      	ldr	r3, [pc, #552]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d910      	bls.n	800515c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800513a:	4b87      	ldr	r3, [pc, #540]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f023 020f 	bic.w	r2, r3, #15
 8005142:	4985      	ldr	r1, [pc, #532]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	4313      	orrs	r3, r2
 8005148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800514a:	4b83      	ldr	r3, [pc, #524]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e184      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d010      	beq.n	800518a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	4b7b      	ldr	r3, [pc, #492]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005174:	429a      	cmp	r2, r3
 8005176:	d908      	bls.n	800518a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005178:	4b78      	ldr	r3, [pc, #480]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	4975      	ldr	r1, [pc, #468]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005186:	4313      	orrs	r3, r2
 8005188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d010      	beq.n	80051b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695a      	ldr	r2, [r3, #20]
 800519a:	4b70      	ldr	r3, [pc, #448]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d908      	bls.n	80051b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051a6:	4b6d      	ldr	r3, [pc, #436]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	496a      	ldr	r1, [pc, #424]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d010      	beq.n	80051e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699a      	ldr	r2, [r3, #24]
 80051c8:	4b64      	ldr	r3, [pc, #400]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d908      	bls.n	80051e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051d4:	4b61      	ldr	r3, [pc, #388]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	495e      	ldr	r1, [pc, #376]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d010      	beq.n	8005214 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69da      	ldr	r2, [r3, #28]
 80051f6:	4b59      	ldr	r3, [pc, #356]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051fe:	429a      	cmp	r2, r3
 8005200:	d908      	bls.n	8005214 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005202:	4b56      	ldr	r3, [pc, #344]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	4953      	ldr	r1, [pc, #332]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005210:	4313      	orrs	r3, r2
 8005212:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d010      	beq.n	8005242 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	4b4d      	ldr	r3, [pc, #308]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	429a      	cmp	r2, r3
 800522e:	d908      	bls.n	8005242 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005230:	4b4a      	ldr	r3, [pc, #296]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f023 020f 	bic.w	r2, r3, #15
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4947      	ldr	r1, [pc, #284]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800523e:	4313      	orrs	r3, r2
 8005240:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d055      	beq.n	80052fa <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800524e:	4b43      	ldr	r3, [pc, #268]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	4940      	ldr	r1, [pc, #256]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800525c:	4313      	orrs	r3, r2
 800525e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d107      	bne.n	8005278 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005268:	4b3c      	ldr	r3, [pc, #240]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d121      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0f6      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d107      	bne.n	8005290 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005280:	4b36      	ldr	r3, [pc, #216]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d115      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0ea      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d107      	bne.n	80052a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005298:	4b30      	ldr	r3, [pc, #192]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d109      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0de      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052a8:	4b2c      	ldr	r3, [pc, #176]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0d6      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052b8:	4b28      	ldr	r3, [pc, #160]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f023 0207 	bic.w	r2, r3, #7
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4925      	ldr	r1, [pc, #148]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ca:	f7fd ff6f 	bl	80031ac <HAL_GetTick>
 80052ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052d0:	e00a      	b.n	80052e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d2:	f7fd ff6b 	bl	80031ac <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e0be      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e8:	4b1c      	ldr	r3, [pc, #112]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d1eb      	bne.n	80052d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d010      	beq.n	8005328 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	4b14      	ldr	r3, [pc, #80]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	429a      	cmp	r2, r3
 8005314:	d208      	bcs.n	8005328 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005316:	4b11      	ldr	r3, [pc, #68]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f023 020f 	bic.w	r2, r3, #15
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	490e      	ldr	r1, [pc, #56]	; (800535c <HAL_RCC_ClockConfig+0x244>)
 8005324:	4313      	orrs	r3, r2
 8005326:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005328:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d214      	bcs.n	8005360 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005336:	4b08      	ldr	r3, [pc, #32]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 020f 	bic.w	r2, r3, #15
 800533e:	4906      	ldr	r1, [pc, #24]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	4313      	orrs	r3, r2
 8005344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b04      	ldr	r3, [pc, #16]	; (8005358 <HAL_RCC_ClockConfig+0x240>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d005      	beq.n	8005360 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e086      	b.n	8005466 <HAL_RCC_ClockConfig+0x34e>
 8005358:	52002000 	.word	0x52002000
 800535c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d010      	beq.n	800538e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	4b3f      	ldr	r3, [pc, #252]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005378:	429a      	cmp	r2, r3
 800537a:	d208      	bcs.n	800538e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800537c:	4b3c      	ldr	r3, [pc, #240]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	4939      	ldr	r1, [pc, #228]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 800538a:	4313      	orrs	r3, r2
 800538c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d010      	beq.n	80053bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695a      	ldr	r2, [r3, #20]
 800539e:	4b34      	ldr	r3, [pc, #208]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d208      	bcs.n	80053bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053aa:	4b31      	ldr	r3, [pc, #196]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	492e      	ldr	r1, [pc, #184]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d010      	beq.n	80053ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699a      	ldr	r2, [r3, #24]
 80053cc:	4b28      	ldr	r3, [pc, #160]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d208      	bcs.n	80053ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80053d8:	4b25      	ldr	r3, [pc, #148]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	4922      	ldr	r1, [pc, #136]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d010      	beq.n	8005418 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69da      	ldr	r2, [r3, #28]
 80053fa:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005402:	429a      	cmp	r2, r3
 8005404:	d208      	bcs.n	8005418 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005406:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	4917      	ldr	r1, [pc, #92]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 8005414:	4313      	orrs	r3, r2
 8005416:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005418:	f000 f834 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 800541c:	4602      	mov	r2, r0
 800541e:	4b14      	ldr	r3, [pc, #80]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	0a1b      	lsrs	r3, r3, #8
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	4912      	ldr	r1, [pc, #72]	; (8005474 <HAL_RCC_ClockConfig+0x35c>)
 800542a:	5ccb      	ldrb	r3, [r1, r3]
 800542c:	f003 031f 	and.w	r3, r3, #31
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
 8005434:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005436:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <HAL_RCC_ClockConfig+0x358>)
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	4a0d      	ldr	r2, [pc, #52]	; (8005474 <HAL_RCC_ClockConfig+0x35c>)
 8005440:	5cd3      	ldrb	r3, [r2, r3]
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	fa22 f303 	lsr.w	r3, r2, r3
 800544c:	4a0a      	ldr	r2, [pc, #40]	; (8005478 <HAL_RCC_ClockConfig+0x360>)
 800544e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005450:	4a0a      	ldr	r2, [pc, #40]	; (800547c <HAL_RCC_ClockConfig+0x364>)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <HAL_RCC_ClockConfig+0x368>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f7fd fe5c 	bl	8003118 <HAL_InitTick>
 8005460:	4603      	mov	r3, r0
 8005462:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	58024400 	.word	0x58024400
 8005474:	08009fa0 	.word	0x08009fa0
 8005478:	2400017c 	.word	0x2400017c
 800547c:	24000178 	.word	0x24000178
 8005480:	24000180 	.word	0x24000180

08005484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005484:	b480      	push	{r7}
 8005486:	b089      	sub	sp, #36	; 0x24
 8005488:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800548a:	4bb3      	ldr	r3, [pc, #716]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005492:	2b18      	cmp	r3, #24
 8005494:	f200 8155 	bhi.w	8005742 <HAL_RCC_GetSysClockFreq+0x2be>
 8005498:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800549a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549e:	bf00      	nop
 80054a0:	08005505 	.word	0x08005505
 80054a4:	08005743 	.word	0x08005743
 80054a8:	08005743 	.word	0x08005743
 80054ac:	08005743 	.word	0x08005743
 80054b0:	08005743 	.word	0x08005743
 80054b4:	08005743 	.word	0x08005743
 80054b8:	08005743 	.word	0x08005743
 80054bc:	08005743 	.word	0x08005743
 80054c0:	0800552b 	.word	0x0800552b
 80054c4:	08005743 	.word	0x08005743
 80054c8:	08005743 	.word	0x08005743
 80054cc:	08005743 	.word	0x08005743
 80054d0:	08005743 	.word	0x08005743
 80054d4:	08005743 	.word	0x08005743
 80054d8:	08005743 	.word	0x08005743
 80054dc:	08005743 	.word	0x08005743
 80054e0:	08005531 	.word	0x08005531
 80054e4:	08005743 	.word	0x08005743
 80054e8:	08005743 	.word	0x08005743
 80054ec:	08005743 	.word	0x08005743
 80054f0:	08005743 	.word	0x08005743
 80054f4:	08005743 	.word	0x08005743
 80054f8:	08005743 	.word	0x08005743
 80054fc:	08005743 	.word	0x08005743
 8005500:	08005537 	.word	0x08005537
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005504:	4b94      	ldr	r3, [pc, #592]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005510:	4b91      	ldr	r3, [pc, #580]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	08db      	lsrs	r3, r3, #3
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	4a90      	ldr	r2, [pc, #576]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800551c:	fa22 f303 	lsr.w	r3, r2, r3
 8005520:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005522:	e111      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005524:	4b8d      	ldr	r3, [pc, #564]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005526:	61bb      	str	r3, [r7, #24]
      break;
 8005528:	e10e      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800552a:	4b8d      	ldr	r3, [pc, #564]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800552c:	61bb      	str	r3, [r7, #24]
      break;
 800552e:	e10b      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005530:	4b8c      	ldr	r3, [pc, #560]	; (8005764 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005532:	61bb      	str	r3, [r7, #24]
      break;
 8005534:	e108      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005536:	4b88      	ldr	r3, [pc, #544]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005540:	4b85      	ldr	r3, [pc, #532]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800554a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800554c:	4b82      	ldr	r3, [pc, #520]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005556:	4b80      	ldr	r3, [pc, #512]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555a:	08db      	lsrs	r3, r3, #3
 800555c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80e1 	beq.w	800573c <HAL_RCC_GetSysClockFreq+0x2b8>
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2b02      	cmp	r3, #2
 800557e:	f000 8083 	beq.w	8005688 <HAL_RCC_GetSysClockFreq+0x204>
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b02      	cmp	r3, #2
 8005586:	f200 80a1 	bhi.w	80056cc <HAL_RCC_GetSysClockFreq+0x248>
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_RCC_GetSysClockFreq+0x114>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d056      	beq.n	8005644 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005596:	e099      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005598:	4b6f      	ldr	r3, [pc, #444]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02d      	beq.n	8005600 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055a4:	4b6c      	ldr	r3, [pc, #432]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	08db      	lsrs	r3, r3, #3
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	4a6b      	ldr	r2, [pc, #428]	; (800575c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
 80055b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	ee07 3a90 	vmov	s15, r3
 80055bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ce:	4b62      	ldr	r3, [pc, #392]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055de:	ed97 6a02 	vldr	s12, [r7, #8]
 80055e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80055fe:	e087      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800576c <HAL_RCC_GetSysClockFreq+0x2e8>
 800560e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005612:	4b51      	ldr	r3, [pc, #324]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005622:	ed97 6a02 	vldr	s12, [r7, #8]
 8005626:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005768 <HAL_RCC_GetSysClockFreq+0x2e4>
 800562a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005642:	e065      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005770 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005656:	4b40      	ldr	r3, [pc, #256]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005666:	ed97 6a02 	vldr	s12, [r7, #8]
 800566a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005768 <HAL_RCC_GetSysClockFreq+0x2e4>
 800566e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800567a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005686:	e043      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005692:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005774 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569a:	4b2f      	ldr	r3, [pc, #188]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056ca:	e021      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005770 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056de:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80056f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800570e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005710:	4b11      	ldr	r3, [pc, #68]	; (8005758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	0a5b      	lsrs	r3, r3, #9
 8005716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800571a:	3301      	adds	r3, #1
 800571c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	ee07 3a90 	vmov	s15, r3
 8005724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005728:	edd7 6a07 	vldr	s13, [r7, #28]
 800572c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005734:	ee17 3a90 	vmov	r3, s15
 8005738:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800573a:	e005      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	61bb      	str	r3, [r7, #24]
      break;
 8005740:	e002      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005742:	4b07      	ldr	r3, [pc, #28]	; (8005760 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005744:	61bb      	str	r3, [r7, #24]
      break;
 8005746:	bf00      	nop
  }

  return sysclockfreq;
 8005748:	69bb      	ldr	r3, [r7, #24]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3724      	adds	r7, #36	; 0x24
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	58024400 	.word	0x58024400
 800575c:	03d09000 	.word	0x03d09000
 8005760:	003d0900 	.word	0x003d0900
 8005764:	007a1200 	.word	0x007a1200
 8005768:	46000000 	.word	0x46000000
 800576c:	4c742400 	.word	0x4c742400
 8005770:	4a742400 	.word	0x4a742400
 8005774:	4af42400 	.word	0x4af42400

08005778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800577e:	f7ff fe81 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 8005782:	4602      	mov	r2, r0
 8005784:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	0a1b      	lsrs	r3, r3, #8
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	490f      	ldr	r1, [pc, #60]	; (80057cc <HAL_RCC_GetHCLKFreq+0x54>)
 8005790:	5ccb      	ldrb	r3, [r1, r3]
 8005792:	f003 031f 	and.w	r3, r3, #31
 8005796:	fa22 f303 	lsr.w	r3, r2, r3
 800579a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800579c:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	4a09      	ldr	r2, [pc, #36]	; (80057cc <HAL_RCC_GetHCLKFreq+0x54>)
 80057a6:	5cd3      	ldrb	r3, [r2, r3]
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	fa22 f303 	lsr.w	r3, r2, r3
 80057b2:	4a07      	ldr	r2, [pc, #28]	; (80057d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80057b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057b6:	4a07      	ldr	r2, [pc, #28]	; (80057d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80057be:	681b      	ldr	r3, [r3, #0]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	58024400 	.word	0x58024400
 80057cc:	08009fa0 	.word	0x08009fa0
 80057d0:	2400017c 	.word	0x2400017c
 80057d4:	24000178 	.word	0x24000178

080057d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80057dc:	f7ff ffcc 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 80057e0:	4602      	mov	r2, r0
 80057e2:	4b06      	ldr	r3, [pc, #24]	; (80057fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	091b      	lsrs	r3, r3, #4
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	4904      	ldr	r1, [pc, #16]	; (8005800 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057ee:	5ccb      	ldrb	r3, [r1, r3]
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	58024400 	.word	0x58024400
 8005800:	08009fa0 	.word	0x08009fa0

08005804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8005808:	f7ff ffb6 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 800580c:	4602      	mov	r2, r0
 800580e:	4b06      	ldr	r3, [pc, #24]	; (8005828 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	4904      	ldr	r1, [pc, #16]	; (800582c <HAL_RCC_GetPCLK2Freq+0x28>)
 800581a:	5ccb      	ldrb	r3, [r1, r3]
 800581c:	f003 031f 	and.w	r3, r3, #31
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005824:	4618      	mov	r0, r3
 8005826:	bd80      	pop	{r7, pc}
 8005828:	58024400 	.word	0x58024400
 800582c:	08009fa0 	.word	0x08009fa0

08005830 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005834:	b0c8      	sub	sp, #288	; 0x120
 8005836:	af00      	add	r7, sp, #0
 8005838:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800583c:	2300      	movs	r3, #0
 800583e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005842:	2300      	movs	r3, #0
 8005844:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005854:	2500      	movs	r5, #0
 8005856:	ea54 0305 	orrs.w	r3, r4, r5
 800585a:	d049      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800585c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005862:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005866:	d02f      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005868:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800586c:	d828      	bhi.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800586e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005872:	d01a      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005874:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005878:	d822      	bhi.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800587e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005882:	d007      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005884:	e01c      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005886:	4ba7      	ldr	r3, [pc, #668]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588a:	4aa6      	ldr	r2, [pc, #664]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800588c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005892:	e01a      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005898:	3308      	adds	r3, #8
 800589a:	2102      	movs	r1, #2
 800589c:	4618      	mov	r0, r3
 800589e:	f002 fa6d 	bl	8007d7c <RCCEx_PLL2_Config>
 80058a2:	4603      	mov	r3, r0
 80058a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058a8:	e00f      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ae:	3328      	adds	r3, #40	; 0x28
 80058b0:	2102      	movs	r1, #2
 80058b2:	4618      	mov	r0, r3
 80058b4:	f002 fb14 	bl	8007ee0 <RCCEx_PLL3_Config>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058be:	e004      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80058c6:	e000      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80058c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80058d2:	4b94      	ldr	r3, [pc, #592]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80058da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058e0:	4a90      	ldr	r2, [pc, #576]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058e2:	430b      	orrs	r3, r1
 80058e4:	6513      	str	r3, [r2, #80]	; 0x50
 80058e6:	e003      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80058ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80058f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80058fc:	f04f 0900 	mov.w	r9, #0
 8005900:	ea58 0309 	orrs.w	r3, r8, r9
 8005904:	d047      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800590a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590c:	2b04      	cmp	r3, #4
 800590e:	d82a      	bhi.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005910:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	0800592d 	.word	0x0800592d
 800591c:	0800593b 	.word	0x0800593b
 8005920:	08005951 	.word	0x08005951
 8005924:	0800596f 	.word	0x0800596f
 8005928:	0800596f 	.word	0x0800596f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800592c:	4b7d      	ldr	r3, [pc, #500]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	4a7c      	ldr	r2, [pc, #496]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005938:	e01a      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800593a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800593e:	3308      	adds	r3, #8
 8005940:	2100      	movs	r1, #0
 8005942:	4618      	mov	r0, r3
 8005944:	f002 fa1a 	bl	8007d7c <RCCEx_PLL2_Config>
 8005948:	4603      	mov	r3, r0
 800594a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800594e:	e00f      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005954:	3328      	adds	r3, #40	; 0x28
 8005956:	2100      	movs	r1, #0
 8005958:	4618      	mov	r0, r3
 800595a:	f002 fac1 	bl	8007ee0 <RCCEx_PLL3_Config>
 800595e:	4603      	mov	r3, r0
 8005960:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005964:	e004      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800596c:	e000      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800596e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005970:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10a      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005978:	4b6a      	ldr	r3, [pc, #424]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800597a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800597c:	f023 0107 	bic.w	r1, r3, #7
 8005980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005986:	4a67      	ldr	r2, [pc, #412]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005988:	430b      	orrs	r3, r1
 800598a:	6513      	str	r3, [r2, #80]	; 0x50
 800598c:	e003      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005992:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8005996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80059a2:	f04f 0b00 	mov.w	fp, #0
 80059a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80059aa:	d054      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80059ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80059b6:	d036      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80059b8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80059bc:	d82f      	bhi.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80059be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c2:	d032      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80059c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059c8:	d829      	bhi.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80059ca:	2bc0      	cmp	r3, #192	; 0xc0
 80059cc:	d02f      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80059ce:	2bc0      	cmp	r3, #192	; 0xc0
 80059d0:	d825      	bhi.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80059d2:	2b80      	cmp	r3, #128	; 0x80
 80059d4:	d018      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80059d6:	2b80      	cmp	r3, #128	; 0x80
 80059d8:	d821      	bhi.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d007      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80059e2:	e01c      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e4:	4b4f      	ldr	r3, [pc, #316]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	4a4e      	ldr	r2, [pc, #312]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80059f0:	e01e      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f6:	3308      	adds	r3, #8
 80059f8:	2100      	movs	r1, #0
 80059fa:	4618      	mov	r0, r3
 80059fc:	f002 f9be 	bl	8007d7c <RCCEx_PLL2_Config>
 8005a00:	4603      	mov	r3, r0
 8005a02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005a06:	e013      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a0c:	3328      	adds	r3, #40	; 0x28
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f002 fa65 	bl	8007ee0 <RCCEx_PLL3_Config>
 8005a16:	4603      	mov	r3, r0
 8005a18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8005a1c:	e008      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005a24:	e004      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005a26:	bf00      	nop
 8005a28:	e002      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005a2a:	bf00      	nop
 8005a2c:	e000      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8005a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10a      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005a38:	4b3a      	ldr	r3, [pc, #232]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a46:	4a37      	ldr	r2, [pc, #220]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	6513      	str	r3, [r2, #80]	; 0x50
 8005a4c:	e003      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005a52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8005a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005a62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a66:	2300      	movs	r3, #0
 8005a68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a6c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005a70:	460b      	mov	r3, r1
 8005a72:	4313      	orrs	r3, r2
 8005a74:	d05c      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8005a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005a80:	d03b      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a82:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005a86:	d834      	bhi.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a8c:	d037      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8005a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a92:	d82e      	bhi.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005a94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a98:	d033      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005a9a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a9e:	d828      	bhi.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa4:	d01a      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8005aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aaa:	d822      	bhi.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8005ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab4:	d007      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005ab6:	e01c      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab8:	4b1a      	ldr	r3, [pc, #104]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	4a19      	ldr	r2, [pc, #100]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005ac4:	e01e      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aca:	3308      	adds	r3, #8
 8005acc:	2100      	movs	r1, #0
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f002 f954 	bl	8007d7c <RCCEx_PLL2_Config>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005ada:	e013      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ae0:	3328      	adds	r3, #40	; 0x28
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f002 f9fb 	bl	8007ee0 <RCCEx_PLL3_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8005af0:	e008      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005af8:	e004      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005afa:	bf00      	nop
 8005afc:	e002      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8005b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10d      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b10:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1a:	4a02      	ldr	r2, [pc, #8]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	6513      	str	r3, [r2, #80]	; 0x50
 8005b20:	e006      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005b22:	bf00      	nop
 8005b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005b2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b40:	2300      	movs	r3, #0
 8005b42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	d03a      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b56:	2b30      	cmp	r3, #48	; 0x30
 8005b58:	d01f      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005b5a:	2b30      	cmp	r3, #48	; 0x30
 8005b5c:	d819      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	d00c      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d815      	bhi.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d019      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d111      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b6e:	4bae      	ldr	r3, [pc, #696]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	4aad      	ldr	r2, [pc, #692]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005b7a:	e011      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b80:	3308      	adds	r3, #8
 8005b82:	2102      	movs	r1, #2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f002 f8f9 	bl	8007d7c <RCCEx_PLL2_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005b90:	e006      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005b98:	e002      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005b9a:	bf00      	nop
 8005b9c:	e000      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8005b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10a      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005ba8:	4b9f      	ldr	r3, [pc, #636]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bb6:	4a9c      	ldr	r2, [pc, #624]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bbc:	e003      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005bc2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005bd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bdc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4313      	orrs	r3, r2
 8005be4:	d051      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bf0:	d035      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bf6:	d82e      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005bf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bfc:	d031      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005bfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c02:	d828      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c08:	d01a      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c0e:	d822      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c18:	d007      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8005c1a:	e01c      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c1c:	4b82      	ldr	r3, [pc, #520]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	4a81      	ldr	r2, [pc, #516]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c28:	e01c      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c2e:	3308      	adds	r3, #8
 8005c30:	2100      	movs	r1, #0
 8005c32:	4618      	mov	r0, r3
 8005c34:	f002 f8a2 	bl	8007d7c <RCCEx_PLL2_Config>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c3e:	e011      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c44:	3328      	adds	r3, #40	; 0x28
 8005c46:	2100      	movs	r1, #0
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f002 f949 	bl	8007ee0 <RCCEx_PLL3_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c54:	e006      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005c5c:	e002      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005c5e:	bf00      	nop
 8005c60:	e000      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8005c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c6c:	4b6e      	ldr	r3, [pc, #440]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c70:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c7a:	4a6b      	ldr	r2, [pc, #428]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	6513      	str	r3, [r2, #80]	; 0x50
 8005c80:	e003      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005c86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c92:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005c96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ca0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	d053      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb4:	d033      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005cb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cba:	d82c      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005cbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cc0:	d02f      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8005cc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cc6:	d826      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005cc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ccc:	d02b      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005cce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cd2:	d820      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cd8:	d012      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005cda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cde:	d81a      	bhi.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d022      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8005ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce8:	d115      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cee:	3308      	adds	r3, #8
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f002 f842 	bl	8007d7c <RCCEx_PLL2_Config>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cfe:	e015      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d04:	3328      	adds	r3, #40	; 0x28
 8005d06:	2101      	movs	r1, #1
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f002 f8e9 	bl	8007ee0 <RCCEx_PLL3_Config>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d14:	e00a      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005d1c:	e006      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005d1e:	bf00      	nop
 8005d20:	e004      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005d22:	bf00      	nop
 8005d24:	e002      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005d26:	bf00      	nop
 8005d28:	e000      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8005d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005d34:	4b3c      	ldr	r3, [pc, #240]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d38:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d42:	4a39      	ldr	r2, [pc, #228]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d44:	430b      	orrs	r3, r1
 8005d46:	6513      	str	r3, [r2, #80]	; 0x50
 8005d48:	e003      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005d4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005d5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d62:	2300      	movs	r3, #0
 8005d64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d68:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	d060      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d7a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005d7e:	d039      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8005d80:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005d84:	d832      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005d86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d8a:	d035      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d90:	d82c      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d96:	d031      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9c:	d826      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005d9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005da2:	d02d      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005da4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005da8:	d820      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dae:	d012      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db4:	d81a      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d024      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005dba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dbe:	d115      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f001 ffd7 	bl	8007d7c <RCCEx_PLL2_Config>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005dd4:	e017      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dda:	3328      	adds	r3, #40	; 0x28
 8005ddc:	2101      	movs	r1, #1
 8005dde:	4618      	mov	r0, r3
 8005de0:	f002 f87e 	bl	8007ee0 <RCCEx_PLL3_Config>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005dea:	e00c      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005df2:	e008      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005df4:	bf00      	nop
 8005df6:	e006      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005df8:	bf00      	nop
 8005dfa:	e004      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005dfc:	bf00      	nop
 8005dfe:	e002      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005e00:	bf00      	nop
 8005e02:	e000      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10e      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e0e:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e12:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e1e:	4a02      	ldr	r2, [pc, #8]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e20:	430b      	orrs	r3, r1
 8005e22:	6593      	str	r3, [r2, #88]	; 0x58
 8005e24:	e006      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005e26:	bf00      	nop
 8005e28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005e30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005e40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e44:	2300      	movs	r3, #0
 8005e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4313      	orrs	r3, r2
 8005e52:	d037      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e5e:	d00e      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e64:	d816      	bhi.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d018      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005e6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e6e:	d111      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e70:	4bc4      	ldr	r3, [pc, #784]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	4ac3      	ldr	r2, [pc, #780]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e7c:	e00f      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e82:	3308      	adds	r3, #8
 8005e84:	2101      	movs	r1, #1
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 ff78 	bl	8007d7c <RCCEx_PLL2_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e92:	e004      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005e9a:	e000      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ea6:	4bb7      	ldr	r3, [pc, #732]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eaa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eb4:	4ab3      	ldr	r2, [pc, #716]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005eb6:	430b      	orrs	r3, r1
 8005eb8:	6513      	str	r3, [r2, #80]	; 0x50
 8005eba:	e003      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005ec0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005eda:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	d039      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eea:	2b03      	cmp	r3, #3
 8005eec:	d81c      	bhi.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005eee:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f31 	.word	0x08005f31
 8005ef8:	08005f05 	.word	0x08005f05
 8005efc:	08005f13 	.word	0x08005f13
 8005f00:	08005f31 	.word	0x08005f31
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f04:	4b9f      	ldr	r3, [pc, #636]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	4a9e      	ldr	r2, [pc, #632]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f10:	e00f      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f16:	3308      	adds	r3, #8
 8005f18:	2102      	movs	r1, #2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 ff2e 	bl	8007d7c <RCCEx_PLL2_Config>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f26:	e004      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005f2e:	e000      	b.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10a      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f3a:	4b92      	ldr	r3, [pc, #584]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3e:	f023 0103 	bic.w	r1, r3, #3
 8005f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f48:	4a8e      	ldr	r2, [pc, #568]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f4a:	430b      	orrs	r3, r1
 8005f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f4e:	e003      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005f54:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005f64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005f72:	460b      	mov	r3, r1
 8005f74:	4313      	orrs	r3, r2
 8005f76:	f000 8099 	beq.w	80060ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f7a:	4b83      	ldr	r3, [pc, #524]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a82      	ldr	r2, [pc, #520]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f86:	f7fd f911 	bl	80031ac <HAL_GetTick>
 8005f8a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f8e:	e00b      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f90:	f7fd f90c 	bl	80031ac <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b64      	cmp	r3, #100	; 0x64
 8005f9e:	d903      	bls.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8005fa6:	e005      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fa8:	4b77      	ldr	r3, [pc, #476]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0ed      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005fb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d173      	bne.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005fbc:	4b71      	ldr	r3, [pc, #452]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fc8:	4053      	eors	r3, r2
 8005fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d015      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fd2:	4b6c      	ldr	r3, [pc, #432]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fde:	4b69      	ldr	r3, [pc, #420]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	4a68      	ldr	r2, [pc, #416]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fea:	4b66      	ldr	r3, [pc, #408]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fee:	4a65      	ldr	r2, [pc, #404]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005ff6:	4a63      	ldr	r2, [pc, #396]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ffc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006002:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800600a:	d118      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600c:	f7fd f8ce 	bl	80031ac <HAL_GetTick>
 8006010:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006014:	e00d      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006016:	f7fd f8c9 	bl	80031ac <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006020:	1ad2      	subs	r2, r2, r3
 8006022:	f241 3388 	movw	r3, #5000	; 0x1388
 8006026:	429a      	cmp	r2, r3
 8006028:	d903      	bls.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8006030:	e005      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006032:	4b54      	ldr	r3, [pc, #336]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0eb      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800603e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006042:	2b00      	cmp	r3, #0
 8006044:	d129      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800604a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800604e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006056:	d10e      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006058:	4b4a      	ldr	r3, [pc, #296]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006064:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006068:	091a      	lsrs	r2, r3, #4
 800606a:	4b48      	ldr	r3, [pc, #288]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800606c:	4013      	ands	r3, r2
 800606e:	4a45      	ldr	r2, [pc, #276]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006070:	430b      	orrs	r3, r1
 8006072:	6113      	str	r3, [r2, #16]
 8006074:	e005      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006076:	4b43      	ldr	r3, [pc, #268]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	4a42      	ldr	r2, [pc, #264]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800607c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006080:	6113      	str	r3, [r2, #16]
 8006082:	4b40      	ldr	r3, [pc, #256]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006084:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006086:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800608a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800608e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006092:	4a3c      	ldr	r2, [pc, #240]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006094:	430b      	orrs	r3, r1
 8006096:	6713      	str	r3, [r2, #112]	; 0x70
 8006098:	e008      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800609a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800609e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80060a2:	e003      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80060a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80060ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	f002 0301 	and.w	r3, r2, #1
 80060b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060bc:	2300      	movs	r3, #0
 80060be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4313      	orrs	r3, r2
 80060ca:	f000 8090 	beq.w	80061ee <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80060ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d6:	2b28      	cmp	r3, #40	; 0x28
 80060d8:	d870      	bhi.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80060da:	a201      	add	r2, pc, #4	; (adr r2, 80060e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	080061c5 	.word	0x080061c5
 80060e4:	080061bd 	.word	0x080061bd
 80060e8:	080061bd 	.word	0x080061bd
 80060ec:	080061bd 	.word	0x080061bd
 80060f0:	080061bd 	.word	0x080061bd
 80060f4:	080061bd 	.word	0x080061bd
 80060f8:	080061bd 	.word	0x080061bd
 80060fc:	080061bd 	.word	0x080061bd
 8006100:	08006191 	.word	0x08006191
 8006104:	080061bd 	.word	0x080061bd
 8006108:	080061bd 	.word	0x080061bd
 800610c:	080061bd 	.word	0x080061bd
 8006110:	080061bd 	.word	0x080061bd
 8006114:	080061bd 	.word	0x080061bd
 8006118:	080061bd 	.word	0x080061bd
 800611c:	080061bd 	.word	0x080061bd
 8006120:	080061a7 	.word	0x080061a7
 8006124:	080061bd 	.word	0x080061bd
 8006128:	080061bd 	.word	0x080061bd
 800612c:	080061bd 	.word	0x080061bd
 8006130:	080061bd 	.word	0x080061bd
 8006134:	080061bd 	.word	0x080061bd
 8006138:	080061bd 	.word	0x080061bd
 800613c:	080061bd 	.word	0x080061bd
 8006140:	080061c5 	.word	0x080061c5
 8006144:	080061bd 	.word	0x080061bd
 8006148:	080061bd 	.word	0x080061bd
 800614c:	080061bd 	.word	0x080061bd
 8006150:	080061bd 	.word	0x080061bd
 8006154:	080061bd 	.word	0x080061bd
 8006158:	080061bd 	.word	0x080061bd
 800615c:	080061bd 	.word	0x080061bd
 8006160:	080061c5 	.word	0x080061c5
 8006164:	080061bd 	.word	0x080061bd
 8006168:	080061bd 	.word	0x080061bd
 800616c:	080061bd 	.word	0x080061bd
 8006170:	080061bd 	.word	0x080061bd
 8006174:	080061bd 	.word	0x080061bd
 8006178:	080061bd 	.word	0x080061bd
 800617c:	080061bd 	.word	0x080061bd
 8006180:	080061c5 	.word	0x080061c5
 8006184:	58024400 	.word	0x58024400
 8006188:	58024800 	.word	0x58024800
 800618c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006194:	3308      	adds	r3, #8
 8006196:	2101      	movs	r1, #1
 8006198:	4618      	mov	r0, r3
 800619a:	f001 fdef 	bl	8007d7c <RCCEx_PLL2_Config>
 800619e:	4603      	mov	r3, r0
 80061a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80061a4:	e00f      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061aa:	3328      	adds	r3, #40	; 0x28
 80061ac:	2101      	movs	r1, #1
 80061ae:	4618      	mov	r0, r3
 80061b0:	f001 fe96 	bl	8007ee0 <RCCEx_PLL3_Config>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80061ba:	e004      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80061c2:	e000      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80061c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10b      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80061ce:	4bc0      	ldr	r3, [pc, #768]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80061d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061de:	4abc      	ldr	r2, [pc, #752]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80061e0:	430b      	orrs	r3, r1
 80061e2:	6553      	str	r3, [r2, #84]	; 0x54
 80061e4:	e003      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80061ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80061ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f002 0302 	and.w	r3, r2, #2
 80061fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061fe:	2300      	movs	r3, #0
 8006200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006204:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006208:	460b      	mov	r3, r1
 800620a:	4313      	orrs	r3, r2
 800620c:	d043      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800620e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006212:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006216:	2b05      	cmp	r3, #5
 8006218:	d824      	bhi.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800621a:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	0800626d 	.word	0x0800626d
 8006224:	08006239 	.word	0x08006239
 8006228:	0800624f 	.word	0x0800624f
 800622c:	0800626d 	.word	0x0800626d
 8006230:	0800626d 	.word	0x0800626d
 8006234:	0800626d 	.word	0x0800626d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800623c:	3308      	adds	r3, #8
 800623e:	2101      	movs	r1, #1
 8006240:	4618      	mov	r0, r3
 8006242:	f001 fd9b 	bl	8007d7c <RCCEx_PLL2_Config>
 8006246:	4603      	mov	r3, r0
 8006248:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800624c:	e00f      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800624e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006252:	3328      	adds	r3, #40	; 0x28
 8006254:	2101      	movs	r1, #1
 8006256:	4618      	mov	r0, r3
 8006258:	f001 fe42 	bl	8007ee0 <RCCEx_PLL3_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006262:	e004      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800626a:	e000      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800626c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800626e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10b      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006276:	4b96      	ldr	r3, [pc, #600]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627a:	f023 0107 	bic.w	r1, r3, #7
 800627e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006286:	4a92      	ldr	r2, [pc, #584]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006288:	430b      	orrs	r3, r1
 800628a:	6553      	str	r3, [r2, #84]	; 0x54
 800628c:	e003      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006292:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006296:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	f002 0304 	and.w	r3, r2, #4
 80062a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062a6:	2300      	movs	r3, #0
 80062a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062ac:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4313      	orrs	r3, r2
 80062b4:	d043      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80062b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062be:	2b05      	cmp	r3, #5
 80062c0:	d824      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80062c2:	a201      	add	r2, pc, #4	; (adr r2, 80062c8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	08006315 	.word	0x08006315
 80062cc:	080062e1 	.word	0x080062e1
 80062d0:	080062f7 	.word	0x080062f7
 80062d4:	08006315 	.word	0x08006315
 80062d8:	08006315 	.word	0x08006315
 80062dc:	08006315 	.word	0x08006315
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e4:	3308      	adds	r3, #8
 80062e6:	2101      	movs	r1, #1
 80062e8:	4618      	mov	r0, r3
 80062ea:	f001 fd47 	bl	8007d7c <RCCEx_PLL2_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80062f4:	e00f      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062fa:	3328      	adds	r3, #40	; 0x28
 80062fc:	2101      	movs	r1, #1
 80062fe:	4618      	mov	r0, r3
 8006300:	f001 fdee 	bl	8007ee0 <RCCEx_PLL3_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800630a:	e004      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006312:	e000      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8006314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006316:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10b      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800631e:	4b6c      	ldr	r3, [pc, #432]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006322:	f023 0107 	bic.w	r1, r3, #7
 8006326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800632a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800632e:	4a68      	ldr	r2, [pc, #416]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8006330:	430b      	orrs	r3, r1
 8006332:	6593      	str	r3, [r2, #88]	; 0x58
 8006334:	e003      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006336:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800633a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800633e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006346:	f002 0320 	and.w	r3, r2, #32
 800634a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800634e:	2300      	movs	r3, #0
 8006350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006358:	460b      	mov	r3, r1
 800635a:	4313      	orrs	r3, r2
 800635c:	d055      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800635e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006366:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800636a:	d033      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800636c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006370:	d82c      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006376:	d02f      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637c:	d826      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800637e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006382:	d02b      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006384:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006388:	d820      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800638a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800638e:	d012      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006394:	d81a      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d022      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800639a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800639e:	d115      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a4:	3308      	adds	r3, #8
 80063a6:	2100      	movs	r1, #0
 80063a8:	4618      	mov	r0, r3
 80063aa:	f001 fce7 	bl	8007d7c <RCCEx_PLL2_Config>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063b4:	e015      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ba:	3328      	adds	r3, #40	; 0x28
 80063bc:	2102      	movs	r1, #2
 80063be:	4618      	mov	r0, r3
 80063c0:	f001 fd8e 	bl	8007ee0 <RCCEx_PLL3_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80063ca:	e00a      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80063d2:	e006      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80063d4:	bf00      	nop
 80063d6:	e004      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80063d8:	bf00      	nop
 80063da:	e002      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80063dc:	bf00      	nop
 80063de:	e000      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80063e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10b      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063ea:	4b39      	ldr	r3, [pc, #228]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80063ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ee:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80063f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063fa:	4a35      	ldr	r2, [pc, #212]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80063fc:	430b      	orrs	r3, r1
 80063fe:	6553      	str	r3, [r2, #84]	; 0x54
 8006400:	e003      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006402:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006406:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800640a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800641a:	2300      	movs	r3, #0
 800641c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006420:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006424:	460b      	mov	r3, r1
 8006426:	4313      	orrs	r3, r2
 8006428:	d058      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800642a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800642e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006432:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006436:	d033      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006438:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800643c:	d82c      	bhi.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800643e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006442:	d02f      	beq.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006448:	d826      	bhi.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800644a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800644e:	d02b      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006450:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006454:	d820      	bhi.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800645a:	d012      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800645c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006460:	d81a      	bhi.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006462:	2b00      	cmp	r3, #0
 8006464:	d022      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800646a:	d115      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800646c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006470:	3308      	adds	r3, #8
 8006472:	2100      	movs	r1, #0
 8006474:	4618      	mov	r0, r3
 8006476:	f001 fc81 	bl	8007d7c <RCCEx_PLL2_Config>
 800647a:	4603      	mov	r3, r0
 800647c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006480:	e015      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006486:	3328      	adds	r3, #40	; 0x28
 8006488:	2102      	movs	r1, #2
 800648a:	4618      	mov	r0, r3
 800648c:	f001 fd28 	bl	8007ee0 <RCCEx_PLL3_Config>
 8006490:	4603      	mov	r3, r0
 8006492:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006496:	e00a      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800649e:	e006      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80064a0:	bf00      	nop
 80064a2:	e004      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80064a4:	bf00      	nop
 80064a6:	e002      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80064a8:	bf00      	nop
 80064aa:	e000      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80064ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10e      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064b6:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80064b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ba:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80064be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064c6:	4a02      	ldr	r2, [pc, #8]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80064c8:	430b      	orrs	r3, r1
 80064ca:	6593      	str	r3, [r2, #88]	; 0x58
 80064cc:	e006      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80064ce:	bf00      	nop
 80064d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80064d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80064dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80064e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064ec:	2300      	movs	r3, #0
 80064ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064f2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80064f6:	460b      	mov	r3, r1
 80064f8:	4313      	orrs	r3, r2
 80064fa:	d055      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80064fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006500:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006504:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006508:	d033      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800650a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800650e:	d82c      	bhi.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006514:	d02f      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651a:	d826      	bhi.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800651c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006520:	d02b      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006522:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006526:	d820      	bhi.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800652c:	d012      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800652e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006532:	d81a      	bhi.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8006534:	2b00      	cmp	r3, #0
 8006536:	d022      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653c:	d115      	bne.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800653e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006542:	3308      	adds	r3, #8
 8006544:	2100      	movs	r1, #0
 8006546:	4618      	mov	r0, r3
 8006548:	f001 fc18 	bl	8007d7c <RCCEx_PLL2_Config>
 800654c:	4603      	mov	r3, r0
 800654e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006552:	e015      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006558:	3328      	adds	r3, #40	; 0x28
 800655a:	2102      	movs	r1, #2
 800655c:	4618      	mov	r0, r3
 800655e:	f001 fcbf 	bl	8007ee0 <RCCEx_PLL3_Config>
 8006562:	4603      	mov	r3, r0
 8006564:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006568:	e00a      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8006570:	e006      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006572:	bf00      	nop
 8006574:	e004      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8006576:	bf00      	nop
 8006578:	e002      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800657a:	bf00      	nop
 800657c:	e000      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800657e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006580:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10b      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006588:	4ba1      	ldr	r3, [pc, #644]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800658a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800658c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006594:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006598:	4a9d      	ldr	r2, [pc, #628]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800659a:	430b      	orrs	r3, r1
 800659c:	6593      	str	r3, [r2, #88]	; 0x58
 800659e:	e003      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80065a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80065a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f002 0308 	and.w	r3, r2, #8
 80065b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80065be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80065c2:	460b      	mov	r3, r1
 80065c4:	4313      	orrs	r3, r2
 80065c6:	d01e      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80065c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d4:	d10c      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065da:	3328      	adds	r3, #40	; 0x28
 80065dc:	2102      	movs	r1, #2
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 fc7e 	bl	8007ee0 <RCCEx_PLL3_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80065f0:	4b87      	ldr	r3, [pc, #540]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006600:	4a83      	ldr	r2, [pc, #524]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006602:	430b      	orrs	r3, r1
 8006604:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	f002 0310 	and.w	r3, r2, #16
 8006612:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006616:	2300      	movs	r3, #0
 8006618:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800661c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006620:	460b      	mov	r3, r1
 8006622:	4313      	orrs	r3, r2
 8006624:	d01e      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800662a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800662e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006632:	d10c      	bne.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006638:	3328      	adds	r3, #40	; 0x28
 800663a:	2102      	movs	r1, #2
 800663c:	4618      	mov	r0, r3
 800663e:	f001 fc4f 	bl	8007ee0 <RCCEx_PLL3_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800664e:	4b70      	ldr	r3, [pc, #448]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006652:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800665a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800665e:	4a6c      	ldr	r2, [pc, #432]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006660:	430b      	orrs	r3, r1
 8006662:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006664:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006674:	2300      	movs	r3, #0
 8006676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800667a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800667e:	460b      	mov	r3, r1
 8006680:	4313      	orrs	r3, r2
 8006682:	d03e      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006688:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800668c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006690:	d022      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8006692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006696:	d81b      	bhi.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800669c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066a0:	d00b      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80066a2:	e015      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a8:	3308      	adds	r3, #8
 80066aa:	2100      	movs	r1, #0
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 fb65 	bl	8007d7c <RCCEx_PLL2_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066b8:	e00f      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066be:	3328      	adds	r3, #40	; 0x28
 80066c0:	2102      	movs	r1, #2
 80066c2:	4618      	mov	r0, r3
 80066c4:	f001 fc0c 	bl	8007ee0 <RCCEx_PLL3_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80066ce:	e004      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80066d6:	e000      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80066d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066e2:	4b4b      	ldr	r3, [pc, #300]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80066e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80066ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066f2:	4a47      	ldr	r2, [pc, #284]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80066f4:	430b      	orrs	r3, r1
 80066f6:	6593      	str	r3, [r2, #88]	; 0x58
 80066f8:	e003      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80066fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800670e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006710:	2300      	movs	r3, #0
 8006712:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006714:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006718:	460b      	mov	r3, r1
 800671a:	4313      	orrs	r3, r2
 800671c:	d03b      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800671e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006726:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800672a:	d01f      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800672c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006730:	d818      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006736:	d003      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8006738:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800673c:	d007      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800673e:	e011      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006740:	4b33      	ldr	r3, [pc, #204]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	4a32      	ldr	r2, [pc, #200]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800674a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800674c:	e00f      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800674e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006752:	3328      	adds	r3, #40	; 0x28
 8006754:	2101      	movs	r1, #1
 8006756:	4618      	mov	r0, r3
 8006758:	f001 fbc2 	bl	8007ee0 <RCCEx_PLL3_Config>
 800675c:	4603      	mov	r3, r0
 800675e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006762:	e004      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800676a:	e000      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800676c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10b      	bne.n	800678e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006776:	4b26      	ldr	r3, [pc, #152]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800677e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006786:	4a22      	ldr	r2, [pc, #136]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006788:	430b      	orrs	r3, r1
 800678a:	6553      	str	r3, [r2, #84]	; 0x54
 800678c:	e003      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006792:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80067a2:	673b      	str	r3, [r7, #112]	; 0x70
 80067a4:	2300      	movs	r3, #0
 80067a6:	677b      	str	r3, [r7, #116]	; 0x74
 80067a8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80067ac:	460b      	mov	r3, r1
 80067ae:	4313      	orrs	r3, r2
 80067b0:	d034      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80067b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80067bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c0:	d007      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80067c2:	e011      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c4:	4b12      	ldr	r3, [pc, #72]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	4a11      	ldr	r2, [pc, #68]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067d0:	e00e      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067d6:	3308      	adds	r3, #8
 80067d8:	2102      	movs	r1, #2
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 face 	bl	8007d7c <RCCEx_PLL2_Config>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80067e6:	e003      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80067ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10d      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006806:	4a02      	ldr	r2, [pc, #8]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006808:	430b      	orrs	r3, r1
 800680a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800680c:	e006      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800680e:	bf00      	nop
 8006810:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006814:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006818:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800681c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006824:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006828:	66bb      	str	r3, [r7, #104]	; 0x68
 800682a:	2300      	movs	r3, #0
 800682c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800682e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006832:	460b      	mov	r3, r1
 8006834:	4313      	orrs	r3, r2
 8006836:	d00c      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800683c:	3328      	adds	r3, #40	; 0x28
 800683e:	2102      	movs	r1, #2
 8006840:	4618      	mov	r0, r3
 8006842:	f001 fb4d 	bl	8007ee0 <RCCEx_PLL3_Config>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800685e:	663b      	str	r3, [r7, #96]	; 0x60
 8006860:	2300      	movs	r3, #0
 8006862:	667b      	str	r3, [r7, #100]	; 0x64
 8006864:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006868:	460b      	mov	r3, r1
 800686a:	4313      	orrs	r3, r2
 800686c:	d038      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800686e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800687a:	d018      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800687c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006880:	d811      	bhi.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8006882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006886:	d014      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800688c:	d80b      	bhi.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d011      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8006892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006896:	d106      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006898:	4bc3      	ldr	r3, [pc, #780]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689c:	4ac2      	ldr	r2, [pc, #776]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800689e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80068a4:	e008      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80068ac:	e004      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80068ae:	bf00      	nop
 80068b0:	e002      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80068b2:	bf00      	nop
 80068b4:	e000      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80068b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10b      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068c0:	4bb9      	ldr	r3, [pc, #740]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80068c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80068c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d0:	4ab5      	ldr	r2, [pc, #724]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80068d2:	430b      	orrs	r3, r1
 80068d4:	6553      	str	r3, [r2, #84]	; 0x54
 80068d6:	e003      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80068dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80068ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80068ee:	2300      	movs	r3, #0
 80068f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80068f6:	460b      	mov	r3, r1
 80068f8:	4313      	orrs	r3, r2
 80068fa:	d009      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068fc:	4baa      	ldr	r3, [pc, #680]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80068fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006900:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800690a:	4aa7      	ldr	r2, [pc, #668]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800690c:	430b      	orrs	r3, r1
 800690e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800691c:	653b      	str	r3, [r7, #80]	; 0x50
 800691e:	2300      	movs	r3, #0
 8006920:	657b      	str	r3, [r7, #84]	; 0x54
 8006922:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006926:	460b      	mov	r3, r1
 8006928:	4313      	orrs	r3, r2
 800692a:	d009      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800692c:	4b9e      	ldr	r3, [pc, #632]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800692e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006930:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693a:	4a9b      	ldr	r2, [pc, #620]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800693c:	430b      	orrs	r3, r1
 800693e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800694c:	64bb      	str	r3, [r7, #72]	; 0x48
 800694e:	2300      	movs	r3, #0
 8006950:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006952:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006956:	460b      	mov	r3, r1
 8006958:	4313      	orrs	r3, r2
 800695a:	d009      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800695c:	4b92      	ldr	r3, [pc, #584]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800695e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006960:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8006964:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696a:	4a8f      	ldr	r2, [pc, #572]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800696c:	430b      	orrs	r3, r1
 800696e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800697c:	643b      	str	r3, [r7, #64]	; 0x40
 800697e:	2300      	movs	r3, #0
 8006980:	647b      	str	r3, [r7, #68]	; 0x44
 8006982:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006986:	460b      	mov	r3, r1
 8006988:	4313      	orrs	r3, r2
 800698a:	d00e      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800698c:	4b86      	ldr	r3, [pc, #536]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	4a85      	ldr	r2, [pc, #532]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006992:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006996:	6113      	str	r3, [r2, #16]
 8006998:	4b83      	ldr	r3, [pc, #524]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800699a:	6919      	ldr	r1, [r3, #16]
 800699c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80069a4:	4a80      	ldr	r2, [pc, #512]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80069a6:	430b      	orrs	r3, r1
 80069a8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80069aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80069b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069b8:	2300      	movs	r3, #0
 80069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069bc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80069c0:	460b      	mov	r3, r1
 80069c2:	4313      	orrs	r3, r2
 80069c4:	d009      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069c6:	4b78      	ldr	r3, [pc, #480]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80069c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80069ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d4:	4a74      	ldr	r2, [pc, #464]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80069d6:	430b      	orrs	r3, r1
 80069d8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80069e6:	633b      	str	r3, [r7, #48]	; 0x30
 80069e8:	2300      	movs	r3, #0
 80069ea:	637b      	str	r3, [r7, #52]	; 0x34
 80069ec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80069f0:	460b      	mov	r3, r1
 80069f2:	4313      	orrs	r3, r2
 80069f4:	d00a      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069f6:	4b6c      	ldr	r3, [pc, #432]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80069f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fa:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80069fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a06:	4a68      	ldr	r2, [pc, #416]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8006a08:	430b      	orrs	r3, r1
 8006a0a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a14:	2100      	movs	r1, #0
 8006a16:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a1e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006a22:	460b      	mov	r3, r1
 8006a24:	4313      	orrs	r3, r2
 8006a26:	d011      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	2100      	movs	r1, #0
 8006a30:	4618      	mov	r0, r3
 8006a32:	f001 f9a3 	bl	8007d7c <RCCEx_PLL2_Config>
 8006a36:	4603      	mov	r3, r0
 8006a38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006a3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	2100      	movs	r1, #0
 8006a56:	6239      	str	r1, [r7, #32]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006a62:	460b      	mov	r3, r1
 8006a64:	4313      	orrs	r3, r2
 8006a66:	d011      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a6c:	3308      	adds	r3, #8
 8006a6e:	2101      	movs	r1, #1
 8006a70:	4618      	mov	r0, r3
 8006a72:	f001 f983 	bl	8007d7c <RCCEx_PLL2_Config>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006a7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006a88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	2100      	movs	r1, #0
 8006a96:	61b9      	str	r1, [r7, #24]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	61fb      	str	r3, [r7, #28]
 8006a9e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	d011      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aac:	3308      	adds	r3, #8
 8006aae:	2102      	movs	r1, #2
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f001 f963 	bl	8007d7c <RCCEx_PLL2_Config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006abc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006ac8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	6139      	str	r1, [r7, #16]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	d011      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aec:	3328      	adds	r3, #40	; 0x28
 8006aee:	2100      	movs	r1, #0
 8006af0:	4618      	mov	r0, r3
 8006af2:	f001 f9f5 	bl	8007ee0 <RCCEx_PLL3_Config>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8006afc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d003      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b08:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b14:	2100      	movs	r1, #0
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b22:	460b      	mov	r3, r1
 8006b24:	4313      	orrs	r3, r2
 8006b26:	d011      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b2c:	3328      	adds	r3, #40	; 0x28
 8006b2e:	2101      	movs	r1, #1
 8006b30:	4618      	mov	r0, r3
 8006b32:	f001 f9d5 	bl	8007ee0 <RCCEx_PLL3_Config>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006b3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	2100      	movs	r1, #0
 8006b56:	6039      	str	r1, [r7, #0]
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	607b      	str	r3, [r7, #4]
 8006b5e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b62:	460b      	mov	r3, r1
 8006b64:	4313      	orrs	r3, r2
 8006b66:	d011      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b6c:	3328      	adds	r3, #40	; 0x28
 8006b6e:	2102      	movs	r1, #2
 8006b70:	4618      	mov	r0, r3
 8006b72:	f001 f9b5 	bl	8007ee0 <RCCEx_PLL3_Config>
 8006b76:	4603      	mov	r3, r0
 8006b78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8006b7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d003      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8006b88:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8006b8c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	e000      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ba6:	bf00      	nop
 8006ba8:	58024400 	.word	0x58024400

08006bac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b090      	sub	sp, #64	; 0x40
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006bb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bba:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006bbe:	430b      	orrs	r3, r1
 8006bc0:	f040 8094 	bne.w	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006bc4:	4b97      	ldr	r3, [pc, #604]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	f200 8087 	bhi.w	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006bd6:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006bf1 	.word	0x08006bf1
 8006be0:	08006c19 	.word	0x08006c19
 8006be4:	08006c41 	.word	0x08006c41
 8006be8:	08006cdd 	.word	0x08006cdd
 8006bec:	08006c69 	.word	0x08006c69
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bf0:	4b8c      	ldr	r3, [pc, #560]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bfc:	d108      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 ff68 	bl	8007ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c0c:	f000 bc97 	b.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006c10:	2300      	movs	r3, #0
 8006c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c14:	f000 bc93 	b.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c18:	4b82      	ldr	r3, [pc, #520]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c24:	d108      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c26:	f107 0318 	add.w	r3, r7, #24
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fcac 	bl	8007588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c34:	f000 bc83 	b.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c3c:	f000 bc7f 	b.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c40:	4b78      	ldr	r3, [pc, #480]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c4c:	d108      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c4e:	f107 030c 	add.w	r3, r7, #12
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fdec 	bl	8007830 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c5c:	f000 bc6f 	b.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c64:	f000 bc6b 	b.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c68:	4b6e      	ldr	r3, [pc, #440]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c70:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c72:	4b6c      	ldr	r3, [pc, #432]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0304 	and.w	r3, r3, #4
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d10c      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d109      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c84:	4b67      	ldr	r3, [pc, #412]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	08db      	lsrs	r3, r3, #3
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	4a66      	ldr	r2, [pc, #408]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006c90:	fa22 f303 	lsr.w	r3, r2, r3
 8006c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c96:	e01f      	b.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c98:	4b62      	ldr	r3, [pc, #392]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ca4:	d106      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cac:	d102      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cae:	4b5f      	ldr	r3, [pc, #380]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cb2:	e011      	b.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cb4:	4b5b      	ldr	r3, [pc, #364]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cc0:	d106      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cc8:	d102      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006cca:	4b59      	ldr	r3, [pc, #356]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cce:	e003      	b.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006cd4:	f000 bc33 	b.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006cd8:	f000 bc31 	b.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006cdc:	4b55      	ldr	r3, [pc, #340]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ce0:	f000 bc2d 	b.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ce8:	f000 bc29 	b.w	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cf0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006cf4:	430b      	orrs	r3, r1
 8006cf6:	f040 809f 	bne.w	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8006cfa:	4b4a      	ldr	r3, [pc, #296]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006d02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0a:	d04d      	beq.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d12:	f200 8084 	bhi.w	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	2bc0      	cmp	r3, #192	; 0xc0
 8006d1a:	d07d      	beq.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d20:	d87d      	bhi.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	2b80      	cmp	r3, #128	; 0x80
 8006d26:	d02d      	beq.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	2b80      	cmp	r3, #128	; 0x80
 8006d2c:	d877      	bhi.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	2b40      	cmp	r3, #64	; 0x40
 8006d38:	d012      	beq.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006d3a:	e070      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d3c:	4b39      	ldr	r3, [pc, #228]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d48:	d107      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fec2 	bl	8007ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d58:	e3f1      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d5e:	e3ee      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d60:	4b30      	ldr	r3, [pc, #192]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d6c:	d107      	bne.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d6e:	f107 0318 	add.w	r3, r7, #24
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fc08 	bl	8007588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d7c:	e3df      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d82:	e3dc      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d84:	4b27      	ldr	r3, [pc, #156]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d90:	d107      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d92:	f107 030c 	add.w	r3, r7, #12
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fd4a 	bl	8007830 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006da0:	e3cd      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da6:	e3ca      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006da8:	4b1e      	ldr	r3, [pc, #120]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006db2:	4b1c      	ldr	r3, [pc, #112]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0304 	and.w	r3, r3, #4
 8006dba:	2b04      	cmp	r3, #4
 8006dbc:	d10c      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8006dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d109      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dc4:	4b17      	ldr	r3, [pc, #92]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	08db      	lsrs	r3, r3, #3
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	4a16      	ldr	r2, [pc, #88]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd6:	e01e      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dd8:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de4:	d106      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8006de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dec:	d102      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006dee:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df2:	e010      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006df4:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e00:	d106      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e08:	d102      	bne.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e0a:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e0e:	e002      	b.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e14:	e393      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006e16:	e392      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e18:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e1c:	e38f      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e22:	e38c      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006e24:	58024400 	.word	0x58024400
 8006e28:	03d09000 	.word	0x03d09000
 8006e2c:	003d0900 	.word	0x003d0900
 8006e30:	007a1200 	.word	0x007a1200
 8006e34:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e3c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006e40:	430b      	orrs	r3, r1
 8006e42:	f040 809c 	bne.w	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8006e46:	4b9e      	ldr	r3, [pc, #632]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006e4e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e56:	d054      	beq.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e5e:	f200 808b 	bhi.w	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e68:	f000 8083 	beq.w	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e72:	f200 8081 	bhi.w	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e7c:	d02f      	beq.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e84:	d878      	bhi.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d004      	beq.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e92:	d012      	beq.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8006e94:	e070      	b.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e96:	4b8a      	ldr	r3, [pc, #552]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ea2:	d107      	bne.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fe15 	bl	8007ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb2:	e344      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb8:	e341      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006eba:	4b81      	ldr	r3, [pc, #516]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ec6:	d107      	bne.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ec8:	f107 0318 	add.w	r3, r7, #24
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fb5b 	bl	8007588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ed6:	e332      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006edc:	e32f      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ede:	4b78      	ldr	r3, [pc, #480]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eea:	d107      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eec:	f107 030c 	add.w	r3, r7, #12
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 fc9d 	bl	8007830 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006efa:	e320      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f00:	e31d      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f02:	4b6f      	ldr	r3, [pc, #444]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f0c:	4b6c      	ldr	r3, [pc, #432]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d10c      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d109      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f1e:	4b68      	ldr	r3, [pc, #416]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	08db      	lsrs	r3, r3, #3
 8006f24:	f003 0303 	and.w	r3, r3, #3
 8006f28:	4a66      	ldr	r2, [pc, #408]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8006f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f30:	e01e      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f32:	4b63      	ldr	r3, [pc, #396]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f3e:	d106      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f46:	d102      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f48:	4b5f      	ldr	r3, [pc, #380]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8006f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f4c:	e010      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f4e:	4b5c      	ldr	r3, [pc, #368]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f5a:	d106      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f62:	d102      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f64:	4b59      	ldr	r3, [pc, #356]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f68:	e002      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 8006f6e:	e2e6      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006f70:	e2e5      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f72:	4b57      	ldr	r3, [pc, #348]	; (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f76:	e2e2      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f7c:	e2df      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f82:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006f86:	430b      	orrs	r3, r1
 8006f88:	f040 80a7 	bne.w	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006f8c:	4b4c      	ldr	r3, [pc, #304]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f90:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006f94:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f9c:	d055      	beq.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fa4:	f200 8096 	bhi.w	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fae:	f000 8084 	beq.w	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fb8:	f200 808c 	bhi.w	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fc2:	d030      	beq.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fca:	f200 8083 	bhi.w	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d004      	beq.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fda:	d012      	beq.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8006fdc:	e07a      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fde:	4b38      	ldr	r3, [pc, #224]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fea:	d107      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 fd71 	bl	8007ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ffa:	e2a0      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007000:	e29d      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007002:	4b2f      	ldr	r3, [pc, #188]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800700a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800700e:	d107      	bne.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007010:	f107 0318 	add.w	r3, r7, #24
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fab7 	bl	8007588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800701e:	e28e      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007024:	e28b      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007026:	4b26      	ldr	r3, [pc, #152]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800702e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007032:	d107      	bne.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007034:	f107 030c 	add.w	r3, r7, #12
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fbf9 	bl	8007830 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007042:	e27c      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007044:	2300      	movs	r3, #0
 8007046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007048:	e279      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800704a:	4b1d      	ldr	r3, [pc, #116]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800704c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800704e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007052:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007054:	4b1a      	ldr	r3, [pc, #104]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b04      	cmp	r3, #4
 800705e:	d10c      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007062:	2b00      	cmp	r3, #0
 8007064:	d109      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007066:	4b16      	ldr	r3, [pc, #88]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	08db      	lsrs	r3, r3, #3
 800706c:	f003 0303 	and.w	r3, r3, #3
 8007070:	4a14      	ldr	r2, [pc, #80]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8007072:	fa22 f303 	lsr.w	r3, r2, r3
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007078:	e01e      	b.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800707a:	4b11      	ldr	r3, [pc, #68]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007086:	d106      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800708e:	d102      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007090:	4b0d      	ldr	r3, [pc, #52]	; (80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8007092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007094:	e010      	b.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007096:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800709e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070a2:	d106      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80070a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070aa:	d102      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070ac:	4b07      	ldr	r3, [pc, #28]	; (80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b0:	e002      	b.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80070b6:	e242      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80070b8:	e241      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80070ba:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070be:	e23e      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80070c0:	58024400 	.word	0x58024400
 80070c4:	03d09000 	.word	0x03d09000
 80070c8:	003d0900 	.word	0x003d0900
 80070cc:	007a1200 	.word	0x007a1200
 80070d0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070d8:	e231      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80070da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070de:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80070e2:	430b      	orrs	r3, r1
 80070e4:	f040 8085 	bne.w	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80070e8:	4b9c      	ldr	r3, [pc, #624]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80070ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ec:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80070f0:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80070f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070f8:	d06b      	beq.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007100:	d874      	bhi.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007104:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007108:	d056      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007110:	d86c      	bhi.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007118:	d03b      	beq.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007120:	d864      	bhi.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007128:	d021      	beq.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007130:	d85c      	bhi.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8007132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007134:	2b00      	cmp	r3, #0
 8007136:	d004      	beq.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800713e:	d004      	beq.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8007140:	e054      	b.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007142:	f7fe fb49 	bl	80057d8 <HAL_RCC_GetPCLK1Freq>
 8007146:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007148:	e1f9      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800714a:	4b84      	ldr	r3, [pc, #528]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007156:	d107      	bne.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007158:	f107 0318 	add.w	r3, r7, #24
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fa13 	bl	8007588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007166:	e1ea      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007168:	2300      	movs	r3, #0
 800716a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800716c:	e1e7      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800716e:	4b7b      	ldr	r3, [pc, #492]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717a:	d107      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800717c:	f107 030c 	add.w	r3, r7, #12
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fb55 	bl	8007830 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800718a:	e1d8      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007190:	e1d5      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007192:	4b72      	ldr	r3, [pc, #456]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0304 	and.w	r3, r3, #4
 800719a:	2b04      	cmp	r3, #4
 800719c:	d109      	bne.n	80071b2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800719e:	4b6f      	ldr	r3, [pc, #444]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	08db      	lsrs	r3, r3, #3
 80071a4:	f003 0303 	and.w	r3, r3, #3
 80071a8:	4a6d      	ldr	r2, [pc, #436]	; (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80071aa:	fa22 f303 	lsr.w	r3, r2, r3
 80071ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071b0:	e1c5      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071b6:	e1c2      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80071b8:	4b68      	ldr	r3, [pc, #416]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c4:	d102      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80071c6:	4b67      	ldr	r3, [pc, #412]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071ca:	e1b8      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071d0:	e1b5      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80071d2:	4b62      	ldr	r3, [pc, #392]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071de:	d102      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80071e0:	4b61      	ldr	r3, [pc, #388]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80071e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071e4:	e1ab      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ea:	e1a8      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071f0:	e1a5      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80071f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f6:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80071fa:	430b      	orrs	r3, r1
 80071fc:	d173      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80071fe:	4b57      	ldr	r3, [pc, #348]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007206:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800720e:	d02f      	beq.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8007210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007216:	d863      	bhi.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721a:	2b00      	cmp	r3, #0
 800721c:	d004      	beq.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007224:	d012      	beq.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8007226:	e05b      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007228:	4b4c      	ldr	r3, [pc, #304]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007234:	d107      	bne.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007236:	f107 0318 	add.w	r3, r7, #24
 800723a:	4618      	mov	r0, r3
 800723c:	f000 f9a4 	bl	8007588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007244:	e17b      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007246:	2300      	movs	r3, #0
 8007248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800724a:	e178      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800724c:	4b43      	ldr	r3, [pc, #268]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007258:	d107      	bne.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800725a:	f107 030c 	add.w	r3, r7, #12
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fae6 	bl	8007830 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007268:	e169      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800726e:	e166      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007270:	4b3a      	ldr	r3, [pc, #232]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007278:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800727a:	4b38      	ldr	r3, [pc, #224]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0304 	and.w	r3, r3, #4
 8007282:	2b04      	cmp	r3, #4
 8007284:	d10c      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8007286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007288:	2b00      	cmp	r3, #0
 800728a:	d109      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800728c:	4b33      	ldr	r3, [pc, #204]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	08db      	lsrs	r3, r3, #3
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	4a32      	ldr	r2, [pc, #200]	; (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007298:	fa22 f303 	lsr.w	r3, r2, r3
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800729e:	e01e      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072a0:	4b2e      	ldr	r3, [pc, #184]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ac:	d106      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80072ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072b4:	d102      	bne.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072b6:	4b2b      	ldr	r3, [pc, #172]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072ba:	e010      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072bc:	4b27      	ldr	r3, [pc, #156]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072c8:	d106      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80072ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d0:	d102      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80072d2:	4b25      	ldr	r3, [pc, #148]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80072d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072d6:	e002      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80072dc:	e12f      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80072de:	e12e      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072e4:	e12b      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80072e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072ea:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80072ee:	430b      	orrs	r3, r1
 80072f0:	d13c      	bne.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80072f2:	4b1a      	ldr	r3, [pc, #104]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80072f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80072fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007308:	d012      	beq.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800730a:	e023      	b.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800730c:	4b13      	ldr	r3, [pc, #76]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007314:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007318:	d107      	bne.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800731a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fbda 	bl	8007ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007328:	e109      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800732a:	2300      	movs	r3, #0
 800732c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800732e:	e106      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007330:	4b0a      	ldr	r3, [pc, #40]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007338:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800733c:	d107      	bne.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800733e:	f107 0318 	add.w	r3, r7, #24
 8007342:	4618      	mov	r0, r3
 8007344:	f000 f920 	bl	8007588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800734c:	e0f7      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007352:	e0f4      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007358:	e0f1      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800735a:	bf00      	nop
 800735c:	58024400 	.word	0x58024400
 8007360:	03d09000 	.word	0x03d09000
 8007364:	003d0900 	.word	0x003d0900
 8007368:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800736c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007370:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007374:	430b      	orrs	r3, r1
 8007376:	f040 8091 	bne.w	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800737a:	4b73      	ldr	r3, [pc, #460]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800737c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007382:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800738a:	f000 8081 	beq.w	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007394:	d87f      	bhi.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800739c:	d06b      	beq.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073a4:	d877      	bhi.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ac:	d056      	beq.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80073ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b4:	d86f      	bhi.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073bc:	d03b      	beq.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80073be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073c4:	d867      	bhi.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80073c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073cc:	d021      	beq.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80073ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073d4:	d85f      	bhi.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80073d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d004      	beq.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073e2:	d004      	beq.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80073e4:	e057      	b.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80073e6:	f000 f8b9 	bl	800755c <HAL_RCCEx_GetD3PCLK1Freq>
 80073ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073ec:	e0a7      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073ee:	4b56      	ldr	r3, [pc, #344]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073fa:	d107      	bne.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073fc:	f107 0318 	add.w	r3, r7, #24
 8007400:	4618      	mov	r0, r3
 8007402:	f000 f8c1 	bl	8007588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800740a:	e098      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800740c:	2300      	movs	r3, #0
 800740e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007410:	e095      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007412:	4b4d      	ldr	r3, [pc, #308]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800741a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800741e:	d107      	bne.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007420:	f107 030c 	add.w	r3, r7, #12
 8007424:	4618      	mov	r0, r3
 8007426:	f000 fa03 	bl	8007830 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800742e:	e086      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007434:	e083      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007436:	4b44      	ldr	r3, [pc, #272]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b04      	cmp	r3, #4
 8007440:	d109      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007442:	4b41      	ldr	r3, [pc, #260]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	08db      	lsrs	r3, r3, #3
 8007448:	f003 0303 	and.w	r3, r3, #3
 800744c:	4a3f      	ldr	r2, [pc, #252]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800744e:	fa22 f303 	lsr.w	r3, r2, r3
 8007452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007454:	e073      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800745a:	e070      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800745c:	4b3a      	ldr	r3, [pc, #232]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007468:	d102      	bne.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800746a:	4b39      	ldr	r3, [pc, #228]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800746c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800746e:	e066      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007474:	e063      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007476:	4b34      	ldr	r3, [pc, #208]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800747e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007482:	d102      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8007484:	4b33      	ldr	r3, [pc, #204]	; (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8007486:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007488:	e059      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800748e:	e056      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007490:	4b31      	ldr	r3, [pc, #196]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007494:	e053      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800749a:	e050      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800749c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074a0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80074a4:	430b      	orrs	r3, r1
 80074a6:	d148      	bne.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80074a8:	4b27      	ldr	r3, [pc, #156]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80074aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074b0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b8:	d02a      	beq.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80074ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074c0:	d838      	bhi.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80074c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d004      	beq.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80074c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074ce:	d00d      	beq.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80074d0:	e030      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80074d2:	4b1d      	ldr	r3, [pc, #116]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074de:	d102      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80074e0:	4b1c      	ldr	r3, [pc, #112]	; (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80074e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074e4:	e02b      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80074e6:	2300      	movs	r3, #0
 80074e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074ea:	e028      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074ec:	4b16      	ldr	r3, [pc, #88]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074f8:	d107      	bne.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 faea 	bl	8007ad8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007508:	e019      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800750e:	e016      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007510:	4b0d      	ldr	r3, [pc, #52]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800751c:	d107      	bne.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800751e:	f107 0318 	add.w	r3, r7, #24
 8007522:	4618      	mov	r0, r3
 8007524:	f000 f830 	bl	8007588 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800752c:	e007      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800752e:	2300      	movs	r3, #0
 8007530:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007532:	e004      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007538:	e001      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007540:	4618      	mov	r0, r3
 8007542:	3740      	adds	r7, #64	; 0x40
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	58024400 	.word	0x58024400
 800754c:	03d09000 	.word	0x03d09000
 8007550:	003d0900 	.word	0x003d0900
 8007554:	007a1200 	.word	0x007a1200
 8007558:	00bb8000 	.word	0x00bb8000

0800755c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007560:	f7fe f90a 	bl	8005778 <HAL_RCC_GetHCLKFreq>
 8007564:	4602      	mov	r2, r0
 8007566:	4b06      	ldr	r3, [pc, #24]	; (8007580 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	091b      	lsrs	r3, r3, #4
 800756c:	f003 0307 	and.w	r3, r3, #7
 8007570:	4904      	ldr	r1, [pc, #16]	; (8007584 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007572:	5ccb      	ldrb	r3, [r1, r3]
 8007574:	f003 031f 	and.w	r3, r3, #31
 8007578:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800757c:	4618      	mov	r0, r3
 800757e:	bd80      	pop	{r7, pc}
 8007580:	58024400 	.word	0x58024400
 8007584:	08009fa0 	.word	0x08009fa0

08007588 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007588:	b480      	push	{r7}
 800758a:	b089      	sub	sp, #36	; 0x24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007590:	4ba1      	ldr	r3, [pc, #644]	; (8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	f003 0303 	and.w	r3, r3, #3
 8007598:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800759a:	4b9f      	ldr	r3, [pc, #636]	; (8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800759c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759e:	0b1b      	lsrs	r3, r3, #12
 80075a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80075a6:	4b9c      	ldr	r3, [pc, #624]	; (8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075aa:	091b      	lsrs	r3, r3, #4
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80075b2:	4b99      	ldr	r3, [pc, #612]	; (8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b6:	08db      	lsrs	r3, r3, #3
 80075b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	fb02 f303 	mul.w	r3, r2, r3
 80075c2:	ee07 3a90 	vmov	s15, r3
 80075c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 8111 	beq.w	80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	2b02      	cmp	r3, #2
 80075da:	f000 8083 	beq.w	80076e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	f200 80a1 	bhi.w	8007728 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d056      	beq.n	80076a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80075f2:	e099      	b.n	8007728 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075f4:	4b88      	ldr	r3, [pc, #544]	; (8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d02d      	beq.n	800765c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007600:	4b85      	ldr	r3, [pc, #532]	; (8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	08db      	lsrs	r3, r3, #3
 8007606:	f003 0303 	and.w	r3, r3, #3
 800760a:	4a84      	ldr	r2, [pc, #528]	; (800781c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800760c:	fa22 f303 	lsr.w	r3, r2, r3
 8007610:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	ee07 3a90 	vmov	s15, r3
 8007618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762a:	4b7b      	ldr	r3, [pc, #492]	; (8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800762c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763a:	ed97 6a03 	vldr	s12, [r7, #12]
 800763e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800764e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007656:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800765a:	e087      	b.n	800776c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007666:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007824 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800766a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800766e:	4b6a      	ldr	r3, [pc, #424]	; (8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800767e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007682:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800768e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800769e:	e065      	b.n	800776c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007828 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b2:	4b59      	ldr	r3, [pc, #356]	; (8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076e2:	e043      	b.n	800776c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800782c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80076f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f6:	4b48      	ldr	r3, [pc, #288]	; (8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007706:	ed97 6a03 	vldr	s12, [r7, #12]
 800770a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800770e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800771a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800771e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007726:	e021      	b.n	800776c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007732:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007828 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773a:	4b37      	ldr	r3, [pc, #220]	; (8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800773c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774a:	ed97 6a03 	vldr	s12, [r7, #12]
 800774e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007820 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800775e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800776a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800776c:	4b2a      	ldr	r3, [pc, #168]	; (8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	0a5b      	lsrs	r3, r3, #9
 8007772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007786:	edd7 6a07 	vldr	s13, [r7, #28]
 800778a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800778e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007792:	ee17 2a90 	vmov	r2, s15
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800779a:	4b1f      	ldr	r3, [pc, #124]	; (8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800779c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779e:	0c1b      	lsrs	r3, r3, #16
 80077a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a4:	ee07 3a90 	vmov	s15, r3
 80077a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80077b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077c0:	ee17 2a90 	vmov	r2, s15
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80077c8:	4b13      	ldr	r3, [pc, #76]	; (8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	0e1b      	lsrs	r3, r3, #24
 80077ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d2:	ee07 3a90 	vmov	s15, r3
 80077d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80077e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ee:	ee17 2a90 	vmov	r2, s15
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80077f6:	e008      	b.n	800780a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	609a      	str	r2, [r3, #8]
}
 800780a:	bf00      	nop
 800780c:	3724      	adds	r7, #36	; 0x24
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	58024400 	.word	0x58024400
 800781c:	03d09000 	.word	0x03d09000
 8007820:	46000000 	.word	0x46000000
 8007824:	4c742400 	.word	0x4c742400
 8007828:	4a742400 	.word	0x4a742400
 800782c:	4af42400 	.word	0x4af42400

08007830 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007830:	b480      	push	{r7}
 8007832:	b089      	sub	sp, #36	; 0x24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007838:	4ba1      	ldr	r3, [pc, #644]	; (8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	f003 0303 	and.w	r3, r3, #3
 8007840:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007842:	4b9f      	ldr	r3, [pc, #636]	; (8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	0d1b      	lsrs	r3, r3, #20
 8007848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800784c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800784e:	4b9c      	ldr	r3, [pc, #624]	; (8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007852:	0a1b      	lsrs	r3, r3, #8
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800785a:	4b99      	ldr	r3, [pc, #612]	; (8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800785c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785e:	08db      	lsrs	r3, r3, #3
 8007860:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	fb02 f303 	mul.w	r3, r2, r3
 800786a:	ee07 3a90 	vmov	s15, r3
 800786e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007872:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 8111 	beq.w	8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	2b02      	cmp	r3, #2
 8007882:	f000 8083 	beq.w	800798c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	2b02      	cmp	r3, #2
 800788a:	f200 80a1 	bhi.w	80079d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d056      	beq.n	8007948 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800789a:	e099      	b.n	80079d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800789c:	4b88      	ldr	r3, [pc, #544]	; (8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0320 	and.w	r3, r3, #32
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d02d      	beq.n	8007904 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078a8:	4b85      	ldr	r3, [pc, #532]	; (8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	08db      	lsrs	r3, r3, #3
 80078ae:	f003 0303 	and.w	r3, r3, #3
 80078b2:	4a84      	ldr	r2, [pc, #528]	; (8007ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80078b4:	fa22 f303 	lsr.w	r3, r2, r3
 80078b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	ee07 3a90 	vmov	s15, r3
 80078c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d2:	4b7b      	ldr	r3, [pc, #492]	; (8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007902:	e087      	b.n	8007a14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007acc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007916:	4b6a      	ldr	r3, [pc, #424]	; (8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791e:	ee07 3a90 	vmov	s15, r3
 8007922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007926:	ed97 6a03 	vldr	s12, [r7, #12]
 800792a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800792e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800793a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007946:	e065      	b.n	8007a14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007952:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795a:	4b59      	ldr	r3, [pc, #356]	; (8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800795c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007962:	ee07 3a90 	vmov	s15, r3
 8007966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800796a:	ed97 6a03 	vldr	s12, [r7, #12]
 800796e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800797a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800797e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800798a:	e043      	b.n	8007a14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007996:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800799a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800799e:	4b48      	ldr	r3, [pc, #288]	; (8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80079b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ce:	e021      	b.n	8007a14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e2:	4b37      	ldr	r3, [pc, #220]	; (8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007a14:	4b2a      	ldr	r3, [pc, #168]	; (8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a18:	0a5b      	lsrs	r3, r3, #9
 8007a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a3a:	ee17 2a90 	vmov	r2, s15
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a42:	4b1f      	ldr	r3, [pc, #124]	; (8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	0c1b      	lsrs	r3, r3, #16
 8007a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a4c:	ee07 3a90 	vmov	s15, r3
 8007a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a68:	ee17 2a90 	vmov	r2, s15
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a70:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	0e1b      	lsrs	r3, r3, #24
 8007a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a96:	ee17 2a90 	vmov	r2, s15
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a9e:	e008      	b.n	8007ab2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	609a      	str	r2, [r3, #8]
}
 8007ab2:	bf00      	nop
 8007ab4:	3724      	adds	r7, #36	; 0x24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	58024400 	.word	0x58024400
 8007ac4:	03d09000 	.word	0x03d09000
 8007ac8:	46000000 	.word	0x46000000
 8007acc:	4c742400 	.word	0x4c742400
 8007ad0:	4a742400 	.word	0x4a742400
 8007ad4:	4af42400 	.word	0x4af42400

08007ad8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b089      	sub	sp, #36	; 0x24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ae0:	4ba0      	ldr	r3, [pc, #640]	; (8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae4:	f003 0303 	and.w	r3, r3, #3
 8007ae8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007aea:	4b9e      	ldr	r3, [pc, #632]	; (8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aee:	091b      	lsrs	r3, r3, #4
 8007af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007af4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007af6:	4b9b      	ldr	r3, [pc, #620]	; (8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007b00:	4b98      	ldr	r3, [pc, #608]	; (8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b04:	08db      	lsrs	r3, r3, #3
 8007b06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	fb02 f303 	mul.w	r3, r2, r3
 8007b10:	ee07 3a90 	vmov	s15, r3
 8007b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b18:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 8111 	beq.w	8007d46 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	f000 8083 	beq.w	8007c32 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	f200 80a1 	bhi.w	8007c76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d056      	beq.n	8007bee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007b40:	e099      	b.n	8007c76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b42:	4b88      	ldr	r3, [pc, #544]	; (8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d02d      	beq.n	8007baa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b4e:	4b85      	ldr	r3, [pc, #532]	; (8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	08db      	lsrs	r3, r3, #3
 8007b54:	f003 0303 	and.w	r3, r3, #3
 8007b58:	4a83      	ldr	r2, [pc, #524]	; (8007d68 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b5e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	ee07 3a90 	vmov	s15, r3
 8007b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b78:	4b7a      	ldr	r3, [pc, #488]	; (8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b80:	ee07 3a90 	vmov	s15, r3
 8007b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b88:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b8c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007d6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007ba8:	e087      	b.n	8007cba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	ee07 3a90 	vmov	s15, r3
 8007bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bbc:	4b69      	ldr	r3, [pc, #420]	; (8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bc4:	ee07 3a90 	vmov	s15, r3
 8007bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bd0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007d6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bec:	e065      	b.n	8007cba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	ee07 3a90 	vmov	s15, r3
 8007bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007d74 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c00:	4b58      	ldr	r3, [pc, #352]	; (8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c08:	ee07 3a90 	vmov	s15, r3
 8007c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c10:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c14:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007d6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c30:	e043      	b.n	8007cba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	ee07 3a90 	vmov	s15, r3
 8007c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007d78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c44:	4b47      	ldr	r3, [pc, #284]	; (8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4c:	ee07 3a90 	vmov	s15, r3
 8007c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c54:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c58:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007d6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c74:	e021      	b.n	8007cba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	ee07 3a90 	vmov	s15, r3
 8007c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c80:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007d70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007c84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c88:	4b36      	ldr	r3, [pc, #216]	; (8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c90:	ee07 3a90 	vmov	s15, r3
 8007c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c98:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c9c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007d6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ca4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cb8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007cba:	4b2a      	ldr	r3, [pc, #168]	; (8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbe:	0a5b      	lsrs	r3, r3, #9
 8007cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ce0:	ee17 2a90 	vmov	r2, s15
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007ce8:	4b1e      	ldr	r3, [pc, #120]	; (8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cec:	0c1b      	lsrs	r3, r3, #16
 8007cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cf2:	ee07 3a90 	vmov	s15, r3
 8007cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d0e:	ee17 2a90 	vmov	r2, s15
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007d16:	4b13      	ldr	r3, [pc, #76]	; (8007d64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1a:	0e1b      	lsrs	r3, r3, #24
 8007d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d20:	ee07 3a90 	vmov	s15, r3
 8007d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d30:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d3c:	ee17 2a90 	vmov	r2, s15
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007d44:	e008      	b.n	8007d58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	609a      	str	r2, [r3, #8]
}
 8007d58:	bf00      	nop
 8007d5a:	3724      	adds	r7, #36	; 0x24
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	58024400 	.word	0x58024400
 8007d68:	03d09000 	.word	0x03d09000
 8007d6c:	46000000 	.word	0x46000000
 8007d70:	4c742400 	.word	0x4c742400
 8007d74:	4a742400 	.word	0x4a742400
 8007d78:	4af42400 	.word	0x4af42400

08007d7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d8a:	4b53      	ldr	r3, [pc, #332]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8e:	f003 0303 	and.w	r3, r3, #3
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d101      	bne.n	8007d9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e099      	b.n	8007ece <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d9a:	4b4f      	ldr	r3, [pc, #316]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a4e      	ldr	r2, [pc, #312]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007da0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007da6:	f7fb fa01 	bl	80031ac <HAL_GetTick>
 8007daa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dac:	e008      	b.n	8007dc0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007dae:	f7fb f9fd 	bl	80031ac <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d901      	bls.n	8007dc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e086      	b.n	8007ece <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dc0:	4b45      	ldr	r3, [pc, #276]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1f0      	bne.n	8007dae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007dcc:	4b42      	ldr	r3, [pc, #264]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	031b      	lsls	r3, r3, #12
 8007dda:	493f      	ldr	r1, [pc, #252]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	628b      	str	r3, [r1, #40]	; 0x28
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	3b01      	subs	r3, #1
 8007de6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	025b      	lsls	r3, r3, #9
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	431a      	orrs	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	041b      	lsls	r3, r3, #16
 8007dfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e02:	431a      	orrs	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	061b      	lsls	r3, r3, #24
 8007e0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e10:	4931      	ldr	r1, [pc, #196]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e16:	4b30      	ldr	r3, [pc, #192]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	492d      	ldr	r1, [pc, #180]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e28:	4b2b      	ldr	r3, [pc, #172]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	f023 0220 	bic.w	r2, r3, #32
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	4928      	ldr	r1, [pc, #160]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e3a:	4b27      	ldr	r3, [pc, #156]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3e:	4a26      	ldr	r2, [pc, #152]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e40:	f023 0310 	bic.w	r3, r3, #16
 8007e44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e46:	4b24      	ldr	r3, [pc, #144]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e4a:	4b24      	ldr	r3, [pc, #144]	; (8007edc <RCCEx_PLL2_Config+0x160>)
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	69d2      	ldr	r2, [r2, #28]
 8007e52:	00d2      	lsls	r2, r2, #3
 8007e54:	4920      	ldr	r1, [pc, #128]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e5a:	4b1f      	ldr	r3, [pc, #124]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5e:	4a1e      	ldr	r2, [pc, #120]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e60:	f043 0310 	orr.w	r3, r3, #16
 8007e64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d106      	bne.n	8007e7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e6c:	4b1a      	ldr	r3, [pc, #104]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e70:	4a19      	ldr	r2, [pc, #100]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e78:	e00f      	b.n	8007e9a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d106      	bne.n	8007e8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007e80:	4b15      	ldr	r3, [pc, #84]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e84:	4a14      	ldr	r2, [pc, #80]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e8c:	e005      	b.n	8007e9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e8e:	4b12      	ldr	r3, [pc, #72]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e92:	4a11      	ldr	r2, [pc, #68]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a0e      	ldr	r2, [pc, #56]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007ea0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ea6:	f7fb f981 	bl	80031ac <HAL_GetTick>
 8007eaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007eac:	e008      	b.n	8007ec0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007eae:	f7fb f97d 	bl	80031ac <HAL_GetTick>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d901      	bls.n	8007ec0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e006      	b.n	8007ece <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ec0:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <RCCEx_PLL2_Config+0x15c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d0f0      	beq.n	8007eae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	58024400 	.word	0x58024400
 8007edc:	ffff0007 	.word	0xffff0007

08007ee0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007eee:	4b53      	ldr	r3, [pc, #332]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d101      	bne.n	8007efe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e099      	b.n	8008032 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007efe:	4b4f      	ldr	r3, [pc, #316]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a4e      	ldr	r2, [pc, #312]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f0a:	f7fb f94f 	bl	80031ac <HAL_GetTick>
 8007f0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f10:	e008      	b.n	8007f24 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f12:	f7fb f94b 	bl	80031ac <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d901      	bls.n	8007f24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e086      	b.n	8008032 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f24:	4b45      	ldr	r3, [pc, #276]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1f0      	bne.n	8007f12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007f30:	4b42      	ldr	r3, [pc, #264]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	051b      	lsls	r3, r3, #20
 8007f3e:	493f      	ldr	r1, [pc, #252]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	628b      	str	r3, [r1, #40]	; 0x28
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	025b      	lsls	r3, r3, #9
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	041b      	lsls	r3, r3, #16
 8007f62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f66:	431a      	orrs	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	061b      	lsls	r3, r3, #24
 8007f70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f74:	4931      	ldr	r1, [pc, #196]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f7a:	4b30      	ldr	r3, [pc, #192]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	492d      	ldr	r1, [pc, #180]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f8c:	4b2b      	ldr	r3, [pc, #172]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	4928      	ldr	r1, [pc, #160]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007f9e:	4b27      	ldr	r3, [pc, #156]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	4a26      	ldr	r2, [pc, #152]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007faa:	4b24      	ldr	r3, [pc, #144]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fae:	4b24      	ldr	r3, [pc, #144]	; (8008040 <RCCEx_PLL3_Config+0x160>)
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	69d2      	ldr	r2, [r2, #28]
 8007fb6:	00d2      	lsls	r2, r2, #3
 8007fb8:	4920      	ldr	r1, [pc, #128]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007fbe:	4b1f      	ldr	r3, [pc, #124]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc2:	4a1e      	ldr	r2, [pc, #120]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d106      	bne.n	8007fde <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007fd0:	4b1a      	ldr	r3, [pc, #104]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	4a19      	ldr	r2, [pc, #100]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007fd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fdc:	e00f      	b.n	8007ffe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d106      	bne.n	8007ff2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007fe4:	4b15      	ldr	r3, [pc, #84]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	4a14      	ldr	r2, [pc, #80]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007fea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ff0:	e005      	b.n	8007ffe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ff2:	4b12      	ldr	r3, [pc, #72]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff6:	4a11      	ldr	r2, [pc, #68]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8007ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007ffe:	4b0f      	ldr	r3, [pc, #60]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a0e      	ldr	r2, [pc, #56]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8008004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800800a:	f7fb f8cf 	bl	80031ac <HAL_GetTick>
 800800e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008010:	e008      	b.n	8008024 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008012:	f7fb f8cb 	bl	80031ac <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d901      	bls.n	8008024 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e006      	b.n	8008032 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008024:	4b05      	ldr	r3, [pc, #20]	; (800803c <RCCEx_PLL3_Config+0x15c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d0f0      	beq.n	8008012 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	58024400 	.word	0x58024400
 8008040:	ffff0007 	.word	0xffff0007

08008044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e042      	b.n	80080dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805c:	2b00      	cmp	r3, #0
 800805e:	d106      	bne.n	800806e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7f9 f921 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2224      	movs	r2, #36	; 0x24
 8008072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 0201 	bic.w	r2, r2, #1
 8008084:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f8ba 	bl	8008200 <UART_SetConfig>
 800808c:	4603      	mov	r3, r0
 800808e:	2b01      	cmp	r3, #1
 8008090:	d101      	bne.n	8008096 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e022      	b.n	80080dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809a:	2b00      	cmp	r3, #0
 800809c:	d002      	beq.n	80080a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 ff1a 	bl	8008ed8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f042 0201 	orr.w	r2, r2, #1
 80080d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 ffa1 	bl	800901c <UART_CheckIdleState>
 80080da:	4603      	mov	r3, r0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08a      	sub	sp, #40	; 0x28
 80080e8:	af02      	add	r7, sp, #8
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	603b      	str	r3, [r7, #0]
 80080f0:	4613      	mov	r3, r2
 80080f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fa:	2b20      	cmp	r3, #32
 80080fc:	d17b      	bne.n	80081f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <HAL_UART_Transmit+0x26>
 8008104:	88fb      	ldrh	r3, [r7, #6]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d101      	bne.n	800810e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e074      	b.n	80081f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2221      	movs	r2, #33	; 0x21
 800811a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800811e:	f7fb f845 	bl	80031ac <HAL_GetTick>
 8008122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	88fa      	ldrh	r2, [r7, #6]
 8008128:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	88fa      	ldrh	r2, [r7, #6]
 8008130:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813c:	d108      	bne.n	8008150 <HAL_UART_Transmit+0x6c>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d104      	bne.n	8008150 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008146:	2300      	movs	r3, #0
 8008148:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	61bb      	str	r3, [r7, #24]
 800814e:	e003      	b.n	8008158 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008154:	2300      	movs	r3, #0
 8008156:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008158:	e030      	b.n	80081bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2200      	movs	r2, #0
 8008162:	2180      	movs	r1, #128	; 0x80
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f001 f803 	bl	8009170 <UART_WaitOnFlagUntilTimeout>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d005      	beq.n	800817c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2220      	movs	r2, #32
 8008174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e03d      	b.n	80081f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10b      	bne.n	800819a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	881b      	ldrh	r3, [r3, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008190:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	3302      	adds	r3, #2
 8008196:	61bb      	str	r3, [r7, #24]
 8008198:	e007      	b.n	80081aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	781a      	ldrb	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	3301      	adds	r3, #1
 80081a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	3b01      	subs	r3, #1
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1c8      	bne.n	800815a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2200      	movs	r2, #0
 80081d0:	2140      	movs	r1, #64	; 0x40
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 ffcc 	bl	8009170 <UART_WaitOnFlagUntilTimeout>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2220      	movs	r2, #32
 80081e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e006      	b.n	80081f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	e000      	b.n	80081f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80081f6:	2302      	movs	r3, #2
  }
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3720      	adds	r7, #32
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008204:	b092      	sub	sp, #72	; 0x48
 8008206:	af00      	add	r7, sp, #0
 8008208:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	431a      	orrs	r2, r3
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	431a      	orrs	r2, r3
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	4313      	orrs	r3, r2
 8008226:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	4bbe      	ldr	r3, [pc, #760]	; (8008528 <UART_SetConfig+0x328>)
 8008230:	4013      	ands	r3, r2
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	6812      	ldr	r2, [r2, #0]
 8008236:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008238:	430b      	orrs	r3, r1
 800823a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4ab3      	ldr	r2, [pc, #716]	; (800852c <UART_SetConfig+0x32c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d004      	beq.n	800826c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008268:	4313      	orrs	r3, r2
 800826a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	4baf      	ldr	r3, [pc, #700]	; (8008530 <UART_SetConfig+0x330>)
 8008274:	4013      	ands	r3, r2
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	6812      	ldr	r2, [r2, #0]
 800827a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800827c:	430b      	orrs	r3, r1
 800827e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	f023 010f 	bic.w	r1, r3, #15
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4aa6      	ldr	r2, [pc, #664]	; (8008534 <UART_SetConfig+0x334>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d177      	bne.n	8008390 <UART_SetConfig+0x190>
 80082a0:	4ba5      	ldr	r3, [pc, #660]	; (8008538 <UART_SetConfig+0x338>)
 80082a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082a8:	2b28      	cmp	r3, #40	; 0x28
 80082aa:	d86d      	bhi.n	8008388 <UART_SetConfig+0x188>
 80082ac:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <UART_SetConfig+0xb4>)
 80082ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b2:	bf00      	nop
 80082b4:	08008359 	.word	0x08008359
 80082b8:	08008389 	.word	0x08008389
 80082bc:	08008389 	.word	0x08008389
 80082c0:	08008389 	.word	0x08008389
 80082c4:	08008389 	.word	0x08008389
 80082c8:	08008389 	.word	0x08008389
 80082cc:	08008389 	.word	0x08008389
 80082d0:	08008389 	.word	0x08008389
 80082d4:	08008361 	.word	0x08008361
 80082d8:	08008389 	.word	0x08008389
 80082dc:	08008389 	.word	0x08008389
 80082e0:	08008389 	.word	0x08008389
 80082e4:	08008389 	.word	0x08008389
 80082e8:	08008389 	.word	0x08008389
 80082ec:	08008389 	.word	0x08008389
 80082f0:	08008389 	.word	0x08008389
 80082f4:	08008369 	.word	0x08008369
 80082f8:	08008389 	.word	0x08008389
 80082fc:	08008389 	.word	0x08008389
 8008300:	08008389 	.word	0x08008389
 8008304:	08008389 	.word	0x08008389
 8008308:	08008389 	.word	0x08008389
 800830c:	08008389 	.word	0x08008389
 8008310:	08008389 	.word	0x08008389
 8008314:	08008371 	.word	0x08008371
 8008318:	08008389 	.word	0x08008389
 800831c:	08008389 	.word	0x08008389
 8008320:	08008389 	.word	0x08008389
 8008324:	08008389 	.word	0x08008389
 8008328:	08008389 	.word	0x08008389
 800832c:	08008389 	.word	0x08008389
 8008330:	08008389 	.word	0x08008389
 8008334:	08008379 	.word	0x08008379
 8008338:	08008389 	.word	0x08008389
 800833c:	08008389 	.word	0x08008389
 8008340:	08008389 	.word	0x08008389
 8008344:	08008389 	.word	0x08008389
 8008348:	08008389 	.word	0x08008389
 800834c:	08008389 	.word	0x08008389
 8008350:	08008389 	.word	0x08008389
 8008354:	08008381 	.word	0x08008381
 8008358:	2301      	movs	r3, #1
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835e:	e326      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008360:	2304      	movs	r3, #4
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008366:	e322      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008368:	2308      	movs	r3, #8
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836e:	e31e      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008370:	2310      	movs	r3, #16
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008376:	e31a      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008378:	2320      	movs	r3, #32
 800837a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800837e:	e316      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008380:	2340      	movs	r3, #64	; 0x40
 8008382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008386:	e312      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008388:	2380      	movs	r3, #128	; 0x80
 800838a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838e:	e30e      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a69      	ldr	r2, [pc, #420]	; (800853c <UART_SetConfig+0x33c>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d130      	bne.n	80083fc <UART_SetConfig+0x1fc>
 800839a:	4b67      	ldr	r3, [pc, #412]	; (8008538 <UART_SetConfig+0x338>)
 800839c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839e:	f003 0307 	and.w	r3, r3, #7
 80083a2:	2b05      	cmp	r3, #5
 80083a4:	d826      	bhi.n	80083f4 <UART_SetConfig+0x1f4>
 80083a6:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <UART_SetConfig+0x1ac>)
 80083a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ac:	080083c5 	.word	0x080083c5
 80083b0:	080083cd 	.word	0x080083cd
 80083b4:	080083d5 	.word	0x080083d5
 80083b8:	080083dd 	.word	0x080083dd
 80083bc:	080083e5 	.word	0x080083e5
 80083c0:	080083ed 	.word	0x080083ed
 80083c4:	2300      	movs	r3, #0
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ca:	e2f0      	b.n	80089ae <UART_SetConfig+0x7ae>
 80083cc:	2304      	movs	r3, #4
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d2:	e2ec      	b.n	80089ae <UART_SetConfig+0x7ae>
 80083d4:	2308      	movs	r3, #8
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083da:	e2e8      	b.n	80089ae <UART_SetConfig+0x7ae>
 80083dc:	2310      	movs	r3, #16
 80083de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e2:	e2e4      	b.n	80089ae <UART_SetConfig+0x7ae>
 80083e4:	2320      	movs	r3, #32
 80083e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ea:	e2e0      	b.n	80089ae <UART_SetConfig+0x7ae>
 80083ec:	2340      	movs	r3, #64	; 0x40
 80083ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f2:	e2dc      	b.n	80089ae <UART_SetConfig+0x7ae>
 80083f4:	2380      	movs	r3, #128	; 0x80
 80083f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fa:	e2d8      	b.n	80089ae <UART_SetConfig+0x7ae>
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a4f      	ldr	r2, [pc, #316]	; (8008540 <UART_SetConfig+0x340>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d130      	bne.n	8008468 <UART_SetConfig+0x268>
 8008406:	4b4c      	ldr	r3, [pc, #304]	; (8008538 <UART_SetConfig+0x338>)
 8008408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800840a:	f003 0307 	and.w	r3, r3, #7
 800840e:	2b05      	cmp	r3, #5
 8008410:	d826      	bhi.n	8008460 <UART_SetConfig+0x260>
 8008412:	a201      	add	r2, pc, #4	; (adr r2, 8008418 <UART_SetConfig+0x218>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	08008431 	.word	0x08008431
 800841c:	08008439 	.word	0x08008439
 8008420:	08008441 	.word	0x08008441
 8008424:	08008449 	.word	0x08008449
 8008428:	08008451 	.word	0x08008451
 800842c:	08008459 	.word	0x08008459
 8008430:	2300      	movs	r3, #0
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008436:	e2ba      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008438:	2304      	movs	r3, #4
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843e:	e2b6      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008440:	2308      	movs	r3, #8
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008446:	e2b2      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008448:	2310      	movs	r3, #16
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844e:	e2ae      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008450:	2320      	movs	r3, #32
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008456:	e2aa      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008458:	2340      	movs	r3, #64	; 0x40
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845e:	e2a6      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008460:	2380      	movs	r3, #128	; 0x80
 8008462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008466:	e2a2      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a35      	ldr	r2, [pc, #212]	; (8008544 <UART_SetConfig+0x344>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d130      	bne.n	80084d4 <UART_SetConfig+0x2d4>
 8008472:	4b31      	ldr	r3, [pc, #196]	; (8008538 <UART_SetConfig+0x338>)
 8008474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	2b05      	cmp	r3, #5
 800847c:	d826      	bhi.n	80084cc <UART_SetConfig+0x2cc>
 800847e:	a201      	add	r2, pc, #4	; (adr r2, 8008484 <UART_SetConfig+0x284>)
 8008480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008484:	0800849d 	.word	0x0800849d
 8008488:	080084a5 	.word	0x080084a5
 800848c:	080084ad 	.word	0x080084ad
 8008490:	080084b5 	.word	0x080084b5
 8008494:	080084bd 	.word	0x080084bd
 8008498:	080084c5 	.word	0x080084c5
 800849c:	2300      	movs	r3, #0
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a2:	e284      	b.n	80089ae <UART_SetConfig+0x7ae>
 80084a4:	2304      	movs	r3, #4
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084aa:	e280      	b.n	80089ae <UART_SetConfig+0x7ae>
 80084ac:	2308      	movs	r3, #8
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084b2:	e27c      	b.n	80089ae <UART_SetConfig+0x7ae>
 80084b4:	2310      	movs	r3, #16
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ba:	e278      	b.n	80089ae <UART_SetConfig+0x7ae>
 80084bc:	2320      	movs	r3, #32
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c2:	e274      	b.n	80089ae <UART_SetConfig+0x7ae>
 80084c4:	2340      	movs	r3, #64	; 0x40
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ca:	e270      	b.n	80089ae <UART_SetConfig+0x7ae>
 80084cc:	2380      	movs	r3, #128	; 0x80
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d2:	e26c      	b.n	80089ae <UART_SetConfig+0x7ae>
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a1b      	ldr	r2, [pc, #108]	; (8008548 <UART_SetConfig+0x348>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d142      	bne.n	8008564 <UART_SetConfig+0x364>
 80084de:	4b16      	ldr	r3, [pc, #88]	; (8008538 <UART_SetConfig+0x338>)
 80084e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	d838      	bhi.n	800855c <UART_SetConfig+0x35c>
 80084ea:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <UART_SetConfig+0x2f0>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008509 	.word	0x08008509
 80084f4:	08008511 	.word	0x08008511
 80084f8:	08008519 	.word	0x08008519
 80084fc:	08008521 	.word	0x08008521
 8008500:	0800854d 	.word	0x0800854d
 8008504:	08008555 	.word	0x08008555
 8008508:	2300      	movs	r3, #0
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800850e:	e24e      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008510:	2304      	movs	r3, #4
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008516:	e24a      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008518:	2308      	movs	r3, #8
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800851e:	e246      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008520:	2310      	movs	r3, #16
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008526:	e242      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008528:	cfff69f3 	.word	0xcfff69f3
 800852c:	58000c00 	.word	0x58000c00
 8008530:	11fff4ff 	.word	0x11fff4ff
 8008534:	40011000 	.word	0x40011000
 8008538:	58024400 	.word	0x58024400
 800853c:	40004400 	.word	0x40004400
 8008540:	40004800 	.word	0x40004800
 8008544:	40004c00 	.word	0x40004c00
 8008548:	40005000 	.word	0x40005000
 800854c:	2320      	movs	r3, #32
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008552:	e22c      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008554:	2340      	movs	r3, #64	; 0x40
 8008556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800855a:	e228      	b.n	80089ae <UART_SetConfig+0x7ae>
 800855c:	2380      	movs	r3, #128	; 0x80
 800855e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008562:	e224      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4ab1      	ldr	r2, [pc, #708]	; (8008830 <UART_SetConfig+0x630>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d176      	bne.n	800865c <UART_SetConfig+0x45c>
 800856e:	4bb1      	ldr	r3, [pc, #708]	; (8008834 <UART_SetConfig+0x634>)
 8008570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008572:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008576:	2b28      	cmp	r3, #40	; 0x28
 8008578:	d86c      	bhi.n	8008654 <UART_SetConfig+0x454>
 800857a:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <UART_SetConfig+0x380>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	08008625 	.word	0x08008625
 8008584:	08008655 	.word	0x08008655
 8008588:	08008655 	.word	0x08008655
 800858c:	08008655 	.word	0x08008655
 8008590:	08008655 	.word	0x08008655
 8008594:	08008655 	.word	0x08008655
 8008598:	08008655 	.word	0x08008655
 800859c:	08008655 	.word	0x08008655
 80085a0:	0800862d 	.word	0x0800862d
 80085a4:	08008655 	.word	0x08008655
 80085a8:	08008655 	.word	0x08008655
 80085ac:	08008655 	.word	0x08008655
 80085b0:	08008655 	.word	0x08008655
 80085b4:	08008655 	.word	0x08008655
 80085b8:	08008655 	.word	0x08008655
 80085bc:	08008655 	.word	0x08008655
 80085c0:	08008635 	.word	0x08008635
 80085c4:	08008655 	.word	0x08008655
 80085c8:	08008655 	.word	0x08008655
 80085cc:	08008655 	.word	0x08008655
 80085d0:	08008655 	.word	0x08008655
 80085d4:	08008655 	.word	0x08008655
 80085d8:	08008655 	.word	0x08008655
 80085dc:	08008655 	.word	0x08008655
 80085e0:	0800863d 	.word	0x0800863d
 80085e4:	08008655 	.word	0x08008655
 80085e8:	08008655 	.word	0x08008655
 80085ec:	08008655 	.word	0x08008655
 80085f0:	08008655 	.word	0x08008655
 80085f4:	08008655 	.word	0x08008655
 80085f8:	08008655 	.word	0x08008655
 80085fc:	08008655 	.word	0x08008655
 8008600:	08008645 	.word	0x08008645
 8008604:	08008655 	.word	0x08008655
 8008608:	08008655 	.word	0x08008655
 800860c:	08008655 	.word	0x08008655
 8008610:	08008655 	.word	0x08008655
 8008614:	08008655 	.word	0x08008655
 8008618:	08008655 	.word	0x08008655
 800861c:	08008655 	.word	0x08008655
 8008620:	0800864d 	.word	0x0800864d
 8008624:	2301      	movs	r3, #1
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862a:	e1c0      	b.n	80089ae <UART_SetConfig+0x7ae>
 800862c:	2304      	movs	r3, #4
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008632:	e1bc      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008634:	2308      	movs	r3, #8
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863a:	e1b8      	b.n	80089ae <UART_SetConfig+0x7ae>
 800863c:	2310      	movs	r3, #16
 800863e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008642:	e1b4      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008644:	2320      	movs	r3, #32
 8008646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800864a:	e1b0      	b.n	80089ae <UART_SetConfig+0x7ae>
 800864c:	2340      	movs	r3, #64	; 0x40
 800864e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008652:	e1ac      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008654:	2380      	movs	r3, #128	; 0x80
 8008656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800865a:	e1a8      	b.n	80089ae <UART_SetConfig+0x7ae>
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a75      	ldr	r2, [pc, #468]	; (8008838 <UART_SetConfig+0x638>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d130      	bne.n	80086c8 <UART_SetConfig+0x4c8>
 8008666:	4b73      	ldr	r3, [pc, #460]	; (8008834 <UART_SetConfig+0x634>)
 8008668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866a:	f003 0307 	and.w	r3, r3, #7
 800866e:	2b05      	cmp	r3, #5
 8008670:	d826      	bhi.n	80086c0 <UART_SetConfig+0x4c0>
 8008672:	a201      	add	r2, pc, #4	; (adr r2, 8008678 <UART_SetConfig+0x478>)
 8008674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008678:	08008691 	.word	0x08008691
 800867c:	08008699 	.word	0x08008699
 8008680:	080086a1 	.word	0x080086a1
 8008684:	080086a9 	.word	0x080086a9
 8008688:	080086b1 	.word	0x080086b1
 800868c:	080086b9 	.word	0x080086b9
 8008690:	2300      	movs	r3, #0
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008696:	e18a      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008698:	2304      	movs	r3, #4
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869e:	e186      	b.n	80089ae <UART_SetConfig+0x7ae>
 80086a0:	2308      	movs	r3, #8
 80086a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a6:	e182      	b.n	80089ae <UART_SetConfig+0x7ae>
 80086a8:	2310      	movs	r3, #16
 80086aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ae:	e17e      	b.n	80089ae <UART_SetConfig+0x7ae>
 80086b0:	2320      	movs	r3, #32
 80086b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086b6:	e17a      	b.n	80089ae <UART_SetConfig+0x7ae>
 80086b8:	2340      	movs	r3, #64	; 0x40
 80086ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086be:	e176      	b.n	80089ae <UART_SetConfig+0x7ae>
 80086c0:	2380      	movs	r3, #128	; 0x80
 80086c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086c6:	e172      	b.n	80089ae <UART_SetConfig+0x7ae>
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a5b      	ldr	r2, [pc, #364]	; (800883c <UART_SetConfig+0x63c>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d130      	bne.n	8008734 <UART_SetConfig+0x534>
 80086d2:	4b58      	ldr	r3, [pc, #352]	; (8008834 <UART_SetConfig+0x634>)
 80086d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	2b05      	cmp	r3, #5
 80086dc:	d826      	bhi.n	800872c <UART_SetConfig+0x52c>
 80086de:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <UART_SetConfig+0x4e4>)
 80086e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e4:	080086fd 	.word	0x080086fd
 80086e8:	08008705 	.word	0x08008705
 80086ec:	0800870d 	.word	0x0800870d
 80086f0:	08008715 	.word	0x08008715
 80086f4:	0800871d 	.word	0x0800871d
 80086f8:	08008725 	.word	0x08008725
 80086fc:	2300      	movs	r3, #0
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008702:	e154      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008704:	2304      	movs	r3, #4
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870a:	e150      	b.n	80089ae <UART_SetConfig+0x7ae>
 800870c:	2308      	movs	r3, #8
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008712:	e14c      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008714:	2310      	movs	r3, #16
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800871a:	e148      	b.n	80089ae <UART_SetConfig+0x7ae>
 800871c:	2320      	movs	r3, #32
 800871e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008722:	e144      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008724:	2340      	movs	r3, #64	; 0x40
 8008726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872a:	e140      	b.n	80089ae <UART_SetConfig+0x7ae>
 800872c:	2380      	movs	r3, #128	; 0x80
 800872e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008732:	e13c      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a41      	ldr	r2, [pc, #260]	; (8008840 <UART_SetConfig+0x640>)
 800873a:	4293      	cmp	r3, r2
 800873c:	f040 8082 	bne.w	8008844 <UART_SetConfig+0x644>
 8008740:	4b3c      	ldr	r3, [pc, #240]	; (8008834 <UART_SetConfig+0x634>)
 8008742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008744:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008748:	2b28      	cmp	r3, #40	; 0x28
 800874a:	d86d      	bhi.n	8008828 <UART_SetConfig+0x628>
 800874c:	a201      	add	r2, pc, #4	; (adr r2, 8008754 <UART_SetConfig+0x554>)
 800874e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008752:	bf00      	nop
 8008754:	080087f9 	.word	0x080087f9
 8008758:	08008829 	.word	0x08008829
 800875c:	08008829 	.word	0x08008829
 8008760:	08008829 	.word	0x08008829
 8008764:	08008829 	.word	0x08008829
 8008768:	08008829 	.word	0x08008829
 800876c:	08008829 	.word	0x08008829
 8008770:	08008829 	.word	0x08008829
 8008774:	08008801 	.word	0x08008801
 8008778:	08008829 	.word	0x08008829
 800877c:	08008829 	.word	0x08008829
 8008780:	08008829 	.word	0x08008829
 8008784:	08008829 	.word	0x08008829
 8008788:	08008829 	.word	0x08008829
 800878c:	08008829 	.word	0x08008829
 8008790:	08008829 	.word	0x08008829
 8008794:	08008809 	.word	0x08008809
 8008798:	08008829 	.word	0x08008829
 800879c:	08008829 	.word	0x08008829
 80087a0:	08008829 	.word	0x08008829
 80087a4:	08008829 	.word	0x08008829
 80087a8:	08008829 	.word	0x08008829
 80087ac:	08008829 	.word	0x08008829
 80087b0:	08008829 	.word	0x08008829
 80087b4:	08008811 	.word	0x08008811
 80087b8:	08008829 	.word	0x08008829
 80087bc:	08008829 	.word	0x08008829
 80087c0:	08008829 	.word	0x08008829
 80087c4:	08008829 	.word	0x08008829
 80087c8:	08008829 	.word	0x08008829
 80087cc:	08008829 	.word	0x08008829
 80087d0:	08008829 	.word	0x08008829
 80087d4:	08008819 	.word	0x08008819
 80087d8:	08008829 	.word	0x08008829
 80087dc:	08008829 	.word	0x08008829
 80087e0:	08008829 	.word	0x08008829
 80087e4:	08008829 	.word	0x08008829
 80087e8:	08008829 	.word	0x08008829
 80087ec:	08008829 	.word	0x08008829
 80087f0:	08008829 	.word	0x08008829
 80087f4:	08008821 	.word	0x08008821
 80087f8:	2301      	movs	r3, #1
 80087fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fe:	e0d6      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008800:	2304      	movs	r3, #4
 8008802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008806:	e0d2      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008808:	2308      	movs	r3, #8
 800880a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880e:	e0ce      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008810:	2310      	movs	r3, #16
 8008812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008816:	e0ca      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008818:	2320      	movs	r3, #32
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881e:	e0c6      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008820:	2340      	movs	r3, #64	; 0x40
 8008822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008826:	e0c2      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008828:	2380      	movs	r3, #128	; 0x80
 800882a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882e:	e0be      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008830:	40011400 	.word	0x40011400
 8008834:	58024400 	.word	0x58024400
 8008838:	40007800 	.word	0x40007800
 800883c:	40007c00 	.word	0x40007c00
 8008840:	40011800 	.word	0x40011800
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4aad      	ldr	r2, [pc, #692]	; (8008b00 <UART_SetConfig+0x900>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d176      	bne.n	800893c <UART_SetConfig+0x73c>
 800884e:	4bad      	ldr	r3, [pc, #692]	; (8008b04 <UART_SetConfig+0x904>)
 8008850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008856:	2b28      	cmp	r3, #40	; 0x28
 8008858:	d86c      	bhi.n	8008934 <UART_SetConfig+0x734>
 800885a:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <UART_SetConfig+0x660>)
 800885c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008860:	08008905 	.word	0x08008905
 8008864:	08008935 	.word	0x08008935
 8008868:	08008935 	.word	0x08008935
 800886c:	08008935 	.word	0x08008935
 8008870:	08008935 	.word	0x08008935
 8008874:	08008935 	.word	0x08008935
 8008878:	08008935 	.word	0x08008935
 800887c:	08008935 	.word	0x08008935
 8008880:	0800890d 	.word	0x0800890d
 8008884:	08008935 	.word	0x08008935
 8008888:	08008935 	.word	0x08008935
 800888c:	08008935 	.word	0x08008935
 8008890:	08008935 	.word	0x08008935
 8008894:	08008935 	.word	0x08008935
 8008898:	08008935 	.word	0x08008935
 800889c:	08008935 	.word	0x08008935
 80088a0:	08008915 	.word	0x08008915
 80088a4:	08008935 	.word	0x08008935
 80088a8:	08008935 	.word	0x08008935
 80088ac:	08008935 	.word	0x08008935
 80088b0:	08008935 	.word	0x08008935
 80088b4:	08008935 	.word	0x08008935
 80088b8:	08008935 	.word	0x08008935
 80088bc:	08008935 	.word	0x08008935
 80088c0:	0800891d 	.word	0x0800891d
 80088c4:	08008935 	.word	0x08008935
 80088c8:	08008935 	.word	0x08008935
 80088cc:	08008935 	.word	0x08008935
 80088d0:	08008935 	.word	0x08008935
 80088d4:	08008935 	.word	0x08008935
 80088d8:	08008935 	.word	0x08008935
 80088dc:	08008935 	.word	0x08008935
 80088e0:	08008925 	.word	0x08008925
 80088e4:	08008935 	.word	0x08008935
 80088e8:	08008935 	.word	0x08008935
 80088ec:	08008935 	.word	0x08008935
 80088f0:	08008935 	.word	0x08008935
 80088f4:	08008935 	.word	0x08008935
 80088f8:	08008935 	.word	0x08008935
 80088fc:	08008935 	.word	0x08008935
 8008900:	0800892d 	.word	0x0800892d
 8008904:	2301      	movs	r3, #1
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890a:	e050      	b.n	80089ae <UART_SetConfig+0x7ae>
 800890c:	2304      	movs	r3, #4
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008912:	e04c      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008914:	2308      	movs	r3, #8
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891a:	e048      	b.n	80089ae <UART_SetConfig+0x7ae>
 800891c:	2310      	movs	r3, #16
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008922:	e044      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008924:	2320      	movs	r3, #32
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892a:	e040      	b.n	80089ae <UART_SetConfig+0x7ae>
 800892c:	2340      	movs	r3, #64	; 0x40
 800892e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008932:	e03c      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008934:	2380      	movs	r3, #128	; 0x80
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800893a:	e038      	b.n	80089ae <UART_SetConfig+0x7ae>
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a71      	ldr	r2, [pc, #452]	; (8008b08 <UART_SetConfig+0x908>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d130      	bne.n	80089a8 <UART_SetConfig+0x7a8>
 8008946:	4b6f      	ldr	r3, [pc, #444]	; (8008b04 <UART_SetConfig+0x904>)
 8008948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800894a:	f003 0307 	and.w	r3, r3, #7
 800894e:	2b05      	cmp	r3, #5
 8008950:	d826      	bhi.n	80089a0 <UART_SetConfig+0x7a0>
 8008952:	a201      	add	r2, pc, #4	; (adr r2, 8008958 <UART_SetConfig+0x758>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	08008971 	.word	0x08008971
 800895c:	08008979 	.word	0x08008979
 8008960:	08008981 	.word	0x08008981
 8008964:	08008989 	.word	0x08008989
 8008968:	08008991 	.word	0x08008991
 800896c:	08008999 	.word	0x08008999
 8008970:	2302      	movs	r3, #2
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008976:	e01a      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008978:	2304      	movs	r3, #4
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897e:	e016      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008980:	2308      	movs	r3, #8
 8008982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008986:	e012      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008988:	2310      	movs	r3, #16
 800898a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800898e:	e00e      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008990:	2320      	movs	r3, #32
 8008992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008996:	e00a      	b.n	80089ae <UART_SetConfig+0x7ae>
 8008998:	2340      	movs	r3, #64	; 0x40
 800899a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800899e:	e006      	b.n	80089ae <UART_SetConfig+0x7ae>
 80089a0:	2380      	movs	r3, #128	; 0x80
 80089a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089a6:	e002      	b.n	80089ae <UART_SetConfig+0x7ae>
 80089a8:	2380      	movs	r3, #128	; 0x80
 80089aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a55      	ldr	r2, [pc, #340]	; (8008b08 <UART_SetConfig+0x908>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	f040 80f8 	bne.w	8008baa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80089ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80089be:	2b20      	cmp	r3, #32
 80089c0:	dc46      	bgt.n	8008a50 <UART_SetConfig+0x850>
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	db75      	blt.n	8008ab2 <UART_SetConfig+0x8b2>
 80089c6:	3b02      	subs	r3, #2
 80089c8:	2b1e      	cmp	r3, #30
 80089ca:	d872      	bhi.n	8008ab2 <UART_SetConfig+0x8b2>
 80089cc:	a201      	add	r2, pc, #4	; (adr r2, 80089d4 <UART_SetConfig+0x7d4>)
 80089ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d2:	bf00      	nop
 80089d4:	08008a57 	.word	0x08008a57
 80089d8:	08008ab3 	.word	0x08008ab3
 80089dc:	08008a5f 	.word	0x08008a5f
 80089e0:	08008ab3 	.word	0x08008ab3
 80089e4:	08008ab3 	.word	0x08008ab3
 80089e8:	08008ab3 	.word	0x08008ab3
 80089ec:	08008a6f 	.word	0x08008a6f
 80089f0:	08008ab3 	.word	0x08008ab3
 80089f4:	08008ab3 	.word	0x08008ab3
 80089f8:	08008ab3 	.word	0x08008ab3
 80089fc:	08008ab3 	.word	0x08008ab3
 8008a00:	08008ab3 	.word	0x08008ab3
 8008a04:	08008ab3 	.word	0x08008ab3
 8008a08:	08008ab3 	.word	0x08008ab3
 8008a0c:	08008a7f 	.word	0x08008a7f
 8008a10:	08008ab3 	.word	0x08008ab3
 8008a14:	08008ab3 	.word	0x08008ab3
 8008a18:	08008ab3 	.word	0x08008ab3
 8008a1c:	08008ab3 	.word	0x08008ab3
 8008a20:	08008ab3 	.word	0x08008ab3
 8008a24:	08008ab3 	.word	0x08008ab3
 8008a28:	08008ab3 	.word	0x08008ab3
 8008a2c:	08008ab3 	.word	0x08008ab3
 8008a30:	08008ab3 	.word	0x08008ab3
 8008a34:	08008ab3 	.word	0x08008ab3
 8008a38:	08008ab3 	.word	0x08008ab3
 8008a3c:	08008ab3 	.word	0x08008ab3
 8008a40:	08008ab3 	.word	0x08008ab3
 8008a44:	08008ab3 	.word	0x08008ab3
 8008a48:	08008ab3 	.word	0x08008ab3
 8008a4c:	08008aa5 	.word	0x08008aa5
 8008a50:	2b40      	cmp	r3, #64	; 0x40
 8008a52:	d02a      	beq.n	8008aaa <UART_SetConfig+0x8aa>
 8008a54:	e02d      	b.n	8008ab2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a56:	f7fe fd81 	bl	800755c <HAL_RCCEx_GetD3PCLK1Freq>
 8008a5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a5c:	e02f      	b.n	8008abe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe fd90 	bl	8007588 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a6c:	e027      	b.n	8008abe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a6e:	f107 0318 	add.w	r3, r7, #24
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fe fedc 	bl	8007830 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a7c:	e01f      	b.n	8008abe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a7e:	4b21      	ldr	r3, [pc, #132]	; (8008b04 <UART_SetConfig+0x904>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0320 	and.w	r3, r3, #32
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d009      	beq.n	8008a9e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a8a:	4b1e      	ldr	r3, [pc, #120]	; (8008b04 <UART_SetConfig+0x904>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	08db      	lsrs	r3, r3, #3
 8008a90:	f003 0303 	and.w	r3, r3, #3
 8008a94:	4a1d      	ldr	r2, [pc, #116]	; (8008b0c <UART_SetConfig+0x90c>)
 8008a96:	fa22 f303 	lsr.w	r3, r2, r3
 8008a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a9c:	e00f      	b.n	8008abe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a9e:	4b1b      	ldr	r3, [pc, #108]	; (8008b0c <UART_SetConfig+0x90c>)
 8008aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aa2:	e00c      	b.n	8008abe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008aa4:	4b1a      	ldr	r3, [pc, #104]	; (8008b10 <UART_SetConfig+0x910>)
 8008aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aa8:	e009      	b.n	8008abe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ab0:	e005      	b.n	8008abe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008abc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 81ee 	beq.w	8008ea2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aca:	4a12      	ldr	r2, [pc, #72]	; (8008b14 <UART_SetConfig+0x914>)
 8008acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ad8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	4413      	add	r3, r2
 8008ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d305      	bcc.n	8008af6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d910      	bls.n	8008b18 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008afc:	e1d1      	b.n	8008ea2 <UART_SetConfig+0xca2>
 8008afe:	bf00      	nop
 8008b00:	40011c00 	.word	0x40011c00
 8008b04:	58024400 	.word	0x58024400
 8008b08:	58000c00 	.word	0x58000c00
 8008b0c:	03d09000 	.word	0x03d09000
 8008b10:	003d0900 	.word	0x003d0900
 8008b14:	08009fb0 	.word	0x08009fb0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	60bb      	str	r3, [r7, #8]
 8008b1e:	60fa      	str	r2, [r7, #12]
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	4ac0      	ldr	r2, [pc, #768]	; (8008e28 <UART_SetConfig+0xc28>)
 8008b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	603b      	str	r3, [r7, #0]
 8008b30:	607a      	str	r2, [r7, #4]
 8008b32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b3a:	f7f7 fbd7 	bl	80002ec <__aeabi_uldivmod>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4610      	mov	r0, r2
 8008b44:	4619      	mov	r1, r3
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	f04f 0300 	mov.w	r3, #0
 8008b4e:	020b      	lsls	r3, r1, #8
 8008b50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b54:	0202      	lsls	r2, r0, #8
 8008b56:	6979      	ldr	r1, [r7, #20]
 8008b58:	6849      	ldr	r1, [r1, #4]
 8008b5a:	0849      	lsrs	r1, r1, #1
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	460c      	mov	r4, r1
 8008b60:	4605      	mov	r5, r0
 8008b62:	eb12 0804 	adds.w	r8, r2, r4
 8008b66:	eb43 0905 	adc.w	r9, r3, r5
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	469a      	mov	sl, r3
 8008b72:	4693      	mov	fp, r2
 8008b74:	4652      	mov	r2, sl
 8008b76:	465b      	mov	r3, fp
 8008b78:	4640      	mov	r0, r8
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	f7f7 fbb6 	bl	80002ec <__aeabi_uldivmod>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	4613      	mov	r3, r2
 8008b86:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b8e:	d308      	bcc.n	8008ba2 <UART_SetConfig+0x9a2>
 8008b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b96:	d204      	bcs.n	8008ba2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b9e:	60da      	str	r2, [r3, #12]
 8008ba0:	e17f      	b.n	8008ea2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008ba8:	e17b      	b.n	8008ea2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bb2:	f040 80bd 	bne.w	8008d30 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008bb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008bba:	2b20      	cmp	r3, #32
 8008bbc:	dc48      	bgt.n	8008c50 <UART_SetConfig+0xa50>
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	db7b      	blt.n	8008cba <UART_SetConfig+0xaba>
 8008bc2:	2b20      	cmp	r3, #32
 8008bc4:	d879      	bhi.n	8008cba <UART_SetConfig+0xaba>
 8008bc6:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <UART_SetConfig+0x9cc>)
 8008bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bcc:	08008c57 	.word	0x08008c57
 8008bd0:	08008c5f 	.word	0x08008c5f
 8008bd4:	08008cbb 	.word	0x08008cbb
 8008bd8:	08008cbb 	.word	0x08008cbb
 8008bdc:	08008c67 	.word	0x08008c67
 8008be0:	08008cbb 	.word	0x08008cbb
 8008be4:	08008cbb 	.word	0x08008cbb
 8008be8:	08008cbb 	.word	0x08008cbb
 8008bec:	08008c77 	.word	0x08008c77
 8008bf0:	08008cbb 	.word	0x08008cbb
 8008bf4:	08008cbb 	.word	0x08008cbb
 8008bf8:	08008cbb 	.word	0x08008cbb
 8008bfc:	08008cbb 	.word	0x08008cbb
 8008c00:	08008cbb 	.word	0x08008cbb
 8008c04:	08008cbb 	.word	0x08008cbb
 8008c08:	08008cbb 	.word	0x08008cbb
 8008c0c:	08008c87 	.word	0x08008c87
 8008c10:	08008cbb 	.word	0x08008cbb
 8008c14:	08008cbb 	.word	0x08008cbb
 8008c18:	08008cbb 	.word	0x08008cbb
 8008c1c:	08008cbb 	.word	0x08008cbb
 8008c20:	08008cbb 	.word	0x08008cbb
 8008c24:	08008cbb 	.word	0x08008cbb
 8008c28:	08008cbb 	.word	0x08008cbb
 8008c2c:	08008cbb 	.word	0x08008cbb
 8008c30:	08008cbb 	.word	0x08008cbb
 8008c34:	08008cbb 	.word	0x08008cbb
 8008c38:	08008cbb 	.word	0x08008cbb
 8008c3c:	08008cbb 	.word	0x08008cbb
 8008c40:	08008cbb 	.word	0x08008cbb
 8008c44:	08008cbb 	.word	0x08008cbb
 8008c48:	08008cbb 	.word	0x08008cbb
 8008c4c:	08008cad 	.word	0x08008cad
 8008c50:	2b40      	cmp	r3, #64	; 0x40
 8008c52:	d02e      	beq.n	8008cb2 <UART_SetConfig+0xab2>
 8008c54:	e031      	b.n	8008cba <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c56:	f7fc fdbf 	bl	80057d8 <HAL_RCC_GetPCLK1Freq>
 8008c5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c5c:	e033      	b.n	8008cc6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c5e:	f7fc fdd1 	bl	8005804 <HAL_RCC_GetPCLK2Freq>
 8008c62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c64:	e02f      	b.n	8008cc6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fe fc8c 	bl	8007588 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c74:	e027      	b.n	8008cc6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c76:	f107 0318 	add.w	r3, r7, #24
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe fdd8 	bl	8007830 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c84:	e01f      	b.n	8008cc6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c86:	4b69      	ldr	r3, [pc, #420]	; (8008e2c <UART_SetConfig+0xc2c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 0320 	and.w	r3, r3, #32
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d009      	beq.n	8008ca6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c92:	4b66      	ldr	r3, [pc, #408]	; (8008e2c <UART_SetConfig+0xc2c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	08db      	lsrs	r3, r3, #3
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	4a64      	ldr	r2, [pc, #400]	; (8008e30 <UART_SetConfig+0xc30>)
 8008c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ca4:	e00f      	b.n	8008cc6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008ca6:	4b62      	ldr	r3, [pc, #392]	; (8008e30 <UART_SetConfig+0xc30>)
 8008ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008caa:	e00c      	b.n	8008cc6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cac:	4b61      	ldr	r3, [pc, #388]	; (8008e34 <UART_SetConfig+0xc34>)
 8008cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cb0:	e009      	b.n	8008cc6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cb8:	e005      	b.n	8008cc6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008cc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 80ea 	beq.w	8008ea2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	4a55      	ldr	r2, [pc, #340]	; (8008e28 <UART_SetConfig+0xc28>)
 8008cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ce0:	005a      	lsls	r2, r3, #1
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	085b      	lsrs	r3, r3, #1
 8008ce8:	441a      	add	r2, r3
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cf2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf6:	2b0f      	cmp	r3, #15
 8008cf8:	d916      	bls.n	8008d28 <UART_SetConfig+0xb28>
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d00:	d212      	bcs.n	8008d28 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	f023 030f 	bic.w	r3, r3, #15
 8008d0a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0e:	085b      	lsrs	r3, r3, #1
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	f003 0307 	and.w	r3, r3, #7
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008d24:	60da      	str	r2, [r3, #12]
 8008d26:	e0bc      	b.n	8008ea2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d2e:	e0b8      	b.n	8008ea2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d34:	2b20      	cmp	r3, #32
 8008d36:	dc4b      	bgt.n	8008dd0 <UART_SetConfig+0xbd0>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f2c0 8087 	blt.w	8008e4c <UART_SetConfig+0xc4c>
 8008d3e:	2b20      	cmp	r3, #32
 8008d40:	f200 8084 	bhi.w	8008e4c <UART_SetConfig+0xc4c>
 8008d44:	a201      	add	r2, pc, #4	; (adr r2, 8008d4c <UART_SetConfig+0xb4c>)
 8008d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4a:	bf00      	nop
 8008d4c:	08008dd7 	.word	0x08008dd7
 8008d50:	08008ddf 	.word	0x08008ddf
 8008d54:	08008e4d 	.word	0x08008e4d
 8008d58:	08008e4d 	.word	0x08008e4d
 8008d5c:	08008de7 	.word	0x08008de7
 8008d60:	08008e4d 	.word	0x08008e4d
 8008d64:	08008e4d 	.word	0x08008e4d
 8008d68:	08008e4d 	.word	0x08008e4d
 8008d6c:	08008df7 	.word	0x08008df7
 8008d70:	08008e4d 	.word	0x08008e4d
 8008d74:	08008e4d 	.word	0x08008e4d
 8008d78:	08008e4d 	.word	0x08008e4d
 8008d7c:	08008e4d 	.word	0x08008e4d
 8008d80:	08008e4d 	.word	0x08008e4d
 8008d84:	08008e4d 	.word	0x08008e4d
 8008d88:	08008e4d 	.word	0x08008e4d
 8008d8c:	08008e07 	.word	0x08008e07
 8008d90:	08008e4d 	.word	0x08008e4d
 8008d94:	08008e4d 	.word	0x08008e4d
 8008d98:	08008e4d 	.word	0x08008e4d
 8008d9c:	08008e4d 	.word	0x08008e4d
 8008da0:	08008e4d 	.word	0x08008e4d
 8008da4:	08008e4d 	.word	0x08008e4d
 8008da8:	08008e4d 	.word	0x08008e4d
 8008dac:	08008e4d 	.word	0x08008e4d
 8008db0:	08008e4d 	.word	0x08008e4d
 8008db4:	08008e4d 	.word	0x08008e4d
 8008db8:	08008e4d 	.word	0x08008e4d
 8008dbc:	08008e4d 	.word	0x08008e4d
 8008dc0:	08008e4d 	.word	0x08008e4d
 8008dc4:	08008e4d 	.word	0x08008e4d
 8008dc8:	08008e4d 	.word	0x08008e4d
 8008dcc:	08008e3f 	.word	0x08008e3f
 8008dd0:	2b40      	cmp	r3, #64	; 0x40
 8008dd2:	d037      	beq.n	8008e44 <UART_SetConfig+0xc44>
 8008dd4:	e03a      	b.n	8008e4c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dd6:	f7fc fcff 	bl	80057d8 <HAL_RCC_GetPCLK1Freq>
 8008dda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ddc:	e03c      	b.n	8008e58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dde:	f7fc fd11 	bl	8005804 <HAL_RCC_GetPCLK2Freq>
 8008de2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008de4:	e038      	b.n	8008e58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fe fbcc 	bl	8007588 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008df4:	e030      	b.n	8008e58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008df6:	f107 0318 	add.w	r3, r7, #24
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fe fd18 	bl	8007830 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e04:	e028      	b.n	8008e58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e06:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <UART_SetConfig+0xc2c>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0320 	and.w	r3, r3, #32
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d012      	beq.n	8008e38 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e12:	4b06      	ldr	r3, [pc, #24]	; (8008e2c <UART_SetConfig+0xc2c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	08db      	lsrs	r3, r3, #3
 8008e18:	f003 0303 	and.w	r3, r3, #3
 8008e1c:	4a04      	ldr	r2, [pc, #16]	; (8008e30 <UART_SetConfig+0xc30>)
 8008e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e24:	e018      	b.n	8008e58 <UART_SetConfig+0xc58>
 8008e26:	bf00      	nop
 8008e28:	08009fb0 	.word	0x08009fb0
 8008e2c:	58024400 	.word	0x58024400
 8008e30:	03d09000 	.word	0x03d09000
 8008e34:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008e38:	4b24      	ldr	r3, [pc, #144]	; (8008ecc <UART_SetConfig+0xccc>)
 8008e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e3c:	e00c      	b.n	8008e58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e3e:	4b24      	ldr	r3, [pc, #144]	; (8008ed0 <UART_SetConfig+0xcd0>)
 8008e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e42:	e009      	b.n	8008e58 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e4a:	e005      	b.n	8008e58 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e56:	bf00      	nop
    }

    if (pclk != 0U)
 8008e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d021      	beq.n	8008ea2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	4a1c      	ldr	r2, [pc, #112]	; (8008ed4 <UART_SetConfig+0xcd4>)
 8008e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	085b      	lsrs	r3, r3, #1
 8008e76:	441a      	add	r2, r3
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e80:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e84:	2b0f      	cmp	r3, #15
 8008e86:	d909      	bls.n	8008e9c <UART_SetConfig+0xc9c>
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e8e:	d205      	bcs.n	8008e9c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60da      	str	r2, [r3, #12]
 8008e9a:	e002      	b.n	8008ea2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008ebe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3748      	adds	r7, #72	; 0x48
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ecc:	03d09000 	.word	0x03d09000
 8008ed0:	003d0900 	.word	0x003d0900
 8008ed4:	08009fb0 	.word	0x08009fb0

08008ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00a      	beq.n	8008f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	430a      	orrs	r2, r1
 8008f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f28:	f003 0304 	and.w	r3, r3, #4
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00a      	beq.n	8008f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	430a      	orrs	r2, r1
 8008f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4a:	f003 0308 	and.w	r3, r3, #8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00a      	beq.n	8008f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	430a      	orrs	r2, r1
 8008f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f6c:	f003 0310 	and.w	r3, r3, #16
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00a      	beq.n	8008f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8e:	f003 0320 	and.w	r3, r3, #32
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d01a      	beq.n	8008fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	430a      	orrs	r2, r1
 8008fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fd6:	d10a      	bne.n	8008fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00a      	beq.n	8009010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	430a      	orrs	r2, r1
 800900e:	605a      	str	r2, [r3, #4]
  }
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b098      	sub	sp, #96	; 0x60
 8009020:	af02      	add	r7, sp, #8
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800902c:	f7fa f8be 	bl	80031ac <HAL_GetTick>
 8009030:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0308 	and.w	r3, r3, #8
 800903c:	2b08      	cmp	r3, #8
 800903e:	d12f      	bne.n	80090a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009048:	2200      	movs	r2, #0
 800904a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f88e 	bl	8009170 <UART_WaitOnFlagUntilTimeout>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d022      	beq.n	80090a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009062:	e853 3f00 	ldrex	r3, [r3]
 8009066:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800906e:	653b      	str	r3, [r7, #80]	; 0x50
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	461a      	mov	r2, r3
 8009076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009078:	647b      	str	r3, [r7, #68]	; 0x44
 800907a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800907e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009080:	e841 2300 	strex	r3, r2, [r1]
 8009084:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e6      	bne.n	800905a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2220      	movs	r2, #32
 8009090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e063      	b.n	8009168 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0304 	and.w	r3, r3, #4
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d149      	bne.n	8009142 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090b6:	2200      	movs	r2, #0
 80090b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f857 	bl	8009170 <UART_WaitOnFlagUntilTimeout>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d03c      	beq.n	8009142 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	e853 3f00 	ldrex	r3, [r3]
 80090d4:	623b      	str	r3, [r7, #32]
   return(result);
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090e6:	633b      	str	r3, [r7, #48]	; 0x30
 80090e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ee:	e841 2300 	strex	r3, r2, [r1]
 80090f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1e6      	bne.n	80090c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3308      	adds	r3, #8
 8009100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	e853 3f00 	ldrex	r3, [r3]
 8009108:	60fb      	str	r3, [r7, #12]
   return(result);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f023 0301 	bic.w	r3, r3, #1
 8009110:	64bb      	str	r3, [r7, #72]	; 0x48
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3308      	adds	r3, #8
 8009118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800911a:	61fa      	str	r2, [r7, #28]
 800911c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911e:	69b9      	ldr	r1, [r7, #24]
 8009120:	69fa      	ldr	r2, [r7, #28]
 8009122:	e841 2300 	strex	r3, r2, [r1]
 8009126:	617b      	str	r3, [r7, #20]
   return(result);
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1e5      	bne.n	80090fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2220      	movs	r2, #32
 8009132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e012      	b.n	8009168 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2220      	movs	r2, #32
 8009146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2220      	movs	r2, #32
 800914e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3758      	adds	r7, #88	; 0x58
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	4613      	mov	r3, r2
 800917e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009180:	e049      	b.n	8009216 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009188:	d045      	beq.n	8009216 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800918a:	f7fa f80f 	bl	80031ac <HAL_GetTick>
 800918e:	4602      	mov	r2, r0
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	429a      	cmp	r2, r3
 8009198:	d302      	bcc.n	80091a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091a0:	2303      	movs	r3, #3
 80091a2:	e048      	b.n	8009236 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0304 	and.w	r3, r3, #4
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d031      	beq.n	8009216 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	f003 0308 	and.w	r3, r3, #8
 80091bc:	2b08      	cmp	r3, #8
 80091be:	d110      	bne.n	80091e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2208      	movs	r2, #8
 80091c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 f839 	bl	8009240 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2208      	movs	r2, #8
 80091d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e029      	b.n	8009236 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091f0:	d111      	bne.n	8009216 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 f81f 	bl	8009240 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2220      	movs	r2, #32
 8009206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e00f      	b.n	8009236 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	69da      	ldr	r2, [r3, #28]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	4013      	ands	r3, r2
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	429a      	cmp	r2, r3
 8009224:	bf0c      	ite	eq
 8009226:	2301      	moveq	r3, #1
 8009228:	2300      	movne	r3, #0
 800922a:	b2db      	uxtb	r3, r3
 800922c:	461a      	mov	r2, r3
 800922e:	79fb      	ldrb	r3, [r7, #7]
 8009230:	429a      	cmp	r2, r3
 8009232:	d0a6      	beq.n	8009182 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009240:	b480      	push	{r7}
 8009242:	b095      	sub	sp, #84	; 0x54
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009250:	e853 3f00 	ldrex	r3, [r3]
 8009254:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009258:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800925c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009266:	643b      	str	r3, [r7, #64]	; 0x40
 8009268:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800926c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800926e:	e841 2300 	strex	r3, r2, [r1]
 8009272:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e6      	bne.n	8009248 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3308      	adds	r3, #8
 8009280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	e853 3f00 	ldrex	r3, [r3]
 8009288:	61fb      	str	r3, [r7, #28]
   return(result);
 800928a:	69fa      	ldr	r2, [r7, #28]
 800928c:	4b1e      	ldr	r3, [pc, #120]	; (8009308 <UART_EndRxTransfer+0xc8>)
 800928e:	4013      	ands	r3, r2
 8009290:	64bb      	str	r3, [r7, #72]	; 0x48
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3308      	adds	r3, #8
 8009298:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800929a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800929c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092a2:	e841 2300 	strex	r3, r2, [r1]
 80092a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1e5      	bne.n	800927a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d118      	bne.n	80092e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	e853 3f00 	ldrex	r3, [r3]
 80092c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f023 0310 	bic.w	r3, r3, #16
 80092ca:	647b      	str	r3, [r7, #68]	; 0x44
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	461a      	mov	r2, r3
 80092d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092d4:	61bb      	str	r3, [r7, #24]
 80092d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	6979      	ldr	r1, [r7, #20]
 80092da:	69ba      	ldr	r2, [r7, #24]
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	613b      	str	r3, [r7, #16]
   return(result);
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e6      	bne.n	80092b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2220      	movs	r2, #32
 80092ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	675a      	str	r2, [r3, #116]	; 0x74
}
 80092fc:	bf00      	nop
 80092fe:	3754      	adds	r7, #84	; 0x54
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	effffffe 	.word	0xeffffffe

0800930c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800931a:	2b01      	cmp	r3, #1
 800931c:	d101      	bne.n	8009322 <HAL_UARTEx_DisableFifoMode+0x16>
 800931e:	2302      	movs	r3, #2
 8009320:	e027      	b.n	8009372 <HAL_UARTEx_DisableFifoMode+0x66>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2224      	movs	r2, #36	; 0x24
 800932e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f022 0201 	bic.w	r2, r2, #1
 8009348:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009350:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2220      	movs	r2, #32
 8009364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009392:	2302      	movs	r3, #2
 8009394:	e02d      	b.n	80093f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2224      	movs	r2, #36	; 0x24
 80093a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0201 	bic.w	r2, r2, #1
 80093bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	430a      	orrs	r2, r1
 80093d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f850 	bl	8009478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2220      	movs	r2, #32
 80093e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b084      	sub	sp, #16
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800940a:	2b01      	cmp	r3, #1
 800940c:	d101      	bne.n	8009412 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800940e:	2302      	movs	r3, #2
 8009410:	e02d      	b.n	800946e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2224      	movs	r2, #36	; 0x24
 800941e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f022 0201 	bic.w	r2, r2, #1
 8009438:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	430a      	orrs	r2, r1
 800944c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 f812 	bl	8009478 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2220      	movs	r2, #32
 8009460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
	...

08009478 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009484:	2b00      	cmp	r3, #0
 8009486:	d108      	bne.n	800949a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009498:	e031      	b.n	80094fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800949a:	2310      	movs	r3, #16
 800949c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800949e:	2310      	movs	r3, #16
 80094a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	0e5b      	lsrs	r3, r3, #25
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	f003 0307 	and.w	r3, r3, #7
 80094b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	0f5b      	lsrs	r3, r3, #29
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	f003 0307 	and.w	r3, r3, #7
 80094c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
 80094c4:	7b3a      	ldrb	r2, [r7, #12]
 80094c6:	4911      	ldr	r1, [pc, #68]	; (800950c <UARTEx_SetNbDataToProcess+0x94>)
 80094c8:	5c8a      	ldrb	r2, [r1, r2]
 80094ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80094ce:	7b3a      	ldrb	r2, [r7, #12]
 80094d0:	490f      	ldr	r1, [pc, #60]	; (8009510 <UARTEx_SetNbDataToProcess+0x98>)
 80094d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80094d8:	b29a      	uxth	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094e0:	7bfb      	ldrb	r3, [r7, #15]
 80094e2:	7b7a      	ldrb	r2, [r7, #13]
 80094e4:	4909      	ldr	r1, [pc, #36]	; (800950c <UARTEx_SetNbDataToProcess+0x94>)
 80094e6:	5c8a      	ldrb	r2, [r1, r2]
 80094e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094ec:	7b7a      	ldrb	r2, [r7, #13]
 80094ee:	4908      	ldr	r1, [pc, #32]	; (8009510 <UARTEx_SetNbDataToProcess+0x98>)
 80094f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80094fe:	bf00      	nop
 8009500:	3714      	adds	r7, #20
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	08009fc8 	.word	0x08009fc8
 8009510:	08009fd0 	.word	0x08009fd0

08009514 <__errno>:
 8009514:	4b01      	ldr	r3, [pc, #4]	; (800951c <__errno+0x8>)
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	24000188 	.word	0x24000188

08009520 <__libc_init_array>:
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	4d0d      	ldr	r5, [pc, #52]	; (8009558 <__libc_init_array+0x38>)
 8009524:	4c0d      	ldr	r4, [pc, #52]	; (800955c <__libc_init_array+0x3c>)
 8009526:	1b64      	subs	r4, r4, r5
 8009528:	10a4      	asrs	r4, r4, #2
 800952a:	2600      	movs	r6, #0
 800952c:	42a6      	cmp	r6, r4
 800952e:	d109      	bne.n	8009544 <__libc_init_array+0x24>
 8009530:	4d0b      	ldr	r5, [pc, #44]	; (8009560 <__libc_init_array+0x40>)
 8009532:	4c0c      	ldr	r4, [pc, #48]	; (8009564 <__libc_init_array+0x44>)
 8009534:	f000 fd1e 	bl	8009f74 <_init>
 8009538:	1b64      	subs	r4, r4, r5
 800953a:	10a4      	asrs	r4, r4, #2
 800953c:	2600      	movs	r6, #0
 800953e:	42a6      	cmp	r6, r4
 8009540:	d105      	bne.n	800954e <__libc_init_array+0x2e>
 8009542:	bd70      	pop	{r4, r5, r6, pc}
 8009544:	f855 3b04 	ldr.w	r3, [r5], #4
 8009548:	4798      	blx	r3
 800954a:	3601      	adds	r6, #1
 800954c:	e7ee      	b.n	800952c <__libc_init_array+0xc>
 800954e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009552:	4798      	blx	r3
 8009554:	3601      	adds	r6, #1
 8009556:	e7f2      	b.n	800953e <__libc_init_array+0x1e>
 8009558:	0800a044 	.word	0x0800a044
 800955c:	0800a044 	.word	0x0800a044
 8009560:	0800a044 	.word	0x0800a044
 8009564:	0800a048 	.word	0x0800a048

08009568 <memset>:
 8009568:	4402      	add	r2, r0
 800956a:	4603      	mov	r3, r0
 800956c:	4293      	cmp	r3, r2
 800956e:	d100      	bne.n	8009572 <memset+0xa>
 8009570:	4770      	bx	lr
 8009572:	f803 1b01 	strb.w	r1, [r3], #1
 8009576:	e7f9      	b.n	800956c <memset+0x4>

08009578 <_puts_r>:
 8009578:	b570      	push	{r4, r5, r6, lr}
 800957a:	460e      	mov	r6, r1
 800957c:	4605      	mov	r5, r0
 800957e:	b118      	cbz	r0, 8009588 <_puts_r+0x10>
 8009580:	6983      	ldr	r3, [r0, #24]
 8009582:	b90b      	cbnz	r3, 8009588 <_puts_r+0x10>
 8009584:	f000 fa48 	bl	8009a18 <__sinit>
 8009588:	69ab      	ldr	r3, [r5, #24]
 800958a:	68ac      	ldr	r4, [r5, #8]
 800958c:	b913      	cbnz	r3, 8009594 <_puts_r+0x1c>
 800958e:	4628      	mov	r0, r5
 8009590:	f000 fa42 	bl	8009a18 <__sinit>
 8009594:	4b2c      	ldr	r3, [pc, #176]	; (8009648 <_puts_r+0xd0>)
 8009596:	429c      	cmp	r4, r3
 8009598:	d120      	bne.n	80095dc <_puts_r+0x64>
 800959a:	686c      	ldr	r4, [r5, #4]
 800959c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800959e:	07db      	lsls	r3, r3, #31
 80095a0:	d405      	bmi.n	80095ae <_puts_r+0x36>
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	0598      	lsls	r0, r3, #22
 80095a6:	d402      	bmi.n	80095ae <_puts_r+0x36>
 80095a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095aa:	f000 fad3 	bl	8009b54 <__retarget_lock_acquire_recursive>
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	0719      	lsls	r1, r3, #28
 80095b2:	d51d      	bpl.n	80095f0 <_puts_r+0x78>
 80095b4:	6923      	ldr	r3, [r4, #16]
 80095b6:	b1db      	cbz	r3, 80095f0 <_puts_r+0x78>
 80095b8:	3e01      	subs	r6, #1
 80095ba:	68a3      	ldr	r3, [r4, #8]
 80095bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80095c0:	3b01      	subs	r3, #1
 80095c2:	60a3      	str	r3, [r4, #8]
 80095c4:	bb39      	cbnz	r1, 8009616 <_puts_r+0x9e>
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	da38      	bge.n	800963c <_puts_r+0xc4>
 80095ca:	4622      	mov	r2, r4
 80095cc:	210a      	movs	r1, #10
 80095ce:	4628      	mov	r0, r5
 80095d0:	f000 f848 	bl	8009664 <__swbuf_r>
 80095d4:	3001      	adds	r0, #1
 80095d6:	d011      	beq.n	80095fc <_puts_r+0x84>
 80095d8:	250a      	movs	r5, #10
 80095da:	e011      	b.n	8009600 <_puts_r+0x88>
 80095dc:	4b1b      	ldr	r3, [pc, #108]	; (800964c <_puts_r+0xd4>)
 80095de:	429c      	cmp	r4, r3
 80095e0:	d101      	bne.n	80095e6 <_puts_r+0x6e>
 80095e2:	68ac      	ldr	r4, [r5, #8]
 80095e4:	e7da      	b.n	800959c <_puts_r+0x24>
 80095e6:	4b1a      	ldr	r3, [pc, #104]	; (8009650 <_puts_r+0xd8>)
 80095e8:	429c      	cmp	r4, r3
 80095ea:	bf08      	it	eq
 80095ec:	68ec      	ldreq	r4, [r5, #12]
 80095ee:	e7d5      	b.n	800959c <_puts_r+0x24>
 80095f0:	4621      	mov	r1, r4
 80095f2:	4628      	mov	r0, r5
 80095f4:	f000 f888 	bl	8009708 <__swsetup_r>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d0dd      	beq.n	80095b8 <_puts_r+0x40>
 80095fc:	f04f 35ff 	mov.w	r5, #4294967295
 8009600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009602:	07da      	lsls	r2, r3, #31
 8009604:	d405      	bmi.n	8009612 <_puts_r+0x9a>
 8009606:	89a3      	ldrh	r3, [r4, #12]
 8009608:	059b      	lsls	r3, r3, #22
 800960a:	d402      	bmi.n	8009612 <_puts_r+0x9a>
 800960c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800960e:	f000 faa2 	bl	8009b56 <__retarget_lock_release_recursive>
 8009612:	4628      	mov	r0, r5
 8009614:	bd70      	pop	{r4, r5, r6, pc}
 8009616:	2b00      	cmp	r3, #0
 8009618:	da04      	bge.n	8009624 <_puts_r+0xac>
 800961a:	69a2      	ldr	r2, [r4, #24]
 800961c:	429a      	cmp	r2, r3
 800961e:	dc06      	bgt.n	800962e <_puts_r+0xb6>
 8009620:	290a      	cmp	r1, #10
 8009622:	d004      	beq.n	800962e <_puts_r+0xb6>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	1c5a      	adds	r2, r3, #1
 8009628:	6022      	str	r2, [r4, #0]
 800962a:	7019      	strb	r1, [r3, #0]
 800962c:	e7c5      	b.n	80095ba <_puts_r+0x42>
 800962e:	4622      	mov	r2, r4
 8009630:	4628      	mov	r0, r5
 8009632:	f000 f817 	bl	8009664 <__swbuf_r>
 8009636:	3001      	adds	r0, #1
 8009638:	d1bf      	bne.n	80095ba <_puts_r+0x42>
 800963a:	e7df      	b.n	80095fc <_puts_r+0x84>
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	250a      	movs	r5, #10
 8009640:	1c5a      	adds	r2, r3, #1
 8009642:	6022      	str	r2, [r4, #0]
 8009644:	701d      	strb	r5, [r3, #0]
 8009646:	e7db      	b.n	8009600 <_puts_r+0x88>
 8009648:	08009ffc 	.word	0x08009ffc
 800964c:	0800a01c 	.word	0x0800a01c
 8009650:	08009fdc 	.word	0x08009fdc

08009654 <puts>:
 8009654:	4b02      	ldr	r3, [pc, #8]	; (8009660 <puts+0xc>)
 8009656:	4601      	mov	r1, r0
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	f7ff bf8d 	b.w	8009578 <_puts_r>
 800965e:	bf00      	nop
 8009660:	24000188 	.word	0x24000188

08009664 <__swbuf_r>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	460e      	mov	r6, r1
 8009668:	4614      	mov	r4, r2
 800966a:	4605      	mov	r5, r0
 800966c:	b118      	cbz	r0, 8009676 <__swbuf_r+0x12>
 800966e:	6983      	ldr	r3, [r0, #24]
 8009670:	b90b      	cbnz	r3, 8009676 <__swbuf_r+0x12>
 8009672:	f000 f9d1 	bl	8009a18 <__sinit>
 8009676:	4b21      	ldr	r3, [pc, #132]	; (80096fc <__swbuf_r+0x98>)
 8009678:	429c      	cmp	r4, r3
 800967a:	d12b      	bne.n	80096d4 <__swbuf_r+0x70>
 800967c:	686c      	ldr	r4, [r5, #4]
 800967e:	69a3      	ldr	r3, [r4, #24]
 8009680:	60a3      	str	r3, [r4, #8]
 8009682:	89a3      	ldrh	r3, [r4, #12]
 8009684:	071a      	lsls	r2, r3, #28
 8009686:	d52f      	bpl.n	80096e8 <__swbuf_r+0x84>
 8009688:	6923      	ldr	r3, [r4, #16]
 800968a:	b36b      	cbz	r3, 80096e8 <__swbuf_r+0x84>
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	6820      	ldr	r0, [r4, #0]
 8009690:	1ac0      	subs	r0, r0, r3
 8009692:	6963      	ldr	r3, [r4, #20]
 8009694:	b2f6      	uxtb	r6, r6
 8009696:	4283      	cmp	r3, r0
 8009698:	4637      	mov	r7, r6
 800969a:	dc04      	bgt.n	80096a6 <__swbuf_r+0x42>
 800969c:	4621      	mov	r1, r4
 800969e:	4628      	mov	r0, r5
 80096a0:	f000 f926 	bl	80098f0 <_fflush_r>
 80096a4:	bb30      	cbnz	r0, 80096f4 <__swbuf_r+0x90>
 80096a6:	68a3      	ldr	r3, [r4, #8]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	60a3      	str	r3, [r4, #8]
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	1c5a      	adds	r2, r3, #1
 80096b0:	6022      	str	r2, [r4, #0]
 80096b2:	701e      	strb	r6, [r3, #0]
 80096b4:	6963      	ldr	r3, [r4, #20]
 80096b6:	3001      	adds	r0, #1
 80096b8:	4283      	cmp	r3, r0
 80096ba:	d004      	beq.n	80096c6 <__swbuf_r+0x62>
 80096bc:	89a3      	ldrh	r3, [r4, #12]
 80096be:	07db      	lsls	r3, r3, #31
 80096c0:	d506      	bpl.n	80096d0 <__swbuf_r+0x6c>
 80096c2:	2e0a      	cmp	r6, #10
 80096c4:	d104      	bne.n	80096d0 <__swbuf_r+0x6c>
 80096c6:	4621      	mov	r1, r4
 80096c8:	4628      	mov	r0, r5
 80096ca:	f000 f911 	bl	80098f0 <_fflush_r>
 80096ce:	b988      	cbnz	r0, 80096f4 <__swbuf_r+0x90>
 80096d0:	4638      	mov	r0, r7
 80096d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d4:	4b0a      	ldr	r3, [pc, #40]	; (8009700 <__swbuf_r+0x9c>)
 80096d6:	429c      	cmp	r4, r3
 80096d8:	d101      	bne.n	80096de <__swbuf_r+0x7a>
 80096da:	68ac      	ldr	r4, [r5, #8]
 80096dc:	e7cf      	b.n	800967e <__swbuf_r+0x1a>
 80096de:	4b09      	ldr	r3, [pc, #36]	; (8009704 <__swbuf_r+0xa0>)
 80096e0:	429c      	cmp	r4, r3
 80096e2:	bf08      	it	eq
 80096e4:	68ec      	ldreq	r4, [r5, #12]
 80096e6:	e7ca      	b.n	800967e <__swbuf_r+0x1a>
 80096e8:	4621      	mov	r1, r4
 80096ea:	4628      	mov	r0, r5
 80096ec:	f000 f80c 	bl	8009708 <__swsetup_r>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d0cb      	beq.n	800968c <__swbuf_r+0x28>
 80096f4:	f04f 37ff 	mov.w	r7, #4294967295
 80096f8:	e7ea      	b.n	80096d0 <__swbuf_r+0x6c>
 80096fa:	bf00      	nop
 80096fc:	08009ffc 	.word	0x08009ffc
 8009700:	0800a01c 	.word	0x0800a01c
 8009704:	08009fdc 	.word	0x08009fdc

08009708 <__swsetup_r>:
 8009708:	4b32      	ldr	r3, [pc, #200]	; (80097d4 <__swsetup_r+0xcc>)
 800970a:	b570      	push	{r4, r5, r6, lr}
 800970c:	681d      	ldr	r5, [r3, #0]
 800970e:	4606      	mov	r6, r0
 8009710:	460c      	mov	r4, r1
 8009712:	b125      	cbz	r5, 800971e <__swsetup_r+0x16>
 8009714:	69ab      	ldr	r3, [r5, #24]
 8009716:	b913      	cbnz	r3, 800971e <__swsetup_r+0x16>
 8009718:	4628      	mov	r0, r5
 800971a:	f000 f97d 	bl	8009a18 <__sinit>
 800971e:	4b2e      	ldr	r3, [pc, #184]	; (80097d8 <__swsetup_r+0xd0>)
 8009720:	429c      	cmp	r4, r3
 8009722:	d10f      	bne.n	8009744 <__swsetup_r+0x3c>
 8009724:	686c      	ldr	r4, [r5, #4]
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800972c:	0719      	lsls	r1, r3, #28
 800972e:	d42c      	bmi.n	800978a <__swsetup_r+0x82>
 8009730:	06dd      	lsls	r5, r3, #27
 8009732:	d411      	bmi.n	8009758 <__swsetup_r+0x50>
 8009734:	2309      	movs	r3, #9
 8009736:	6033      	str	r3, [r6, #0]
 8009738:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800973c:	81a3      	strh	r3, [r4, #12]
 800973e:	f04f 30ff 	mov.w	r0, #4294967295
 8009742:	e03e      	b.n	80097c2 <__swsetup_r+0xba>
 8009744:	4b25      	ldr	r3, [pc, #148]	; (80097dc <__swsetup_r+0xd4>)
 8009746:	429c      	cmp	r4, r3
 8009748:	d101      	bne.n	800974e <__swsetup_r+0x46>
 800974a:	68ac      	ldr	r4, [r5, #8]
 800974c:	e7eb      	b.n	8009726 <__swsetup_r+0x1e>
 800974e:	4b24      	ldr	r3, [pc, #144]	; (80097e0 <__swsetup_r+0xd8>)
 8009750:	429c      	cmp	r4, r3
 8009752:	bf08      	it	eq
 8009754:	68ec      	ldreq	r4, [r5, #12]
 8009756:	e7e6      	b.n	8009726 <__swsetup_r+0x1e>
 8009758:	0758      	lsls	r0, r3, #29
 800975a:	d512      	bpl.n	8009782 <__swsetup_r+0x7a>
 800975c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800975e:	b141      	cbz	r1, 8009772 <__swsetup_r+0x6a>
 8009760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009764:	4299      	cmp	r1, r3
 8009766:	d002      	beq.n	800976e <__swsetup_r+0x66>
 8009768:	4630      	mov	r0, r6
 800976a:	f000 fa5b 	bl	8009c24 <_free_r>
 800976e:	2300      	movs	r3, #0
 8009770:	6363      	str	r3, [r4, #52]	; 0x34
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009778:	81a3      	strh	r3, [r4, #12]
 800977a:	2300      	movs	r3, #0
 800977c:	6063      	str	r3, [r4, #4]
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	f043 0308 	orr.w	r3, r3, #8
 8009788:	81a3      	strh	r3, [r4, #12]
 800978a:	6923      	ldr	r3, [r4, #16]
 800978c:	b94b      	cbnz	r3, 80097a2 <__swsetup_r+0x9a>
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009798:	d003      	beq.n	80097a2 <__swsetup_r+0x9a>
 800979a:	4621      	mov	r1, r4
 800979c:	4630      	mov	r0, r6
 800979e:	f000 fa01 	bl	8009ba4 <__smakebuf_r>
 80097a2:	89a0      	ldrh	r0, [r4, #12]
 80097a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097a8:	f010 0301 	ands.w	r3, r0, #1
 80097ac:	d00a      	beq.n	80097c4 <__swsetup_r+0xbc>
 80097ae:	2300      	movs	r3, #0
 80097b0:	60a3      	str	r3, [r4, #8]
 80097b2:	6963      	ldr	r3, [r4, #20]
 80097b4:	425b      	negs	r3, r3
 80097b6:	61a3      	str	r3, [r4, #24]
 80097b8:	6923      	ldr	r3, [r4, #16]
 80097ba:	b943      	cbnz	r3, 80097ce <__swsetup_r+0xc6>
 80097bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097c0:	d1ba      	bne.n	8009738 <__swsetup_r+0x30>
 80097c2:	bd70      	pop	{r4, r5, r6, pc}
 80097c4:	0781      	lsls	r1, r0, #30
 80097c6:	bf58      	it	pl
 80097c8:	6963      	ldrpl	r3, [r4, #20]
 80097ca:	60a3      	str	r3, [r4, #8]
 80097cc:	e7f4      	b.n	80097b8 <__swsetup_r+0xb0>
 80097ce:	2000      	movs	r0, #0
 80097d0:	e7f7      	b.n	80097c2 <__swsetup_r+0xba>
 80097d2:	bf00      	nop
 80097d4:	24000188 	.word	0x24000188
 80097d8:	08009ffc 	.word	0x08009ffc
 80097dc:	0800a01c 	.word	0x0800a01c
 80097e0:	08009fdc 	.word	0x08009fdc

080097e4 <__sflush_r>:
 80097e4:	898a      	ldrh	r2, [r1, #12]
 80097e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ea:	4605      	mov	r5, r0
 80097ec:	0710      	lsls	r0, r2, #28
 80097ee:	460c      	mov	r4, r1
 80097f0:	d458      	bmi.n	80098a4 <__sflush_r+0xc0>
 80097f2:	684b      	ldr	r3, [r1, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	dc05      	bgt.n	8009804 <__sflush_r+0x20>
 80097f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	dc02      	bgt.n	8009804 <__sflush_r+0x20>
 80097fe:	2000      	movs	r0, #0
 8009800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009806:	2e00      	cmp	r6, #0
 8009808:	d0f9      	beq.n	80097fe <__sflush_r+0x1a>
 800980a:	2300      	movs	r3, #0
 800980c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009810:	682f      	ldr	r7, [r5, #0]
 8009812:	602b      	str	r3, [r5, #0]
 8009814:	d032      	beq.n	800987c <__sflush_r+0x98>
 8009816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	075a      	lsls	r2, r3, #29
 800981c:	d505      	bpl.n	800982a <__sflush_r+0x46>
 800981e:	6863      	ldr	r3, [r4, #4]
 8009820:	1ac0      	subs	r0, r0, r3
 8009822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009824:	b10b      	cbz	r3, 800982a <__sflush_r+0x46>
 8009826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009828:	1ac0      	subs	r0, r0, r3
 800982a:	2300      	movs	r3, #0
 800982c:	4602      	mov	r2, r0
 800982e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009830:	6a21      	ldr	r1, [r4, #32]
 8009832:	4628      	mov	r0, r5
 8009834:	47b0      	blx	r6
 8009836:	1c43      	adds	r3, r0, #1
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	d106      	bne.n	800984a <__sflush_r+0x66>
 800983c:	6829      	ldr	r1, [r5, #0]
 800983e:	291d      	cmp	r1, #29
 8009840:	d82c      	bhi.n	800989c <__sflush_r+0xb8>
 8009842:	4a2a      	ldr	r2, [pc, #168]	; (80098ec <__sflush_r+0x108>)
 8009844:	40ca      	lsrs	r2, r1
 8009846:	07d6      	lsls	r6, r2, #31
 8009848:	d528      	bpl.n	800989c <__sflush_r+0xb8>
 800984a:	2200      	movs	r2, #0
 800984c:	6062      	str	r2, [r4, #4]
 800984e:	04d9      	lsls	r1, r3, #19
 8009850:	6922      	ldr	r2, [r4, #16]
 8009852:	6022      	str	r2, [r4, #0]
 8009854:	d504      	bpl.n	8009860 <__sflush_r+0x7c>
 8009856:	1c42      	adds	r2, r0, #1
 8009858:	d101      	bne.n	800985e <__sflush_r+0x7a>
 800985a:	682b      	ldr	r3, [r5, #0]
 800985c:	b903      	cbnz	r3, 8009860 <__sflush_r+0x7c>
 800985e:	6560      	str	r0, [r4, #84]	; 0x54
 8009860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009862:	602f      	str	r7, [r5, #0]
 8009864:	2900      	cmp	r1, #0
 8009866:	d0ca      	beq.n	80097fe <__sflush_r+0x1a>
 8009868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800986c:	4299      	cmp	r1, r3
 800986e:	d002      	beq.n	8009876 <__sflush_r+0x92>
 8009870:	4628      	mov	r0, r5
 8009872:	f000 f9d7 	bl	8009c24 <_free_r>
 8009876:	2000      	movs	r0, #0
 8009878:	6360      	str	r0, [r4, #52]	; 0x34
 800987a:	e7c1      	b.n	8009800 <__sflush_r+0x1c>
 800987c:	6a21      	ldr	r1, [r4, #32]
 800987e:	2301      	movs	r3, #1
 8009880:	4628      	mov	r0, r5
 8009882:	47b0      	blx	r6
 8009884:	1c41      	adds	r1, r0, #1
 8009886:	d1c7      	bne.n	8009818 <__sflush_r+0x34>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0c4      	beq.n	8009818 <__sflush_r+0x34>
 800988e:	2b1d      	cmp	r3, #29
 8009890:	d001      	beq.n	8009896 <__sflush_r+0xb2>
 8009892:	2b16      	cmp	r3, #22
 8009894:	d101      	bne.n	800989a <__sflush_r+0xb6>
 8009896:	602f      	str	r7, [r5, #0]
 8009898:	e7b1      	b.n	80097fe <__sflush_r+0x1a>
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098a0:	81a3      	strh	r3, [r4, #12]
 80098a2:	e7ad      	b.n	8009800 <__sflush_r+0x1c>
 80098a4:	690f      	ldr	r7, [r1, #16]
 80098a6:	2f00      	cmp	r7, #0
 80098a8:	d0a9      	beq.n	80097fe <__sflush_r+0x1a>
 80098aa:	0793      	lsls	r3, r2, #30
 80098ac:	680e      	ldr	r6, [r1, #0]
 80098ae:	bf08      	it	eq
 80098b0:	694b      	ldreq	r3, [r1, #20]
 80098b2:	600f      	str	r7, [r1, #0]
 80098b4:	bf18      	it	ne
 80098b6:	2300      	movne	r3, #0
 80098b8:	eba6 0807 	sub.w	r8, r6, r7
 80098bc:	608b      	str	r3, [r1, #8]
 80098be:	f1b8 0f00 	cmp.w	r8, #0
 80098c2:	dd9c      	ble.n	80097fe <__sflush_r+0x1a>
 80098c4:	6a21      	ldr	r1, [r4, #32]
 80098c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098c8:	4643      	mov	r3, r8
 80098ca:	463a      	mov	r2, r7
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b0      	blx	r6
 80098d0:	2800      	cmp	r0, #0
 80098d2:	dc06      	bgt.n	80098e2 <__sflush_r+0xfe>
 80098d4:	89a3      	ldrh	r3, [r4, #12]
 80098d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098da:	81a3      	strh	r3, [r4, #12]
 80098dc:	f04f 30ff 	mov.w	r0, #4294967295
 80098e0:	e78e      	b.n	8009800 <__sflush_r+0x1c>
 80098e2:	4407      	add	r7, r0
 80098e4:	eba8 0800 	sub.w	r8, r8, r0
 80098e8:	e7e9      	b.n	80098be <__sflush_r+0xda>
 80098ea:	bf00      	nop
 80098ec:	20400001 	.word	0x20400001

080098f0 <_fflush_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	690b      	ldr	r3, [r1, #16]
 80098f4:	4605      	mov	r5, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	b913      	cbnz	r3, 8009900 <_fflush_r+0x10>
 80098fa:	2500      	movs	r5, #0
 80098fc:	4628      	mov	r0, r5
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	b118      	cbz	r0, 800990a <_fflush_r+0x1a>
 8009902:	6983      	ldr	r3, [r0, #24]
 8009904:	b90b      	cbnz	r3, 800990a <_fflush_r+0x1a>
 8009906:	f000 f887 	bl	8009a18 <__sinit>
 800990a:	4b14      	ldr	r3, [pc, #80]	; (800995c <_fflush_r+0x6c>)
 800990c:	429c      	cmp	r4, r3
 800990e:	d11b      	bne.n	8009948 <_fflush_r+0x58>
 8009910:	686c      	ldr	r4, [r5, #4]
 8009912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0ef      	beq.n	80098fa <_fflush_r+0xa>
 800991a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800991c:	07d0      	lsls	r0, r2, #31
 800991e:	d404      	bmi.n	800992a <_fflush_r+0x3a>
 8009920:	0599      	lsls	r1, r3, #22
 8009922:	d402      	bmi.n	800992a <_fflush_r+0x3a>
 8009924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009926:	f000 f915 	bl	8009b54 <__retarget_lock_acquire_recursive>
 800992a:	4628      	mov	r0, r5
 800992c:	4621      	mov	r1, r4
 800992e:	f7ff ff59 	bl	80097e4 <__sflush_r>
 8009932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009934:	07da      	lsls	r2, r3, #31
 8009936:	4605      	mov	r5, r0
 8009938:	d4e0      	bmi.n	80098fc <_fflush_r+0xc>
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	059b      	lsls	r3, r3, #22
 800993e:	d4dd      	bmi.n	80098fc <_fflush_r+0xc>
 8009940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009942:	f000 f908 	bl	8009b56 <__retarget_lock_release_recursive>
 8009946:	e7d9      	b.n	80098fc <_fflush_r+0xc>
 8009948:	4b05      	ldr	r3, [pc, #20]	; (8009960 <_fflush_r+0x70>)
 800994a:	429c      	cmp	r4, r3
 800994c:	d101      	bne.n	8009952 <_fflush_r+0x62>
 800994e:	68ac      	ldr	r4, [r5, #8]
 8009950:	e7df      	b.n	8009912 <_fflush_r+0x22>
 8009952:	4b04      	ldr	r3, [pc, #16]	; (8009964 <_fflush_r+0x74>)
 8009954:	429c      	cmp	r4, r3
 8009956:	bf08      	it	eq
 8009958:	68ec      	ldreq	r4, [r5, #12]
 800995a:	e7da      	b.n	8009912 <_fflush_r+0x22>
 800995c:	08009ffc 	.word	0x08009ffc
 8009960:	0800a01c 	.word	0x0800a01c
 8009964:	08009fdc 	.word	0x08009fdc

08009968 <std>:
 8009968:	2300      	movs	r3, #0
 800996a:	b510      	push	{r4, lr}
 800996c:	4604      	mov	r4, r0
 800996e:	e9c0 3300 	strd	r3, r3, [r0]
 8009972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009976:	6083      	str	r3, [r0, #8]
 8009978:	8181      	strh	r1, [r0, #12]
 800997a:	6643      	str	r3, [r0, #100]	; 0x64
 800997c:	81c2      	strh	r2, [r0, #14]
 800997e:	6183      	str	r3, [r0, #24]
 8009980:	4619      	mov	r1, r3
 8009982:	2208      	movs	r2, #8
 8009984:	305c      	adds	r0, #92	; 0x5c
 8009986:	f7ff fdef 	bl	8009568 <memset>
 800998a:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <std+0x38>)
 800998c:	6263      	str	r3, [r4, #36]	; 0x24
 800998e:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <std+0x3c>)
 8009990:	62a3      	str	r3, [r4, #40]	; 0x28
 8009992:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <std+0x40>)
 8009994:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009996:	4b05      	ldr	r3, [pc, #20]	; (80099ac <std+0x44>)
 8009998:	6224      	str	r4, [r4, #32]
 800999a:	6323      	str	r3, [r4, #48]	; 0x30
 800999c:	bd10      	pop	{r4, pc}
 800999e:	bf00      	nop
 80099a0:	08009e05 	.word	0x08009e05
 80099a4:	08009e27 	.word	0x08009e27
 80099a8:	08009e5f 	.word	0x08009e5f
 80099ac:	08009e83 	.word	0x08009e83

080099b0 <_cleanup_r>:
 80099b0:	4901      	ldr	r1, [pc, #4]	; (80099b8 <_cleanup_r+0x8>)
 80099b2:	f000 b8af 	b.w	8009b14 <_fwalk_reent>
 80099b6:	bf00      	nop
 80099b8:	080098f1 	.word	0x080098f1

080099bc <__sfmoreglue>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	2268      	movs	r2, #104	; 0x68
 80099c0:	1e4d      	subs	r5, r1, #1
 80099c2:	4355      	muls	r5, r2
 80099c4:	460e      	mov	r6, r1
 80099c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099ca:	f000 f997 	bl	8009cfc <_malloc_r>
 80099ce:	4604      	mov	r4, r0
 80099d0:	b140      	cbz	r0, 80099e4 <__sfmoreglue+0x28>
 80099d2:	2100      	movs	r1, #0
 80099d4:	e9c0 1600 	strd	r1, r6, [r0]
 80099d8:	300c      	adds	r0, #12
 80099da:	60a0      	str	r0, [r4, #8]
 80099dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099e0:	f7ff fdc2 	bl	8009568 <memset>
 80099e4:	4620      	mov	r0, r4
 80099e6:	bd70      	pop	{r4, r5, r6, pc}

080099e8 <__sfp_lock_acquire>:
 80099e8:	4801      	ldr	r0, [pc, #4]	; (80099f0 <__sfp_lock_acquire+0x8>)
 80099ea:	f000 b8b3 	b.w	8009b54 <__retarget_lock_acquire_recursive>
 80099ee:	bf00      	nop
 80099f0:	24000321 	.word	0x24000321

080099f4 <__sfp_lock_release>:
 80099f4:	4801      	ldr	r0, [pc, #4]	; (80099fc <__sfp_lock_release+0x8>)
 80099f6:	f000 b8ae 	b.w	8009b56 <__retarget_lock_release_recursive>
 80099fa:	bf00      	nop
 80099fc:	24000321 	.word	0x24000321

08009a00 <__sinit_lock_acquire>:
 8009a00:	4801      	ldr	r0, [pc, #4]	; (8009a08 <__sinit_lock_acquire+0x8>)
 8009a02:	f000 b8a7 	b.w	8009b54 <__retarget_lock_acquire_recursive>
 8009a06:	bf00      	nop
 8009a08:	24000322 	.word	0x24000322

08009a0c <__sinit_lock_release>:
 8009a0c:	4801      	ldr	r0, [pc, #4]	; (8009a14 <__sinit_lock_release+0x8>)
 8009a0e:	f000 b8a2 	b.w	8009b56 <__retarget_lock_release_recursive>
 8009a12:	bf00      	nop
 8009a14:	24000322 	.word	0x24000322

08009a18 <__sinit>:
 8009a18:	b510      	push	{r4, lr}
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	f7ff fff0 	bl	8009a00 <__sinit_lock_acquire>
 8009a20:	69a3      	ldr	r3, [r4, #24]
 8009a22:	b11b      	cbz	r3, 8009a2c <__sinit+0x14>
 8009a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a28:	f7ff bff0 	b.w	8009a0c <__sinit_lock_release>
 8009a2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a30:	6523      	str	r3, [r4, #80]	; 0x50
 8009a32:	4b13      	ldr	r3, [pc, #76]	; (8009a80 <__sinit+0x68>)
 8009a34:	4a13      	ldr	r2, [pc, #76]	; (8009a84 <__sinit+0x6c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a3a:	42a3      	cmp	r3, r4
 8009a3c:	bf04      	itt	eq
 8009a3e:	2301      	moveq	r3, #1
 8009a40:	61a3      	streq	r3, [r4, #24]
 8009a42:	4620      	mov	r0, r4
 8009a44:	f000 f820 	bl	8009a88 <__sfp>
 8009a48:	6060      	str	r0, [r4, #4]
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 f81c 	bl	8009a88 <__sfp>
 8009a50:	60a0      	str	r0, [r4, #8]
 8009a52:	4620      	mov	r0, r4
 8009a54:	f000 f818 	bl	8009a88 <__sfp>
 8009a58:	2200      	movs	r2, #0
 8009a5a:	60e0      	str	r0, [r4, #12]
 8009a5c:	2104      	movs	r1, #4
 8009a5e:	6860      	ldr	r0, [r4, #4]
 8009a60:	f7ff ff82 	bl	8009968 <std>
 8009a64:	68a0      	ldr	r0, [r4, #8]
 8009a66:	2201      	movs	r2, #1
 8009a68:	2109      	movs	r1, #9
 8009a6a:	f7ff ff7d 	bl	8009968 <std>
 8009a6e:	68e0      	ldr	r0, [r4, #12]
 8009a70:	2202      	movs	r2, #2
 8009a72:	2112      	movs	r1, #18
 8009a74:	f7ff ff78 	bl	8009968 <std>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	61a3      	str	r3, [r4, #24]
 8009a7c:	e7d2      	b.n	8009a24 <__sinit+0xc>
 8009a7e:	bf00      	nop
 8009a80:	08009fd8 	.word	0x08009fd8
 8009a84:	080099b1 	.word	0x080099b1

08009a88 <__sfp>:
 8009a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8a:	4607      	mov	r7, r0
 8009a8c:	f7ff ffac 	bl	80099e8 <__sfp_lock_acquire>
 8009a90:	4b1e      	ldr	r3, [pc, #120]	; (8009b0c <__sfp+0x84>)
 8009a92:	681e      	ldr	r6, [r3, #0]
 8009a94:	69b3      	ldr	r3, [r6, #24]
 8009a96:	b913      	cbnz	r3, 8009a9e <__sfp+0x16>
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f7ff ffbd 	bl	8009a18 <__sinit>
 8009a9e:	3648      	adds	r6, #72	; 0x48
 8009aa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	d503      	bpl.n	8009ab0 <__sfp+0x28>
 8009aa8:	6833      	ldr	r3, [r6, #0]
 8009aaa:	b30b      	cbz	r3, 8009af0 <__sfp+0x68>
 8009aac:	6836      	ldr	r6, [r6, #0]
 8009aae:	e7f7      	b.n	8009aa0 <__sfp+0x18>
 8009ab0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ab4:	b9d5      	cbnz	r5, 8009aec <__sfp+0x64>
 8009ab6:	4b16      	ldr	r3, [pc, #88]	; (8009b10 <__sfp+0x88>)
 8009ab8:	60e3      	str	r3, [r4, #12]
 8009aba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009abe:	6665      	str	r5, [r4, #100]	; 0x64
 8009ac0:	f000 f847 	bl	8009b52 <__retarget_lock_init_recursive>
 8009ac4:	f7ff ff96 	bl	80099f4 <__sfp_lock_release>
 8009ac8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009acc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ad0:	6025      	str	r5, [r4, #0]
 8009ad2:	61a5      	str	r5, [r4, #24]
 8009ad4:	2208      	movs	r2, #8
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009adc:	f7ff fd44 	bl	8009568 <memset>
 8009ae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ae4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ae8:	4620      	mov	r0, r4
 8009aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aec:	3468      	adds	r4, #104	; 0x68
 8009aee:	e7d9      	b.n	8009aa4 <__sfp+0x1c>
 8009af0:	2104      	movs	r1, #4
 8009af2:	4638      	mov	r0, r7
 8009af4:	f7ff ff62 	bl	80099bc <__sfmoreglue>
 8009af8:	4604      	mov	r4, r0
 8009afa:	6030      	str	r0, [r6, #0]
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d1d5      	bne.n	8009aac <__sfp+0x24>
 8009b00:	f7ff ff78 	bl	80099f4 <__sfp_lock_release>
 8009b04:	230c      	movs	r3, #12
 8009b06:	603b      	str	r3, [r7, #0]
 8009b08:	e7ee      	b.n	8009ae8 <__sfp+0x60>
 8009b0a:	bf00      	nop
 8009b0c:	08009fd8 	.word	0x08009fd8
 8009b10:	ffff0001 	.word	0xffff0001

08009b14 <_fwalk_reent>:
 8009b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b18:	4606      	mov	r6, r0
 8009b1a:	4688      	mov	r8, r1
 8009b1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b20:	2700      	movs	r7, #0
 8009b22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b26:	f1b9 0901 	subs.w	r9, r9, #1
 8009b2a:	d505      	bpl.n	8009b38 <_fwalk_reent+0x24>
 8009b2c:	6824      	ldr	r4, [r4, #0]
 8009b2e:	2c00      	cmp	r4, #0
 8009b30:	d1f7      	bne.n	8009b22 <_fwalk_reent+0xe>
 8009b32:	4638      	mov	r0, r7
 8009b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b38:	89ab      	ldrh	r3, [r5, #12]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d907      	bls.n	8009b4e <_fwalk_reent+0x3a>
 8009b3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b42:	3301      	adds	r3, #1
 8009b44:	d003      	beq.n	8009b4e <_fwalk_reent+0x3a>
 8009b46:	4629      	mov	r1, r5
 8009b48:	4630      	mov	r0, r6
 8009b4a:	47c0      	blx	r8
 8009b4c:	4307      	orrs	r7, r0
 8009b4e:	3568      	adds	r5, #104	; 0x68
 8009b50:	e7e9      	b.n	8009b26 <_fwalk_reent+0x12>

08009b52 <__retarget_lock_init_recursive>:
 8009b52:	4770      	bx	lr

08009b54 <__retarget_lock_acquire_recursive>:
 8009b54:	4770      	bx	lr

08009b56 <__retarget_lock_release_recursive>:
 8009b56:	4770      	bx	lr

08009b58 <__swhatbuf_r>:
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	460e      	mov	r6, r1
 8009b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b60:	2900      	cmp	r1, #0
 8009b62:	b096      	sub	sp, #88	; 0x58
 8009b64:	4614      	mov	r4, r2
 8009b66:	461d      	mov	r5, r3
 8009b68:	da08      	bge.n	8009b7c <__swhatbuf_r+0x24>
 8009b6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	602a      	str	r2, [r5, #0]
 8009b72:	061a      	lsls	r2, r3, #24
 8009b74:	d410      	bmi.n	8009b98 <__swhatbuf_r+0x40>
 8009b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b7a:	e00e      	b.n	8009b9a <__swhatbuf_r+0x42>
 8009b7c:	466a      	mov	r2, sp
 8009b7e:	f000 f9a7 	bl	8009ed0 <_fstat_r>
 8009b82:	2800      	cmp	r0, #0
 8009b84:	dbf1      	blt.n	8009b6a <__swhatbuf_r+0x12>
 8009b86:	9a01      	ldr	r2, [sp, #4]
 8009b88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b90:	425a      	negs	r2, r3
 8009b92:	415a      	adcs	r2, r3
 8009b94:	602a      	str	r2, [r5, #0]
 8009b96:	e7ee      	b.n	8009b76 <__swhatbuf_r+0x1e>
 8009b98:	2340      	movs	r3, #64	; 0x40
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	b016      	add	sp, #88	; 0x58
 8009ba0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ba4 <__smakebuf_r>:
 8009ba4:	898b      	ldrh	r3, [r1, #12]
 8009ba6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ba8:	079d      	lsls	r5, r3, #30
 8009baa:	4606      	mov	r6, r0
 8009bac:	460c      	mov	r4, r1
 8009bae:	d507      	bpl.n	8009bc0 <__smakebuf_r+0x1c>
 8009bb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	6123      	str	r3, [r4, #16]
 8009bb8:	2301      	movs	r3, #1
 8009bba:	6163      	str	r3, [r4, #20]
 8009bbc:	b002      	add	sp, #8
 8009bbe:	bd70      	pop	{r4, r5, r6, pc}
 8009bc0:	ab01      	add	r3, sp, #4
 8009bc2:	466a      	mov	r2, sp
 8009bc4:	f7ff ffc8 	bl	8009b58 <__swhatbuf_r>
 8009bc8:	9900      	ldr	r1, [sp, #0]
 8009bca:	4605      	mov	r5, r0
 8009bcc:	4630      	mov	r0, r6
 8009bce:	f000 f895 	bl	8009cfc <_malloc_r>
 8009bd2:	b948      	cbnz	r0, 8009be8 <__smakebuf_r+0x44>
 8009bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bd8:	059a      	lsls	r2, r3, #22
 8009bda:	d4ef      	bmi.n	8009bbc <__smakebuf_r+0x18>
 8009bdc:	f023 0303 	bic.w	r3, r3, #3
 8009be0:	f043 0302 	orr.w	r3, r3, #2
 8009be4:	81a3      	strh	r3, [r4, #12]
 8009be6:	e7e3      	b.n	8009bb0 <__smakebuf_r+0xc>
 8009be8:	4b0d      	ldr	r3, [pc, #52]	; (8009c20 <__smakebuf_r+0x7c>)
 8009bea:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	6020      	str	r0, [r4, #0]
 8009bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf4:	81a3      	strh	r3, [r4, #12]
 8009bf6:	9b00      	ldr	r3, [sp, #0]
 8009bf8:	6163      	str	r3, [r4, #20]
 8009bfa:	9b01      	ldr	r3, [sp, #4]
 8009bfc:	6120      	str	r0, [r4, #16]
 8009bfe:	b15b      	cbz	r3, 8009c18 <__smakebuf_r+0x74>
 8009c00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c04:	4630      	mov	r0, r6
 8009c06:	f000 f975 	bl	8009ef4 <_isatty_r>
 8009c0a:	b128      	cbz	r0, 8009c18 <__smakebuf_r+0x74>
 8009c0c:	89a3      	ldrh	r3, [r4, #12]
 8009c0e:	f023 0303 	bic.w	r3, r3, #3
 8009c12:	f043 0301 	orr.w	r3, r3, #1
 8009c16:	81a3      	strh	r3, [r4, #12]
 8009c18:	89a0      	ldrh	r0, [r4, #12]
 8009c1a:	4305      	orrs	r5, r0
 8009c1c:	81a5      	strh	r5, [r4, #12]
 8009c1e:	e7cd      	b.n	8009bbc <__smakebuf_r+0x18>
 8009c20:	080099b1 	.word	0x080099b1

08009c24 <_free_r>:
 8009c24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c26:	2900      	cmp	r1, #0
 8009c28:	d044      	beq.n	8009cb4 <_free_r+0x90>
 8009c2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c2e:	9001      	str	r0, [sp, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f1a1 0404 	sub.w	r4, r1, #4
 8009c36:	bfb8      	it	lt
 8009c38:	18e4      	addlt	r4, r4, r3
 8009c3a:	f000 f97d 	bl	8009f38 <__malloc_lock>
 8009c3e:	4a1e      	ldr	r2, [pc, #120]	; (8009cb8 <_free_r+0x94>)
 8009c40:	9801      	ldr	r0, [sp, #4]
 8009c42:	6813      	ldr	r3, [r2, #0]
 8009c44:	b933      	cbnz	r3, 8009c54 <_free_r+0x30>
 8009c46:	6063      	str	r3, [r4, #4]
 8009c48:	6014      	str	r4, [r2, #0]
 8009c4a:	b003      	add	sp, #12
 8009c4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c50:	f000 b978 	b.w	8009f44 <__malloc_unlock>
 8009c54:	42a3      	cmp	r3, r4
 8009c56:	d908      	bls.n	8009c6a <_free_r+0x46>
 8009c58:	6825      	ldr	r5, [r4, #0]
 8009c5a:	1961      	adds	r1, r4, r5
 8009c5c:	428b      	cmp	r3, r1
 8009c5e:	bf01      	itttt	eq
 8009c60:	6819      	ldreq	r1, [r3, #0]
 8009c62:	685b      	ldreq	r3, [r3, #4]
 8009c64:	1949      	addeq	r1, r1, r5
 8009c66:	6021      	streq	r1, [r4, #0]
 8009c68:	e7ed      	b.n	8009c46 <_free_r+0x22>
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	b10b      	cbz	r3, 8009c74 <_free_r+0x50>
 8009c70:	42a3      	cmp	r3, r4
 8009c72:	d9fa      	bls.n	8009c6a <_free_r+0x46>
 8009c74:	6811      	ldr	r1, [r2, #0]
 8009c76:	1855      	adds	r5, r2, r1
 8009c78:	42a5      	cmp	r5, r4
 8009c7a:	d10b      	bne.n	8009c94 <_free_r+0x70>
 8009c7c:	6824      	ldr	r4, [r4, #0]
 8009c7e:	4421      	add	r1, r4
 8009c80:	1854      	adds	r4, r2, r1
 8009c82:	42a3      	cmp	r3, r4
 8009c84:	6011      	str	r1, [r2, #0]
 8009c86:	d1e0      	bne.n	8009c4a <_free_r+0x26>
 8009c88:	681c      	ldr	r4, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	6053      	str	r3, [r2, #4]
 8009c8e:	4421      	add	r1, r4
 8009c90:	6011      	str	r1, [r2, #0]
 8009c92:	e7da      	b.n	8009c4a <_free_r+0x26>
 8009c94:	d902      	bls.n	8009c9c <_free_r+0x78>
 8009c96:	230c      	movs	r3, #12
 8009c98:	6003      	str	r3, [r0, #0]
 8009c9a:	e7d6      	b.n	8009c4a <_free_r+0x26>
 8009c9c:	6825      	ldr	r5, [r4, #0]
 8009c9e:	1961      	adds	r1, r4, r5
 8009ca0:	428b      	cmp	r3, r1
 8009ca2:	bf04      	itt	eq
 8009ca4:	6819      	ldreq	r1, [r3, #0]
 8009ca6:	685b      	ldreq	r3, [r3, #4]
 8009ca8:	6063      	str	r3, [r4, #4]
 8009caa:	bf04      	itt	eq
 8009cac:	1949      	addeq	r1, r1, r5
 8009cae:	6021      	streq	r1, [r4, #0]
 8009cb0:	6054      	str	r4, [r2, #4]
 8009cb2:	e7ca      	b.n	8009c4a <_free_r+0x26>
 8009cb4:	b003      	add	sp, #12
 8009cb6:	bd30      	pop	{r4, r5, pc}
 8009cb8:	24000324 	.word	0x24000324

08009cbc <sbrk_aligned>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	4e0e      	ldr	r6, [pc, #56]	; (8009cf8 <sbrk_aligned+0x3c>)
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	6831      	ldr	r1, [r6, #0]
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	b911      	cbnz	r1, 8009cce <sbrk_aligned+0x12>
 8009cc8:	f000 f88c 	bl	8009de4 <_sbrk_r>
 8009ccc:	6030      	str	r0, [r6, #0]
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f000 f887 	bl	8009de4 <_sbrk_r>
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	d00a      	beq.n	8009cf0 <sbrk_aligned+0x34>
 8009cda:	1cc4      	adds	r4, r0, #3
 8009cdc:	f024 0403 	bic.w	r4, r4, #3
 8009ce0:	42a0      	cmp	r0, r4
 8009ce2:	d007      	beq.n	8009cf4 <sbrk_aligned+0x38>
 8009ce4:	1a21      	subs	r1, r4, r0
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f000 f87c 	bl	8009de4 <_sbrk_r>
 8009cec:	3001      	adds	r0, #1
 8009cee:	d101      	bne.n	8009cf4 <sbrk_aligned+0x38>
 8009cf0:	f04f 34ff 	mov.w	r4, #4294967295
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	24000328 	.word	0x24000328

08009cfc <_malloc_r>:
 8009cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d00:	1ccd      	adds	r5, r1, #3
 8009d02:	f025 0503 	bic.w	r5, r5, #3
 8009d06:	3508      	adds	r5, #8
 8009d08:	2d0c      	cmp	r5, #12
 8009d0a:	bf38      	it	cc
 8009d0c:	250c      	movcc	r5, #12
 8009d0e:	2d00      	cmp	r5, #0
 8009d10:	4607      	mov	r7, r0
 8009d12:	db01      	blt.n	8009d18 <_malloc_r+0x1c>
 8009d14:	42a9      	cmp	r1, r5
 8009d16:	d905      	bls.n	8009d24 <_malloc_r+0x28>
 8009d18:	230c      	movs	r3, #12
 8009d1a:	603b      	str	r3, [r7, #0]
 8009d1c:	2600      	movs	r6, #0
 8009d1e:	4630      	mov	r0, r6
 8009d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d24:	4e2e      	ldr	r6, [pc, #184]	; (8009de0 <_malloc_r+0xe4>)
 8009d26:	f000 f907 	bl	8009f38 <__malloc_lock>
 8009d2a:	6833      	ldr	r3, [r6, #0]
 8009d2c:	461c      	mov	r4, r3
 8009d2e:	bb34      	cbnz	r4, 8009d7e <_malloc_r+0x82>
 8009d30:	4629      	mov	r1, r5
 8009d32:	4638      	mov	r0, r7
 8009d34:	f7ff ffc2 	bl	8009cbc <sbrk_aligned>
 8009d38:	1c43      	adds	r3, r0, #1
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	d14d      	bne.n	8009dda <_malloc_r+0xde>
 8009d3e:	6834      	ldr	r4, [r6, #0]
 8009d40:	4626      	mov	r6, r4
 8009d42:	2e00      	cmp	r6, #0
 8009d44:	d140      	bne.n	8009dc8 <_malloc_r+0xcc>
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	eb04 0803 	add.w	r8, r4, r3
 8009d50:	f000 f848 	bl	8009de4 <_sbrk_r>
 8009d54:	4580      	cmp	r8, r0
 8009d56:	d13a      	bne.n	8009dce <_malloc_r+0xd2>
 8009d58:	6821      	ldr	r1, [r4, #0]
 8009d5a:	3503      	adds	r5, #3
 8009d5c:	1a6d      	subs	r5, r5, r1
 8009d5e:	f025 0503 	bic.w	r5, r5, #3
 8009d62:	3508      	adds	r5, #8
 8009d64:	2d0c      	cmp	r5, #12
 8009d66:	bf38      	it	cc
 8009d68:	250c      	movcc	r5, #12
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	4638      	mov	r0, r7
 8009d6e:	f7ff ffa5 	bl	8009cbc <sbrk_aligned>
 8009d72:	3001      	adds	r0, #1
 8009d74:	d02b      	beq.n	8009dce <_malloc_r+0xd2>
 8009d76:	6823      	ldr	r3, [r4, #0]
 8009d78:	442b      	add	r3, r5
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	e00e      	b.n	8009d9c <_malloc_r+0xa0>
 8009d7e:	6822      	ldr	r2, [r4, #0]
 8009d80:	1b52      	subs	r2, r2, r5
 8009d82:	d41e      	bmi.n	8009dc2 <_malloc_r+0xc6>
 8009d84:	2a0b      	cmp	r2, #11
 8009d86:	d916      	bls.n	8009db6 <_malloc_r+0xba>
 8009d88:	1961      	adds	r1, r4, r5
 8009d8a:	42a3      	cmp	r3, r4
 8009d8c:	6025      	str	r5, [r4, #0]
 8009d8e:	bf18      	it	ne
 8009d90:	6059      	strne	r1, [r3, #4]
 8009d92:	6863      	ldr	r3, [r4, #4]
 8009d94:	bf08      	it	eq
 8009d96:	6031      	streq	r1, [r6, #0]
 8009d98:	5162      	str	r2, [r4, r5]
 8009d9a:	604b      	str	r3, [r1, #4]
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	f104 060b 	add.w	r6, r4, #11
 8009da2:	f000 f8cf 	bl	8009f44 <__malloc_unlock>
 8009da6:	f026 0607 	bic.w	r6, r6, #7
 8009daa:	1d23      	adds	r3, r4, #4
 8009dac:	1af2      	subs	r2, r6, r3
 8009dae:	d0b6      	beq.n	8009d1e <_malloc_r+0x22>
 8009db0:	1b9b      	subs	r3, r3, r6
 8009db2:	50a3      	str	r3, [r4, r2]
 8009db4:	e7b3      	b.n	8009d1e <_malloc_r+0x22>
 8009db6:	6862      	ldr	r2, [r4, #4]
 8009db8:	42a3      	cmp	r3, r4
 8009dba:	bf0c      	ite	eq
 8009dbc:	6032      	streq	r2, [r6, #0]
 8009dbe:	605a      	strne	r2, [r3, #4]
 8009dc0:	e7ec      	b.n	8009d9c <_malloc_r+0xa0>
 8009dc2:	4623      	mov	r3, r4
 8009dc4:	6864      	ldr	r4, [r4, #4]
 8009dc6:	e7b2      	b.n	8009d2e <_malloc_r+0x32>
 8009dc8:	4634      	mov	r4, r6
 8009dca:	6876      	ldr	r6, [r6, #4]
 8009dcc:	e7b9      	b.n	8009d42 <_malloc_r+0x46>
 8009dce:	230c      	movs	r3, #12
 8009dd0:	603b      	str	r3, [r7, #0]
 8009dd2:	4638      	mov	r0, r7
 8009dd4:	f000 f8b6 	bl	8009f44 <__malloc_unlock>
 8009dd8:	e7a1      	b.n	8009d1e <_malloc_r+0x22>
 8009dda:	6025      	str	r5, [r4, #0]
 8009ddc:	e7de      	b.n	8009d9c <_malloc_r+0xa0>
 8009dde:	bf00      	nop
 8009de0:	24000324 	.word	0x24000324

08009de4 <_sbrk_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	4d06      	ldr	r5, [pc, #24]	; (8009e00 <_sbrk_r+0x1c>)
 8009de8:	2300      	movs	r3, #0
 8009dea:	4604      	mov	r4, r0
 8009dec:	4608      	mov	r0, r1
 8009dee:	602b      	str	r3, [r5, #0]
 8009df0:	f7f7 f964 	bl	80010bc <_sbrk>
 8009df4:	1c43      	adds	r3, r0, #1
 8009df6:	d102      	bne.n	8009dfe <_sbrk_r+0x1a>
 8009df8:	682b      	ldr	r3, [r5, #0]
 8009dfa:	b103      	cbz	r3, 8009dfe <_sbrk_r+0x1a>
 8009dfc:	6023      	str	r3, [r4, #0]
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	2400032c 	.word	0x2400032c

08009e04 <__sread>:
 8009e04:	b510      	push	{r4, lr}
 8009e06:	460c      	mov	r4, r1
 8009e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e0c:	f000 f8a0 	bl	8009f50 <_read_r>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	bfab      	itete	ge
 8009e14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e16:	89a3      	ldrhlt	r3, [r4, #12]
 8009e18:	181b      	addge	r3, r3, r0
 8009e1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e1e:	bfac      	ite	ge
 8009e20:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e22:	81a3      	strhlt	r3, [r4, #12]
 8009e24:	bd10      	pop	{r4, pc}

08009e26 <__swrite>:
 8009e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2a:	461f      	mov	r7, r3
 8009e2c:	898b      	ldrh	r3, [r1, #12]
 8009e2e:	05db      	lsls	r3, r3, #23
 8009e30:	4605      	mov	r5, r0
 8009e32:	460c      	mov	r4, r1
 8009e34:	4616      	mov	r6, r2
 8009e36:	d505      	bpl.n	8009e44 <__swrite+0x1e>
 8009e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f000 f868 	bl	8009f14 <_lseek_r>
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	4632      	mov	r2, r6
 8009e52:	463b      	mov	r3, r7
 8009e54:	4628      	mov	r0, r5
 8009e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5a:	f000 b817 	b.w	8009e8c <_write_r>

08009e5e <__sseek>:
 8009e5e:	b510      	push	{r4, lr}
 8009e60:	460c      	mov	r4, r1
 8009e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e66:	f000 f855 	bl	8009f14 <_lseek_r>
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	bf15      	itete	ne
 8009e70:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e7a:	81a3      	strheq	r3, [r4, #12]
 8009e7c:	bf18      	it	ne
 8009e7e:	81a3      	strhne	r3, [r4, #12]
 8009e80:	bd10      	pop	{r4, pc}

08009e82 <__sclose>:
 8009e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e86:	f000 b813 	b.w	8009eb0 <_close_r>
	...

08009e8c <_write_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d07      	ldr	r5, [pc, #28]	; (8009eac <_write_r+0x20>)
 8009e90:	4604      	mov	r4, r0
 8009e92:	4608      	mov	r0, r1
 8009e94:	4611      	mov	r1, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	602a      	str	r2, [r5, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f7f7 f8bd 	bl	800101a <_write>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d102      	bne.n	8009eaa <_write_r+0x1e>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	b103      	cbz	r3, 8009eaa <_write_r+0x1e>
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	2400032c 	.word	0x2400032c

08009eb0 <_close_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4d06      	ldr	r5, [pc, #24]	; (8009ecc <_close_r+0x1c>)
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	4608      	mov	r0, r1
 8009eba:	602b      	str	r3, [r5, #0]
 8009ebc:	f7f7 f8c9 	bl	8001052 <_close>
 8009ec0:	1c43      	adds	r3, r0, #1
 8009ec2:	d102      	bne.n	8009eca <_close_r+0x1a>
 8009ec4:	682b      	ldr	r3, [r5, #0]
 8009ec6:	b103      	cbz	r3, 8009eca <_close_r+0x1a>
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	2400032c 	.word	0x2400032c

08009ed0 <_fstat_r>:
 8009ed0:	b538      	push	{r3, r4, r5, lr}
 8009ed2:	4d07      	ldr	r5, [pc, #28]	; (8009ef0 <_fstat_r+0x20>)
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	4608      	mov	r0, r1
 8009eda:	4611      	mov	r1, r2
 8009edc:	602b      	str	r3, [r5, #0]
 8009ede:	f7f7 f8c4 	bl	800106a <_fstat>
 8009ee2:	1c43      	adds	r3, r0, #1
 8009ee4:	d102      	bne.n	8009eec <_fstat_r+0x1c>
 8009ee6:	682b      	ldr	r3, [r5, #0]
 8009ee8:	b103      	cbz	r3, 8009eec <_fstat_r+0x1c>
 8009eea:	6023      	str	r3, [r4, #0]
 8009eec:	bd38      	pop	{r3, r4, r5, pc}
 8009eee:	bf00      	nop
 8009ef0:	2400032c 	.word	0x2400032c

08009ef4 <_isatty_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	4d06      	ldr	r5, [pc, #24]	; (8009f10 <_isatty_r+0x1c>)
 8009ef8:	2300      	movs	r3, #0
 8009efa:	4604      	mov	r4, r0
 8009efc:	4608      	mov	r0, r1
 8009efe:	602b      	str	r3, [r5, #0]
 8009f00:	f7f7 f8c3 	bl	800108a <_isatty>
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	d102      	bne.n	8009f0e <_isatty_r+0x1a>
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	b103      	cbz	r3, 8009f0e <_isatty_r+0x1a>
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	2400032c 	.word	0x2400032c

08009f14 <_lseek_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	4d07      	ldr	r5, [pc, #28]	; (8009f34 <_lseek_r+0x20>)
 8009f18:	4604      	mov	r4, r0
 8009f1a:	4608      	mov	r0, r1
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	602a      	str	r2, [r5, #0]
 8009f22:	461a      	mov	r2, r3
 8009f24:	f7f7 f8bc 	bl	80010a0 <_lseek>
 8009f28:	1c43      	adds	r3, r0, #1
 8009f2a:	d102      	bne.n	8009f32 <_lseek_r+0x1e>
 8009f2c:	682b      	ldr	r3, [r5, #0]
 8009f2e:	b103      	cbz	r3, 8009f32 <_lseek_r+0x1e>
 8009f30:	6023      	str	r3, [r4, #0]
 8009f32:	bd38      	pop	{r3, r4, r5, pc}
 8009f34:	2400032c 	.word	0x2400032c

08009f38 <__malloc_lock>:
 8009f38:	4801      	ldr	r0, [pc, #4]	; (8009f40 <__malloc_lock+0x8>)
 8009f3a:	f7ff be0b 	b.w	8009b54 <__retarget_lock_acquire_recursive>
 8009f3e:	bf00      	nop
 8009f40:	24000320 	.word	0x24000320

08009f44 <__malloc_unlock>:
 8009f44:	4801      	ldr	r0, [pc, #4]	; (8009f4c <__malloc_unlock+0x8>)
 8009f46:	f7ff be06 	b.w	8009b56 <__retarget_lock_release_recursive>
 8009f4a:	bf00      	nop
 8009f4c:	24000320 	.word	0x24000320

08009f50 <_read_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	4d07      	ldr	r5, [pc, #28]	; (8009f70 <_read_r+0x20>)
 8009f54:	4604      	mov	r4, r0
 8009f56:	4608      	mov	r0, r1
 8009f58:	4611      	mov	r1, r2
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	602a      	str	r2, [r5, #0]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	f7f7 f83e 	bl	8000fe0 <_read>
 8009f64:	1c43      	adds	r3, r0, #1
 8009f66:	d102      	bne.n	8009f6e <_read_r+0x1e>
 8009f68:	682b      	ldr	r3, [r5, #0]
 8009f6a:	b103      	cbz	r3, 8009f6e <_read_r+0x1e>
 8009f6c:	6023      	str	r3, [r4, #0]
 8009f6e:	bd38      	pop	{r3, r4, r5, pc}
 8009f70:	2400032c 	.word	0x2400032c

08009f74 <_init>:
 8009f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f76:	bf00      	nop
 8009f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f7a:	bc08      	pop	{r3}
 8009f7c:	469e      	mov	lr, r3
 8009f7e:	4770      	bx	lr

08009f80 <_fini>:
 8009f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f82:	bf00      	nop
 8009f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f86:	bc08      	pop	{r3}
 8009f88:	469e      	mov	lr, r3
 8009f8a:	4770      	bx	lr
